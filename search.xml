<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>EChart</title>
    <url>/2020/07/07/EChart%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h3 id="先引入"><a href="#先引入" class="headerlink" title="先引入"></a>先引入</h3><p><code>&lt;script src=&quot;js/echarts.min.js&quot;&gt;&lt;/script&gt;</code></p>
<h3 id="再实例"><a href="#再实例" class="headerlink" title="再实例"></a>再实例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.querySelector(<span class="string">'.bar1'</span>));<span class="comment">//实例echart</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> option = &#123;												<span class="comment">//配置内部参数</span></span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        type: <span class="string">'category'</span>,</span><br><span class="line">        data: [<span class="string">'Mon'</span>, <span class="string">'Tue'</span>, <span class="string">'Wed'</span>, <span class="string">'Thu'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>, <span class="string">'Sun'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">        type: <span class="string">'value'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    series: [&#123;</span><br><span class="line">        data: [<span class="number">120</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">110</span>, <span class="number">130</span>],</span><br><span class="line">        type: <span class="string">'bar'</span>,</span><br><span class="line">        showBackground: <span class="literal">true</span>,</span><br><span class="line">        backgroundStyle: &#123;</span><br><span class="line">            color: <span class="string">'rgba(220, 220, 220, 0.8)'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    myChart.setOption(option) <span class="comment">//将他们结合</span></span><br></pre></td></tr></table></figure>



<h1 id="Echarts-基础配置"><a href="#Echarts-基础配置" class="headerlink" title="Echarts-基础配置"></a>Echarts-基础配置</h1><h3 id="需要了解的主要配置：series-xAxis-yAxis-grid-tooltip-title-legend-color"><a href="#需要了解的主要配置：series-xAxis-yAxis-grid-tooltip-title-legend-color" class="headerlink" title="需要了解的主要配置：series xAxis yAxis grid tooltip title legend color"></a>需要了解的主要配置：<code>series</code> <code>xAxis</code> <code>yAxis</code> <code>grid</code> <code>tooltip</code> <code>title</code> <code>legend</code> <code>color</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- series</span><br><span class="line"></span><br><span class="line">  - 系列列表。每个系列通过 &#96;type&#96; 决定自己的图表类型</span><br><span class="line">  - 大白话：图标数据，指定什么类型的图标，可以多个图表重叠。</span><br><span class="line"></span><br><span class="line">- xAxis：直角坐标系 grid 中的 x 轴</span><br><span class="line"></span><br><span class="line">  - boundaryGap: 坐标轴两边留白策略 true，这时候刻度只是作为分隔线，标签和数据点都会在两个刻度之间的带(band)中间。</span><br><span class="line"></span><br><span class="line">- yAxis：直角坐标系 grid 中的 y 轴</span><br><span class="line"></span><br><span class="line">- grid：直角坐标系内绘图网格。 </span><br><span class="line"></span><br><span class="line">- title：标题组件</span><br><span class="line"></span><br><span class="line">- tooltip：提示框组件</span><br><span class="line"></span><br><span class="line">- legend：图例组件</span><br><span class="line"></span><br><span class="line">- color：调色盘颜色列表</span><br><span class="line"></span><br><span class="line">  数据堆叠，同个类目轴上系列配置相同的&#96;stack&#96;值后 后一个系列的值会在前一个系列的值上相加。</span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  option = &#123;</span><br><span class="line">    <span class="comment">// color设置我们线条的颜色 注意后面是个数组</span></span><br><span class="line">    color: [<span class="string">'pink'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'skyblue'</span>],</span><br><span class="line">    <span class="comment">// 设置图表的标题</span></span><br><span class="line">    title: &#123;</span><br><span class="line">        text: <span class="string">'折线图堆叠123'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 图表的提示框组件 </span></span><br><span class="line">    tooltip: &#123;</span><br><span class="line">        <span class="comment">// 触发方式</span></span><br><span class="line">        trigger: <span class="string">'axis'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 图例组件</span></span><br><span class="line">    legend: &#123;</span><br><span class="line">       <span class="comment">// series里面有了 name值则 legend里面的data可以删掉</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 网格配置  grid可以控制线形图 柱状图 图表大小</span></span><br><span class="line">    grid: &#123;</span><br><span class="line">        left: <span class="string">'3%'</span>,</span><br><span class="line">        right: <span class="string">'4%'</span>,</span><br><span class="line">        bottom: <span class="string">'3%'</span>,</span><br><span class="line">        <span class="comment">// 是否显示刻度标签 如果是true 就显示 否则反之</span></span><br><span class="line">        containLabel: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 工具箱组件  可以另存为图片等功能</span></span><br><span class="line">    toolbox: &#123;</span><br><span class="line">        feature: &#123;</span><br><span class="line">            saveAsImage: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置x轴的相关配置</span></span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        type: <span class="string">'category'</span>,</span><br><span class="line">        <span class="comment">// 是否让我们的线条和坐标轴有缝隙</span></span><br><span class="line">        boundaryGap: <span class="literal">false</span>,</span><br><span class="line">        data: [<span class="string">'星期一'</span>, <span class="string">'周二'</span>, <span class="string">'周三'</span>, <span class="string">'周四'</span>, <span class="string">'周五'</span>, <span class="string">'周六'</span>, <span class="string">'周日'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="comment">// 设置y轴的相关配置</span></span><br><span class="line">    yAxis: &#123;</span><br><span class="line">        type: <span class="string">'value'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 系列图表配置 它决定着显示那种类型的图表</span></span><br><span class="line">    series: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'邮件营销'</span>,</span><br><span class="line">            type: <span class="string">'line'</span>,</span><br><span class="line">           </span><br><span class="line">            data: [<span class="number">120</span>, <span class="number">132</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'联盟广告'</span>,</span><br><span class="line">            type: <span class="string">'line'</span>,</span><br><span class="line"></span><br><span class="line">            data: [<span class="number">220</span>, <span class="number">182</span>, <span class="number">191</span>, <span class="number">234</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'视频广告'</span>,</span><br><span class="line">            type: <span class="string">'line'</span>,</span><br><span class="line">          </span><br><span class="line">            data: [<span class="number">150</span>, <span class="number">232</span>, <span class="number">201</span>, <span class="number">154</span>, <span class="number">190</span>, <span class="number">330</span>, <span class="number">410</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'直接访问'</span>,</span><br><span class="line">            type: <span class="string">'line'</span>,</span><br><span class="line">          </span><br><span class="line">            data: [<span class="number">320</span>, <span class="number">332</span>, <span class="number">301</span>, <span class="number">334</span>, <span class="number">390</span>, <span class="number">330</span>, <span class="number">320</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-39.png" alt="upload successful"></p>
<h3 id="渐变写法"><a href="#渐变写法" class="headerlink" title="渐变写法"></a>渐变写法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">areaStyle: &#123;</span><br><span class="line">    color: <span class="keyword">new</span> echarts.graphic.LinearGradient(</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                offset: <span class="number">0</span>,</span><br><span class="line">                color: <span class="string">"rgba(1, 132, 213, 0.4)"</span>   <span class="comment">// 渐变色的起始颜色</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                offset: <span class="number">0.8</span>,</span><br><span class="line">                color: <span class="string">"rgba(1, 132, 213, 0.1)"</span>   <span class="comment">// 渐变线的结束颜色</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="literal">false</span></span><br><span class="line">    ),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>EChart</category>
      </categories>
      <tags>
        <tag>EChart</tag>
      </tags>
  </entry>
  <entry>
    <title>Ant UI</title>
    <url>/2020/06/27/Ant-UI/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install antd-mobile --save</span><br></pre></td></tr></table></figure>

<h3 id="样式全部导入，组件单独导入"><a href="#样式全部导入，组件单独导入" class="headerlink" title="样式全部导入，组件单独导入"></a>样式全部导入，组件单独导入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;antd-mobile&#x2F;dist&#x2F;antd-mobile.css&#39;</span><br><span class="line"></span><br><span class="line">import &#123;Button&#125; from &quot;antd-mobile&quot;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Button&gt;Start&lt;&#x2F;Button&gt;,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h3><p>1.安装babel-plugin-import</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm i babel-plugin-import --save</span><br></pre></td></tr></table></figure>
<p>2.配置babel-plugin-import</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run eject &#x2F;&#x2F;让隐藏的配置文件显示出来</span><br></pre></td></tr></table></figure>
<p>如果报错</p>
<p><img src="/images/pasted-34.png" alt="upload successful"><br>3.package.json里最后加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;plugins&quot;: [</span><br><span class="line">    [&quot;import&quot;, &#123; &quot;libraryName&quot;: &quot;antd-mobile&quot;, &quot;style&quot;: &quot;css&quot; &#125;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<p><img src="/images/pasted-36.png" alt="upload successful"><br>4.之后使用时只需要引组件就行，css会自动按需加载</p>
<p><img src="/images/pasted-37.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>ant</tag>
      </tags>
  </entry>
  <entry>
    <title>React-Redux</title>
    <url>/2020/06/27/React-Redux/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i react-redux --save</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; createStore &#125; from &quot;redux&quot;</span><br><span class="line">import &#123; Provider,connect &#125; from &quot;react-redux&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="comment">//计数,通过stroe的state传给props，直接通过props就可以获取state数据</span></span><br><span class="line">        <span class="keyword">const</span> value = <span class="keyword">this</span>.props.value</span><br><span class="line">        <span class="comment">// 将修改数据事件的方法传到props</span></span><br><span class="line">        <span class="keyword">const</span> onAdd = <span class="keyword">this</span>.props.onAdd</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;计数:&#123;value&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;onAdd&#125;&gt;+&lt;/</span>button&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/定义动作</span></span><br><span class="line"><span class="regexp">const addAction = &#123;</span></span><br><span class="line"><span class="regexp">    type:"add"</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function reducer(state=&#123;num:0&#125;,action)&#123;</span></span><br><span class="line"><span class="regexp">    switch(action.type)&#123;</span></span><br><span class="line"><span class="regexp">        case "add":</span></span><br><span class="line"><span class="regexp">            state.num++</span></span><br><span class="line"><span class="regexp">            break;</span></span><br><span class="line"><span class="regexp">        default:</span></span><br><span class="line"><span class="regexp">            break;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    return &#123;...state&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/创造仓库</span></span><br><span class="line"><span class="regexp">const store = createStore(reducer)</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/将state映射到props</span></span><br><span class="line"><span class="regexp">function mapStateToProps(state)&#123;</span></span><br><span class="line"><span class="regexp">    return&#123;</span></span><br><span class="line"><span class="regexp">        value:state.num</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/将修改state数据方法映射到props</span></span><br><span class="line"><span class="regexp">function mapDispatchToProps(dispatch)&#123;</span></span><br><span class="line"><span class="regexp">    return&#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/传入动作</span></span><br><span class="line"><span class="regexp">        onAdd :()=&gt;&#123;dispatch(addAction)&#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/将上面两个方法映射到组件上，形成新的组件</span></span><br><span class="line"><span class="regexp">const AppCounter = connect(</span></span><br><span class="line"><span class="regexp">    mapStateToProps,</span></span><br><span class="line"><span class="regexp">    mapDispatchToProps</span></span><br><span class="line"><span class="regexp">)(Counter)/</span><span class="regexp">/传入组件，形成新的组件</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">    &lt;Provider store=&#123;store&#125;&gt;/</span><span class="regexp">/最大的根组件</span></span><br><span class="line"><span class="regexp">        &lt;AppCounter&gt;&lt;/</span>AppCounter&gt;</span><br><span class="line">    &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">    document.querySelector("#root")</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure>


<p><img src="/images/pasted-33.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React Hooks</title>
    <url>/2020/06/28/React-Hooks/</url>
    <content><![CDATA[<h3 id="useState，useEffect初体验"><a href="#useState，useEffect初体验" class="headerlink" title="useState，useEffect初体验"></a>useState，useEffect初体验</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Link, Route &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Index</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"useEffect index"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//解绑,相当于WillUnmount</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"溜了溜了"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,[])  <span class="comment">//[]里可以传参数，表示只要数组内的内容变化才会解绑，直接[]就代表组件被销毁的时候执行</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;index&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">About</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"useEffect about"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;about&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//useState 会返回一对值：当前状态和一个让你更新它的函数</span></span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">//useEffect  相当于DidMount,DidUpdate,WillUnmount的结合体</span></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"useEffect"</span> + count)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;click &#123;count&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;() =&gt; &#123; setCount(count + 1) &#125;&#125;&gt;click&lt;/</span>button&gt;</span><br><span class="line">            &lt;Router&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;Link to=<span class="string">"/"</span>&gt;index&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;Link to="/</span>about<span class="string">"&gt;about&lt;/Link&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">                &lt;div&gt;</span></span><br><span class="line"><span class="string">                    &lt;Route path="</span>/<span class="string">" exact component=&#123;Index&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">                    &lt;Route path="</span>/about<span class="string">" component=&#123;About&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/Router&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default Example</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React Styled-components</title>
    <url>/2020/07/24/React-Styled-components/</url>
    <content><![CDATA[<h3 id="先安装"><a href="#先安装" class="headerlink" title="先安装"></a>先安装</h3><p><code>cnpm i styled-components</code><br>在vs code中安装vscode-styled-components这个插件，可以辅助开发</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>先建个如theme.js的文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    primaryColor : <span class="string">"#d82c62"</span><span class="comment">//定义全局颜色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>去index.js引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ThemeProvider&#125; <span class="keyword">from</span> <span class="string">"styled-components"</span></span><br><span class="line"><span class="keyword">import</span> theme <span class="keyword">from</span> <span class="string">"./theme"</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;React.StrictMode&gt;</span><br><span class="line">        &lt;ThemeProvider theme = &#123;theme&#125;&gt;</span><br><span class="line">            &lt;App /&gt;</span><br><span class="line">        &lt;<span class="regexp">/ThemeProvider&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>React.StrictMode&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>这样所有用styled-components创建的组件里面的props都会带有theme的属性</p>
<p>去组件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">"styled-components"</span></span><br><span class="line"><span class="comment">//StyleButton是新的组件名，后面的div是要生产的标签名</span></span><br><span class="line"><span class="keyword">const</span> StyleButton = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">    background:red</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;StyleButton&gt;</span><br><span class="line">            &lt;button&gt;点我&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>StyleButton&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-91.png" alt="upload successful"><br>这样就生效了</p>
<h3 id="动态使用"><a href="#动态使用" class="headerlink" title="动态使用"></a>动态使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> StyleButton = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">    background:<span class="subst">$&#123;(&#123;theme&#125;</span>)=&gt;theme.primaryColor&#125;;//使用之前定义的全局颜色,参数是props，只不过结构了</span></span><br><span class="line"><span class="string">    width:<span class="subst">$&#123;props =&gt; props.width&#125;</span>;//可以将props中的属性传给css	</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;StyleButton width=<span class="string">"100px"</span>&gt;</span><br><span class="line">            &lt;button&gt;点我&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>StyleButton&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-92.png" alt="upload successful"></p>
<h3 id="css方法"><a href="#css方法" class="headerlink" title="css方法"></a>css方法</h3><p>他有个css的方法,方便复用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled, &#123; css &#125; <span class="keyword">from</span> <span class="string">"styled-components"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circleMixinFunc = <span class="function"><span class="params">color</span> =&gt;</span> css`</span><br><span class="line"><span class="css">    <span class="selector-tag">content</span><span class="selector-pseudo">:''</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:8px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">height</span><span class="selector-pseudo">:8px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-radius</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>:</span><span class="subst">$&#123;color&#125;</span><span class="css">;</span></span><br><span class="line"><span class="css">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> StatusIcon = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">    position:absolute;</span></span><br><span class="line"><span class="string">    left: 2px;</span></span><br><span class="line"><span class="string">    top: 4px;</span></span><br><span class="line"><span class="string">    &amp;::after&#123;</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;(&#123;theme&#125;</span>)=&gt;circleMixinFunc(theme.green)&#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure>
<p>当要声明的组件本质也是个组件时</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MenuIcon = styled(FontAwesomeIcon)<span class="string">`//参数是组件名</span></span><br><span class="line"><span class="string">    color:#fff;</span></span><br><span class="line"><span class="string">    font-size:24px;</span></span><br><span class="line"><span class="string">    opacity:<span class="subst">$&#123;(&#123; active &#125;</span>) =&gt; active ? 1 : 0.3&#125;;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure>
<h3 id="根据传进来的值改变样式"><a href="#根据传进来的值改变样式" class="headerlink" title="根据传进来的值改变样式"></a>根据传进来的值改变样式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled, &#123; css &#125; <span class="keyword">from</span> <span class="string">"styled-components"</span></span><br><span class="line"><span class="keyword">import</span> &#123; circle &#125; <span class="keyword">from</span> <span class="string">"utils/mixins"</span></span><br><span class="line"><span class="keyword">const</span> variants = &#123;<span class="comment">//定义两种情况</span></span><br><span class="line">    dot: css`</span><br><span class="line"><span class="css">        <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">padding</span><span class="selector-pseudo">:5px</span>;</span></span><br><span class="line"><span class="css">        &amp;<span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">display</span>:</span><span class="subst">$&#123;(&#123; show &#125;</span><span class="css">) =&gt; (<span class="selector-tag">show</span> ? "<span class="selector-tag">block</span>" : "<span class="selector-tag">none</span>")&#125;;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">content</span><span class="selector-pseudo">:""</span>;</span></span><br><span class="line"><span class="css">            </span><span class="subst">$&#123;(&#123; theme &#125;</span><span class="css">) =&gt; <span class="selector-tag">circle</span>(<span class="selector-tag">theme</span><span class="selector-class">.red</span>, "6<span class="selector-tag">px</span>")&#125;;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">right</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:0</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    `</span>,</span><br><span class="line">    <span class="keyword">default</span>: css`</span><br><span class="line"><span class="css">        </span><span class="subst">$&#123;(&#123; theme &#125;</span><span class="css">) =&gt; <span class="selector-tag">circle</span>(<span class="selector-tag">theme</span><span class="selector-class">.red</span>, "26<span class="selector-tag">px</span>")&#125;;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">display</span><span class="selector-pseudo">:flex</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">align-items</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">justify-content</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span><span class="selector-pseudo">:0px</span> 18<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.04</span>),0<span class="selector-tag">px</span> 6<span class="selector-tag">px</span> 12<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.08</span>);</span></span><br><span class="line"><span class="css">        </span><span class="subst">$&#123;(&#123;showZero,count&#125;</span><span class="css">)=&gt;!<span class="selector-tag">showZero</span> &amp;&amp; <span class="selector-tag">count</span> === 0 &amp;&amp; "<span class="selector-tag">visibility</span><span class="selector-pseudo">:hidden"</span>&#125;</span></span><br><span class="line"><span class="css">    `</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> StyledBadge = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">    display:inline-block;</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;(&#123;variant&#125;</span>)=&gt;variants[variant]&#125;//variant传进来那种情况就渲染对应的样式</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> StyledBadge</span><br></pre></td></tr></table></figure>

<h3 id="不写组件形式访问全局变量"><a href="#不写组件形式访问全局变量" class="headerlink" title="不写组件形式访问全局变量"></a>不写组件形式访问全局变量</h3><p>当写一个需要访问全局变量的东西时，又不想特意创建个styled-components时<br>!!!!注意storybook不能直接写需要配置<br>在.storybook下新建.babelrc文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;plugins&quot;:[&quot;macros&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在要用的页面引入<br><code>import &quot;styled-components/macro&quot;;</code><br>!!!!storybook</p>
<p>之后这么写就行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Menu = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div css=&#123;<span class="string">`</span></span><br><span class="line"><span class="string">            background-color:<span class="subst">$&#123;(&#123; theme &#125;</span>) =&gt; theme.darkPurple&#125;;</span></span><br><span class="line"><span class="string">            width:100px;</span></span><br><span class="line"><span class="string">            `</span>&#125;&gt;</span><br><span class="line">            &lt;MenuItem showBadge active icon=&#123;faCommentDots&#125;&gt;&lt;<span class="regexp">/MenuItem&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useTheme&#125; <span class="keyword">from</span> <span class="string">"styled-components"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Search</span>(<span class="params">&#123; placeholder = <span class="string">"请输入搜索内容..."</span>, ...rest &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> theme = useTheme()<span class="comment">//使用导出的全局属性</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;Input pefix=&#123;&lt;Icon color=&#123;theme.gray3&#125; &gt;&lt;<span class="regexp">/Icon&gt;&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Input&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="as"><a href="#as" class="headerlink" title="as"></a>as</h3><p>类似vue中的tag</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StyledParagraph</span> <span class="attr">as</span>=<span class="string">"p"</span> <span class="attr">ellipsis</span>=<span class="string">&#123;ellipsis&#125;</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span><br><span class="line">    &#123;children&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">StyledParagraph</span>&gt;</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> StyledParagraph = styled(StyledText)<span class="string">`//是自己定义的组件的最外层组件名</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;(&#123;ellipsis&#125;</span>)=&gt;</span></span><br><span class="line"><span class="string">        ellipsis&amp;&amp;</span></span><br><span class="line"><span class="string">        css`</span></span><br><span class="line">            text-overflow:ellipsis;</span><br><span class="line">            white-space:nowrap;</span><br><span class="line">            overflow:hidden</span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure>

<h3 id="一个组件中定义另一个组件样式"><a href="#一个组件中定义另一个组件样式" class="headerlink" title="一个组件中定义另一个组件样式"></a>一个组件中定义另一个组件样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">const StyledNavBar = styled.nav`</span><br><span class="line">    <span class="selector-tag">display</span><span class="selector-pseudo">:grid</span>;</span><br><span class="line">    <span class="selector-tag">grid-template-rows</span><span class="selector-pseudo">:1fr</span> 4<span class="selector-tag">fr</span>;</span><br><span class="line">    <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span><br><span class="line">    <span class="selector-tag">height</span><span class="selector-pseudo">:100vh</span>;</span><br><span class="line">    background-color:$&#123;(&#123;theme&#125;)=&gt;theme.darkPurple&#125;;</span><br><span class="line">    <span class="selector-tag">padding</span><span class="selector-pseudo">:30px</span> 0;</span><br><span class="line">	//注意这里是Styled-components的组件名，不是整体的组件名</span><br><span class="line">    $&#123;StyledAvatar&#125;&#123;</span><br><span class="line">        <span class="selector-tag">justify-self</span><span class="selector-pseudo">:center</span>;</span><br><span class="line">        $&#123;StatusIcon&#125;&#123;</span><br><span class="line">            &amp;<span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">                background-color:$&#123;(&#123;theme&#125;)=&gt; theme.darkPurple&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">`;</span><br></pre></td></tr></table></figure>
<h3 id="直接填属性"><a href="#直接填属性" class="headerlink" title="直接填属性"></a>直接填属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这样可以直接给组件传值了，省得去页面里往组件中传了</span></span><br><span class="line"><span class="keyword">const</span> Time = styled(Text).attrs(&#123;<span class="attr">size</span>:<span class="string">"medium"</span>,<span class="attr">type</span>:<span class="string">"secondary"</span>&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React Storybook</title>
    <url>/2020/07/24/React-Storybook/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>npx -p @storybook/cli sb init</code><br>自动下载并安装一些需要的文件<br>安装成功后就会出现</p>
<p><img src="/images/pasted-94.png" alt="upload successful"><br>这些文件夹</p>
<p><img src="/images/pasted-96.png" alt="upload successful"></p>
<p><img src="/images/pasted-97.png" alt="upload successful"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>npm run storybook</code><br>可以启动服务</p>
<p><img src="/images/pasted-98.png" alt="upload successful"></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>Storybook是独立于react的，所以之前的Styled-components也要给Storybook加载一次<br>去.storybook文件夹下新建个preview.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> &#123; addDecorator &#125; <span class="keyword">from</span> <span class="string">"@storybook/react"</span></span><br><span class="line"><span class="keyword">import</span> &#123;ThemeProvider&#125; <span class="keyword">from</span> <span class="string">"styled-components"</span></span><br><span class="line"><span class="keyword">import</span> theme <span class="keyword">from</span> <span class="string">"../src/theme"</span></span><br><span class="line">addDecorator(<span class="function"><span class="params">storyFn</span> =&gt;</span> (</span><br><span class="line">    &lt;ThemeProvider theme=&#123;theme&#125;&gt;</span><br><span class="line">        &#123;storyFn()&#125;</span><br><span class="line">    &lt;<span class="regexp">/ThemeProvider&gt;</span></span><br><span class="line"><span class="regexp">))</span></span><br></pre></td></tr></table></figure>

<h3 id="加入组件"><a href="#加入组件" class="headerlink" title="加入组件"></a>加入组件</h3><p>在某一个组件的文件夹中新建个如avatar.stories.js的文件，一定要以.stories.js结尾，storybook会自动找这个结尾的文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> Avatar <span class="keyword">from</span> <span class="string">"."</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    title:<span class="string">"Avatar"</span>,</span><br><span class="line">    component : Avatar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Default=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Avatar</span>&gt;</span><span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>在title里按这种格式写，就会自动根据文件名建文件夹<br><img src="/images/pasted-103.png" alt="upload successful"></p>
<p><img src="/images/pasted-104.png" alt="upload successful"><br>但是这样不太好看<br>可以去preview中加一些代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; addDecorator , addParameters &#125; <span class="keyword">from</span> <span class="string">"@storybook/react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ThemeProvider &#125; <span class="keyword">from</span> <span class="string">"styled-components"</span>;</span><br><span class="line"><span class="keyword">import</span> theme <span class="keyword">from</span> <span class="string">"../src/theme"</span>;</span><br><span class="line"></span><br><span class="line">addDecorator(<span class="function">(<span class="params">storyFn</span>) =&gt;</span> (</span><br><span class="line">    &lt;ThemeProvider theme=&#123;theme&#125;&gt;&#123;storyFn()&#125;&lt;<span class="regexp">/ThemeProvider&gt;</span></span><br><span class="line"><span class="regexp">));</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">addParameters(&#123;</span></span><br><span class="line"><span class="regexp">    options:&#123;</span></span><br><span class="line"><span class="regexp">        showRoots:true</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-105.png" alt="upload successful"><br>这样分区就清晰多了</p>
<p><img src="/images/pasted-106.png" alt="upload successful"></p>
<h3 id="整体padding"><a href="#整体padding" class="headerlink" title="整体padding"></a>整体padding</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    title: &quot;UI 组件&#x2F;ChatBubble&quot;,</span><br><span class="line">    component: ChatBubble,</span><br><span class="line">    decorators:[storyFn&#x3D;&gt;&lt;div style&#x3D;&#123;&#123;padding:&#39;24px&#39;&#125;&#125;&gt;&#123;storyFn()&#125;&lt;&#x2F;div&gt;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-107.png" alt="upload successful"></p>
<p><img src="/images/pasted-108.png" alt="upload successful"><br>这样就有留白了</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React state 生命周期初体验</title>
    <url>/2020/06/18/React-state-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="comment">//初始化</span></span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="comment">//把this指向改成props</span></span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="comment">//类似vue中的data，react里是state,初始化数据</span></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      time : <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;<span class="keyword">this</span>.state.time&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//生命周期,组件渲染完成时的函数</span></span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">//this.state.time = new Date().toLocaleTimeString()错误的</span></span><br><span class="line">      <span class="comment">//常规操作，类似小程序</span></span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        time :<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Clock /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">"#root"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React 生命周期</title>
    <url>/2020/06/25/React-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComLife</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      msg : <span class="string">"Hello  World"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"constructor构造函数"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//开始渲染</span></span><br><span class="line">  componentWillMount()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"componentWillMount组件将要渲染"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//渲染完毕</span></span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"componentDidMount组件渲染完毕"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//接收新的数据</span></span><br><span class="line">  componentWillReceiveProps()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"componentWillReceiveProps组件将要接收新的state和props"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//组件将要更新</span></span><br><span class="line">  componentWillUpdate()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"componentWillUpdate组件将要更新"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//组件更新完成</span></span><br><span class="line">  componentDidUpdate()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"componentDidUpdate组件更新完成"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//移除</span></span><br><span class="line">  componentWillUnmount()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"componentWillUnmount移除"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"render渲染函数"</span>)</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;<span class="keyword">this</span>.state.msg&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;this.changeMsg&#125;&gt;组件更新&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  changeMsg = ()=&gt;&#123;</span></span><br><span class="line"><span class="regexp">    this.setState(&#123;</span></span><br><span class="line"><span class="regexp">      msg : "滚"</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;ComLife /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">"#root"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<p><img src="/images/pasted-27.png" alt="upload successful"></p>
<p><img src="/images/pasted-28.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React 初始化</title>
    <url>/2020/06/15/React-%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<h2 id="全局安装React脚手架"><a href="#全局安装React脚手架" class="headerlink" title="全局安装React脚手架"></a>全局安装React脚手架</h2><p><code>cnpm i -g create-react-app</code></p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><code>create-react-app 名字</code><br>如<code>create-react-app demo1</code></p>
<h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p><code>npm start</code></p>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p><code>rfcp</code></p>
<p><img src="/images/pasted-109.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>Hygen 模板生成器</title>
    <url>/2020/07/24/Hygen-%E6%A8%A1%E6%9D%BF%E7%94%9F%E6%88%90%E5%99%A8/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>npm i -g hygen</code></p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在项目中初始化<br><code>hygen init self</code><br>这样根目录中就多了一个</p>
<p><img src="/images/pasted-99.png" alt="upload successful"></p>
<p>这时可以新建个叫component的模板生成器，专门生成需要的模板代码<br>可以用这个命令<code>hygen generator new component</code></p>
<p><img src="/images/pasted-100.png" alt="upload successful"></p>
<h3 id="开始定义模板"><a href="#开始定义模板" class="headerlink" title="开始定义模板"></a>开始定义模板</h3><p>先把new下面自带的文件删了<br>自己新建个index.ejs.t<br>我截图这里写错了是&lt;%= name %&gt;不是&lt;% name %&gt;,to:后面一定要加空格<br><img src="/images/pasted-101.png" alt="upload successful"></p>
<p><img src="/images/pasted-102.png" alt="upload successful"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">to: src&#x2F;components&#x2F;&lt;%&#x3D; name %&gt;&#x2F;&lt;%&#x3D; h.changeCase.lcFirst(name) %&gt;.stories.js</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>index的完整代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">to: src&#x2F;components&#x2F;&lt;%&#x3D; name %&gt;&#x2F;index.js</span><br><span class="line">---</span><br><span class="line">&#x2F;&#x2F;下面就是对应页的通用内容，把变量名换成&lt;%&#x3D; name %&gt;就好了</span><br><span class="line">import React from &#39;react&#39;</span><br><span class="line">import PropTypes from &#39;prop-types&#39;</span><br><span class="line">import Styled&lt;%&#x3D; name %&gt; from &#39;.&#x2F;style&#39;</span><br><span class="line">function &lt;%&#x3D; name %&gt;(&#123;children,...rest &#125;) &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Styled&lt;%&#x3D; name %&gt; &#123;...rest&#125;&gt;</span><br><span class="line">            &#123;children&#125;</span><br><span class="line">        &lt;&#x2F;Styled&lt;%&#x3D; name %&gt;&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;%&#x3D; name %&gt;.propTypes &#x3D; &#123;</span><br><span class="line">    children:PropTypes.any</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &lt;%&#x3D; name %&gt;</span><br></pre></td></tr></table></figure>

<h3 id="开始创建"><a href="#开始创建" class="headerlink" title="开始创建"></a>开始创建</h3><p><code>hygen 文件夹路径 要生成的文件名</code><br>如：<code>hygen component new Icon</code></p>
]]></content>
      <categories>
        <category>Hygen</category>
      </categories>
      <tags>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>React插槽</title>
    <url>/2020/06/26/React%E6%8F%92%E6%A7%BD/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插槽</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentCom</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="built_in">console</span>.log(props)</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;组件插槽&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &#123;this.props.children&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;ParentCom&gt;</span><br><span class="line">    &lt;h2&gt;我是插进来的内容h2&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h3&gt;我是插进来的内容h3&lt;/</span>h3&gt;</span><br><span class="line">    &lt;h4&gt;我是插进来的内容h4&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>ParentCom&gt;,</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">"#root"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<p><img src="/images/pasted-29.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React propTypes</title>
    <url>/2020/07/24/React-propTypes/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Avatar.propTypes = &#123;</span><br><span class="line">    src:PropTypes.string.isRequired,<span class="comment">//字符串，必填</span></span><br><span class="line">    size:PropTypes.string,<span class="comment">//字符串</span></span><br><span class="line">    count:PropTypes.number,<span class="comment">//数字</span></span><br><span class="line">    showZero:PropTypes.bool,<span class="comment">//布尔</span></span><br><span class="line">    status:PropTypes.oneOf([<span class="string">"online"</span>,<span class="string">"offline"</span>]),<span class="comment">//可选值为数组</span></span><br><span class="line">    icon:PropTypes.elementType,<span class="comment">//是个react组件</span></span><br><span class="line">    width:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),<span class="comment">//可以是数组或者字符串</span></span><br><span class="line">    offset:PropTypes.shape(&#123;<span class="attr">x</span>:PropTypes.string,<span class="attr">y</span>:PropTypes.string&#125;),<span class="comment">//对象的可选范围</span></span><br><span class="line">    onHide:PropTypes.func,<span class="comment">//方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React Spring</title>
    <url>/2020/07/29/React-String/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>npm i react-spring</code></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>useTrail（有多个需要执行动画的组件）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useTrail ,animated &#125; <span class="keyword">from</span> <span class="string">'react-spring'</span>;</span><br><span class="line">    <span class="keyword">const</span> animate = useTrail(<span class="number">6</span>, &#123;</span><br><span class="line">        transform: <span class="string">"translate3d(0,0,0)"</span>,</span><br><span class="line">        <span class="keyword">from</span>: &#123; <span class="attr">transform</span>: <span class="string">"translate3d(-50px,0,0)"</span> &#125;,</span><br><span class="line">        config: &#123;</span><br><span class="line">            mass: <span class="number">0.8</span>,</span><br><span class="line">            tension: <span class="number">280</span>,</span><br><span class="line">            friction: <span class="number">20</span></span><br><span class="line">        &#125;,</span><br><span class="line">        delay: <span class="number">200</span>,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-110.png" alt="upload successful"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ChatList</span>&gt;</span></span><br><span class="line">    &#123;[1, 2, 3, 4, 5, 6].map((el, index) =&gt; (</span><br><span class="line">  //要包裹一个animated.div标签 style就是上面返回的数组的索引</span><br><span class="line">        <span class="tag">&lt;<span class="name">animated.div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">style</span>=<span class="string">&#123;animate[index]&#125;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MessageCard</span></span></span><br><span class="line"><span class="tag">                <span class="attr">key</span>=<span class="string">&#123;index&#125;</span></span></span><br><span class="line"><span class="tag">            &gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">MessageCard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">animated.div</span>&gt;</span></span><br><span class="line">    ))&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ChatList</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>useSpring(单个动画)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSpring, animated &#125; <span class="keyword">from</span> <span class="string">'react-spring'</span>;</span><br><span class="line">    <span class="keyword">const</span> tBarAnimeProps = useSpring(&#123;</span><br><span class="line">        opacity:<span class="number">1</span>,</span><br><span class="line">        transform:<span class="string">"translate3d(0,0,0)"</span>,</span><br><span class="line">        <span class="keyword">from</span>:&#123;<span class="attr">opacity</span>:<span class="number">0</span>,<span class="attr">transform</span>:<span class="string">'translate3d(0,-50px,0)'</span>&#125;,</span><br><span class="line">        delay:<span class="number">500</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<p> html中使用同上但是如果不想包animated.div了，可以同styled-components<br> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> &#123; animated &#125; <span class="keyword">from</span> <span class="string">'react-spring'</span>;</span><br><span class="line"><span class="keyword">const</span> StyledTitleBar = styled(animated.div)<span class="string">`</span></span><br><span class="line"><span class="string">    display:grid;</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><br>useTransition(多个动画按顺序执行)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一个参数location是要监听的对象，第二个参数是每个需要过渡的组件的key，第三个参数是具体的效果</span></span><br><span class="line">(form初始位置,enter过渡的目标位置，leave离开时的位置)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> location = useLocation()</span><br><span class="line">    <span class="keyword">const</span> transitions = useTransition(location,(location)=&gt;location.pathname.split(<span class="string">"/"</span>)[<span class="number">1</span>],&#123;</span><br><span class="line">        form:&#123;<span class="attr">opacity</span>:<span class="number">0</span>,<span class="attr">transform</span>:<span class="string">'translate3d(-100px,0,0)'</span>&#125;,</span><br><span class="line">        enter:&#123;<span class="attr">opacity</span>:<span class="number">1</span>,<span class="attr">transform</span>:<span class="string">'translate3d(0px,0,0)'</span>&#125;,</span><br><span class="line">        leave:&#123;<span class="attr">opacity</span>:<span class="number">0</span>,<span class="attr">transform</span>:<span class="string">'translate3d(-100px,0,1)'</span>&#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//返回值transitions是个数组</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//item是每个循环内容，props是动画，key就是key</span><br><span class="line">            <span class="tag">&lt;<span class="name">Sidebar</span>&gt;</span></span><br><span class="line">                &#123;transitions.map((&#123; item, props, key &#125;) =&gt; (</span><br><span class="line">                    <span class="tag">&lt;<span class="name">animated.div</span> <span class="attr">key</span>=<span class="string">&#123;key&#125;</span> <span class="attr">style</span>=<span class="string">&#123;props&#125;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Switch</span> <span class="attr">location</span>=<span class="string">&#123;item&#125;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">MessageList</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">"/contacts"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">ContactList</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">"/files"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">FileList</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">"/notes"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">NoteList</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/settings"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">EditProfile</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">animated.div</span>&gt;</span></span><br><span class="line">                ))&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">Sidebar</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="抽离动画"><a href="#抽离动画" class="headerlink" title="抽离动画"></a>抽离动画</h3><p>当很多页面都是用的这一种动画效果时，可以把他抽离成一个自定义hooks<br>新建个如useStaggeredList.js的文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useTrail &#125; <span class="keyword">from</span> <span class="string">'react-spring'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">useStaggeredList</span>(<span class="params">number</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> animate = useTrail(number, &#123;</span><br><span class="line">        transform: <span class="string">"translate3d(0,0,0)"</span>,</span><br><span class="line">        <span class="keyword">from</span>: &#123; <span class="attr">transform</span>: <span class="string">"translate3d(-50px,0,0)"</span> &#125;,</span><br><span class="line">        config: &#123;</span><br><span class="line">            mass: <span class="number">0.8</span>,</span><br><span class="line">            tension: <span class="number">280</span>,</span><br><span class="line">            friction: <span class="number">20</span></span><br><span class="line">        &#125;,</span><br><span class="line">        delay: <span class="number">200</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> animate</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用的页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const animate &#x3D; useStaggeredList(6)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Redux</title>
    <url>/2020/06/26/Redux/</url>
    <content><![CDATA[<p><img src="/images/pasted-32.png" alt="upload successful"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i redux --save</span><br></pre></td></tr></table></figure>

<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Redux,&#123;createStore&#125; from &quot;redux&quot; &#x2F;&#x2F;将创作仓库的createStore方法解构出来</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认值num=0</span></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function"><span class="keyword">function</span> (<span class="params">state = &#123; num: <span class="number">0</span> &#125;, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"add"</span>:</span><br><span class="line">            state.num++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"dec"</span>:</span><br><span class="line">            state.num--</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最好返回一个全新的数据，可以先解构再创建</span></span><br><span class="line">    <span class="keyword">return</span> &#123; ...state &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构建仓库，之后丢一个函数进去</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br><span class="line"><span class="built_in">console</span>.log(store)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//通过仓库的方法dispatch进行修改数据</span></span><br><span class="line">    store.dispatch(&#123; <span class="attr">type</span>: <span class="string">"add"</span> &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(store.getState().num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dec</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    store.dispatch(&#123; <span class="attr">type</span>: <span class="string">"dec"</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数式计数器</span></span><br><span class="line"><span class="keyword">const</span> Counter = <span class="function"><span class="keyword">function</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            <span class="comment">//从仓库中获取数据</span></span><br><span class="line">            &lt;h1&gt;计数数量：&#123;store.getState().num&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;dec&#125;&gt;-&lt;/</span>button&gt;</span><br><span class="line">            &lt;button onClick=&#123;add&#125;&gt;+&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Counter&gt;&lt;<span class="regexp">/Counter&gt;,</span></span><br><span class="line"><span class="regexp">    document.querySelector("#root")</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/store的监听数据的变化，重新渲染</span></span><br><span class="line"><span class="regexp">store.subscribe(()=&gt;&#123;</span></span><br><span class="line"><span class="regexp">    ReactDOM.render(</span></span><br><span class="line"><span class="regexp">        &lt;Counter&gt;&lt;/</span>Counter&gt;,</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">"#root"</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React路由</title>
    <url>/2020/06/26/React%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h3 id="1-先安装路由（本身不自带）"><a href="#1-先安装路由（本身不自带）" class="headerlink" title="1.先安装路由（本身不自带）"></a>1.先安装路由（本身不自带）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm i react-router-dom --save</span><br></pre></td></tr></table></figure>

<h3 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2.基本使用"></a>2.基本使用</h3><p>先引入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;BrowserRouter本名，改成Router名</span><br><span class="line">import &#123;BrowserRouter as Router,Link,Route&#125; from &quot;react-router-dom&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;home&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Me</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;me&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(props)</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;New&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterApp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">let</span> meObj = &#123;</span><br><span class="line">      pathname:<span class="string">'/me'</span>,<span class="comment">//跳转的路径</span></span><br><span class="line">      search:<span class="string">"?name=abc"</span>,<span class="comment">//get请求的参数</span></span><br><span class="line">      hash:<span class="string">"#abc"</span>,<span class="comment">//设置的hash指，锚值</span></span><br><span class="line">      state:&#123; <span class="comment">//传入的数据</span></span><br><span class="line">        msg:<span class="string">"yes"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">      <span class="comment">//整体用Router包起来</span></span><br><span class="line">      <span class="comment">//basename 相当于子路由所有的路由都在/admin下</span></span><br><span class="line">        &lt;Router  basename=<span class="string">"/admin"</span>&gt;</span><br><span class="line">          &lt;div className=<span class="string">"nav"</span>&gt;</span><br><span class="line">          	<span class="comment">//点击的Link</span></span><br><span class="line">            &lt;Link to=<span class="string">"/"</span>&gt;home&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/可以传入个对象，hash和参数会自动拼接 replace直接替换路由，没有返回上一页</span></span><br><span class="line"><span class="regexp">            &lt;Link to=&#123;meObj&#125; replace&gt;me&lt;/</span>Link&gt;</span><br><span class="line">            <span class="comment">//动态路由</span></span><br><span class="line">            &lt;Link to=<span class="string">"/new/123"</span>&gt;<span class="keyword">new</span>&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>div&gt;</span><br><span class="line">          <span class="comment">//要渲染的组件  exact是严格匹配一般给/的path加上 component是要渲染的组件</span></span><br><span class="line">          &lt;Route path=<span class="string">"/"</span> exact component=&#123;Home&#125;&gt;&lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Route path="/m</span>e<span class="string">" component=&#123;Me&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          //动态路由</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/<span class="keyword">new</span>/:id<span class="string">" component=&#123;New&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">        &lt;/Router&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">ReactDOM.render(</span></span><br><span class="line"><span class="string">  &lt;RouterApp&gt;&lt;/RouterApp&gt;,</span></span><br><span class="line">  document.querySelector("#root")</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-30.png" alt="upload successful"></p>
<p><img src="/images/pasted-31.png" alt="upload successful"></p>
<h3 id="高级路由"><a href="#高级路由" class="headerlink" title="高级路由"></a>高级路由</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Redirect重定向用到的,Switch路由指匹配第一个</span><br><span class="line">import &#123;BrowserRouter as Router,Link,Route,Redirect,Switch&#125; from &quot;react-router-dom&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoginInfo</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(props)</span><br><span class="line">  <span class="keyword">if</span>(props.location.state.loginState === <span class="string">"success"</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">"/admin"</span>&gt;</span><span class="tag">&lt;/<span class="name">Redirect</span>&gt;</span></span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span><span class="tag">&lt;/<span class="name">Redirect</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> FormCom = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pathObj = &#123;</span><br><span class="line">    pathname : <span class="string">'/loginInfo'</span>,</span><br><span class="line">    state:&#123;</span><br><span class="line">      loginState:<span class="string">"success"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;表单&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Link to=&#123;pathObj&#125;&gt;登录&lt;/</span>Link&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">class AppRouter extends React.Component&#123;</span></span><br><span class="line"><span class="regexp">  render()&#123;</span></span><br><span class="line"><span class="regexp">    return(</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Router&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Route path="/</span><span class="string">" exact component=&#123;()=&gt;(&lt;h1&gt;首页&lt;/h1&gt;)&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/form<span class="string">" exact component=&#123;FormCom&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/login<span class="string">" exact component=&#123;()=&gt;(&lt;h1&gt;登录&lt;/h1&gt;)&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/loginInfo<span class="string">" exact component=&#123;LoginInfo&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">        &lt;/Router&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">ReactDOM.render(</span></span><br><span class="line"><span class="string">  &lt;AppRouter&gt;&lt;/AppRouter&gt;,</span></span><br><span class="line">  document.querySelector("#root")</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Switch路由指匹配第一个</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppRouter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Router&gt;</span><br><span class="line">          &lt;Switch&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/"</span> exact component=&#123;()=&gt;(<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)&#125;&gt;&lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Route path="/</span>form<span class="string">" exact component=&#123;FormCom&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/login<span class="string">" exact component=&#123;()=&gt;(&lt;h1&gt;登录&lt;/h1&gt;)&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/loginInfo<span class="string">" exact component=&#123;LoginInfo&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/abc<span class="string">" exact component=&#123;()=&gt;(&lt;h1&gt;abc1&lt;/h1&gt;)&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/abc<span class="string">" exact component=&#123;()=&gt;(&lt;h1&gt;abc323&lt;/h1&gt;)&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/abc<span class="string">" exact component=&#123;()=&gt;(&lt;h1&gt;abc&lt;/h1&gt;)&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/abc<span class="string">" exact component=&#123;()=&gt;(&lt;h1&gt;abc123&lt;/h1&gt;)&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">        &lt;/Router&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="js控制路由跳转"><a href="#js控制路由跳转" class="headerlink" title="js控制路由跳转"></a>js控制路由跳转</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abc</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.toHmoe&#125;&gt;去首页&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  toHmoe = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props)</span><br><span class="line">    <span class="keyword">this</span>.props.history.push(<span class="string">"/"</span>)</span><br><span class="line">    <span class="comment">//this.props.history.go(-1) 后退</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React父传子数据传递</title>
    <url>/2020/06/21/React%E7%88%B6%E4%BC%A0%E5%AD%90%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fdom</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      isActive: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//改变change事件的this指向</span></span><br><span class="line">    <span class="keyword">this</span>.change = <span class="keyword">this</span>.change.bind(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  change()&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      isActive : !<span class="keyword">this</span>.state.isActive</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.change&#125;&gt;控制子元素显示&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Cdom isActive=&#123;this.state.isActive&#125; /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">class Cdom extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  constructor(props) &#123;</span></span><br><span class="line"><span class="regexp">    super(props)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    let el = null;</span></span><br><span class="line"><span class="regexp">    el = this.props.isActive ? 'active' : ''</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div className=&#123;"none "+el&#125;&gt;</span></span><br><span class="line"><span class="regexp">        子元素</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Fdom /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">"#root"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>animation动画</title>
    <url>/2020/05/24/animation%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background</span>:red;</span><br><span class="line"><span class="attribute">position</span>:relative;</span><br><span class="line"><span class="attribute">animation</span>:mymove <span class="number">5s</span> infinite;</span><br><span class="line"><span class="attribute">-moz-animation</span>:mymove <span class="number">5s</span> infinite; <span class="comment">/* Firefox */</span></span><br><span class="line"><span class="attribute">-webkit-animation</span>:mymove <span class="number">5s</span> infinite; <span class="comment">/* Safari and Chrome */</span></span><br><span class="line"><span class="attribute">-o-animation</span>:mymove <span class="number">5s</span> infinite; <span class="comment">/* Opera */</span></span><br><span class="line">animation-fill-mode:forwards;//动画结束后使用</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> mymove</span><br><span class="line">&#123;</span><br><span class="line">0%   &#123;<span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">25%  &#123;<span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">75%  &#123;<span class="attribute">top</span>:<span class="number">50px</span>&#125;</span><br><span class="line">100% &#123;<span class="attribute">top</span>:<span class="number">100px</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-moz-keyframes</span> mymove /* Firefox */</span><br><span class="line">&#123;</span><br><span class="line">0%   &#123;<span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">25%  &#123;<span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">75%  &#123;<span class="attribute">top</span>:<span class="number">50px</span>&#125;</span><br><span class="line">100% &#123;<span class="attribute">top</span>:<span class="number">100px</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> mymove /* Safari <span class="keyword">and</span> Chrome */</span><br><span class="line">&#123;</span><br><span class="line">0%   &#123;<span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">25%  &#123;<span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">75%  &#123;<span class="attribute">top</span>:<span class="number">50px</span>&#125;</span><br><span class="line">100% &#123;<span class="attribute">top</span>:<span class="number">100px</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-o-keyframes</span> mymove /* Opera */</span><br><span class="line">&#123;</span><br><span class="line">0%   &#123;<span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">25%  &#123;<span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">75%  &#123;<span class="attribute">top</span>:<span class="number">50px</span>&#125;</span><br><span class="line">100% &#123;<span class="attribute">top</span>:<span class="number">100px</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>animation-name    规定需要绑定到选择器的 keyframe 名称。。<br>animation-duration    规定完成动画所花费的时间，以秒或毫秒计。</p>
<p>animation-timing-function    规定动画的速度曲线。<br>取值：linear    动画从头到尾的速度是相同的。    测试<br>        ease    默认。动画以低速开始，然后加快，在结束前变慢。    测试<br>        ease-in    动画以低速开始。    测试<br>        ease-out    动画以低速结束。    测试<br>        ease-in-out    动画以低速开始和结束。    测试<br>        cubic-bezier(n,n,n,n)    在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</p>
<p>animation-delay    规定在动画开始之前的延迟。<br>animation-iteration-count    规定动画应该播放的次数。<br>animation-direction    规定是否应该轮流反向播放动画。<br>animation-fill-mode:forwards 动画结束后应用</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>element后台</title>
    <url>/2020/05/24/element%E5%90%8E%E5%8F%B0/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue-element-admin</span><br></pre></td></tr></table></figure>
<p>element写好的后台</p>
]]></content>
      <categories>
        <category>element</category>
      </categories>
      <tags>
        <tag>element</tag>
      </tags>
  </entry>
  <entry>
    <title>element安装</title>
    <url>/2020/05/24/element%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>安装element</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue add element  &#x2F;&#x2F;cli3</span><br></pre></td></tr></table></figure>
<p>之后选择<br>  y/n/1<br>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S  &#x2F;&#x2F;cli2</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>element</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>element</tag>
      </tags>
  </entry>
  <entry>
    <title>express-generator的使用</title>
    <url>/2020/05/24/express-generator%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>1.全局安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install express-generator -g</span><br></pre></td></tr></table></figure>
<p>2.创建项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">express --view&#x3D;ejs 名字</span><br></pre></td></tr></table></figure>
<p>例: express –view=ejs server<br>之后按提示走<br>默认端口3000</p>
<p>3.routes=&gt;index.js里</p>
<p>注意：本地最好不用localhost要用ip<br>查看ip<br>cmd  之后输入  ipconfig</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">'/api/list'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>node</tag>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>express允许跨域</title>
    <url>/2020/05/24/express%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<p>app.js里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">   res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">   res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"X-Requested-With"</span>);</span><br><span class="line">   res.header(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</span><br><span class="line">   res.header(<span class="string">"X-Powered-By"</span>,<span class="string">' 3.2.1'</span>);</span><br><span class="line">   res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">   next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>node</tag>
        <tag>express</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>express处理history 404中间件</title>
    <url>/2020/08/12/express%E5%A4%84%E7%90%86history-404%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<p>下载<code>npm install --save connect-history-api-fallback</code>这是个处理这个问题的中间件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> history = <span class="built_in">require</span>(<span class="string">'connect-history-api-fallback'</span>)</span><br><span class="line">app.use(<span class="string">'/'</span>, history(),express.static(__dirname+<span class="string">"/web"</span>));</span><br></pre></td></tr></table></figure>
<p>app.use(history()); 这一句应该放在 所有后台调用接口之后，否则会造成所有接口无法调用</p>
<p><img src="/images/pasted-266.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>axios拦截器</title>
    <url>/2020/05/24/axios%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"./router"</span></span><br><span class="line"><span class="keyword">const</span> http = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">"http://localhost:3000/admin/api"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<p>//加header</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">http.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (localStorage.token) &#123;</span><br><span class="line">        <span class="comment">//加Bearer是因为规范</span></span><br><span class="line">        config.headers.Authorization = <span class="string">"Bearer "</span> + (localStorage.token || <span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>//拦截全部请求错误</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">http.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">   调用了饿了么的message方法</span><br><span class="line">    <span class="keyword">if</span> (err.response.data.message) &#123;</span><br><span class="line">        Vue.prototype.$message(&#123;</span><br><span class="line">            type: <span class="string">"error"</span>,</span><br><span class="line">            message: err.response.data.message</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span>(err.response.status === <span class="number">401</span>)&#123;</span><br><span class="line">            router.push(<span class="string">"/login"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>导出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>axios</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>fortawesome全家桶</title>
    <url>/2020/07/25/fortawesome%E5%85%A8%E5%AE%B6%E6%A1%B6/</url>
    <content><![CDATA[<p><code>npm i @fortawesome/react-fontawesome @fortawesome/fontawesome-svg-core @fortawesome/free-brands-svg-icons @fortawesome/free-regular-svg-icons @fortawesome/free-solid-svg-icons</code></p>
<p>react中使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; FontAwesomeIcon &#125; from &quot;@fortawesome&#x2F;react-fontawesome&quot;</span><br><span class="line">import &#123; faCommentDots, faFolder, faAddressBook &#125; from &quot;@fortawesome&#x2F;free-solid-svg-icons&quot;</span><br><span class="line">export const FortAwesome &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    return &lt;FontAwesomeIcon icon&#x3D;&#123;faCommentDots&#125;&gt;&lt;&#x2F;FontAwesomeIcon&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>git全局配置</title>
    <url>/2020/05/25/git%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="git全局配置"><a href="#git全局配置" class="headerlink" title="git全局配置"></a>git全局配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config -l  &#x2F;&#x2F;查看配置信息  ！是L小写</span><br><span class="line">$ git config --globla -l  &#x2F;&#x2F;查看全局配置信息</span><br></pre></td></tr></table></figure>

<p>如果没有用户名和邮箱<br><img src="/images/pasted-1.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git工作原理</title>
    <url>/2020/05/25/git%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p><img src="/images/pasted-4.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>express连接mysql数据库</title>
    <url>/2020/05/24/express%E8%BF%9E%E6%8E%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>1.安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure>
<p>2.新建db文件夹=&gt;新建sql.js文件<br><a href="https://github.com/mysqljs/mysql" target="_blank" rel="noopener">https://github.com/mysqljs/mysql</a> //给的官方例子</p>
<p>sql.js里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host     : <span class="string">'localhost'</span>,</span><br><span class="line">  user     : <span class="string">'root'</span>,</span><br><span class="line">  password : <span class="string">'root'</span>,</span><br><span class="line">  database : <span class="string">'demo1'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports=connection</span><br><span class="line"></span><br><span class="line">server=&gt;<span class="function"><span class="params">router</span>=&gt;</span>index.js</span><br><span class="line"><span class="keyword">var</span> connection = <span class="built_in">require</span>(<span class="string">"../../db/sql.js"</span>)</span><br><span class="line">router.get(<span class="string">'/api/list'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  connection.query(<span class="string">'SELECT * from dome'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">    res.json(results)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>express</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>grid</title>
    <url>/2020/07/26/grid/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    display:grid;//声明grid布局</span><br><span class="line">    grid-template-rows:1fr 4fr;//比如里面有两行,第一行占1份，第二行占4份</span><br><span class="line">    <span class="selector-tag">div</span>&#123;</span><br><span class="line">        justify-self:center;//这个元素左右居中</span><br><span class="line">    &#125;</span><br><span class="line">     grid-template-areas://代表3*3并且取名</span><br><span class="line">    "<span class="selector-tag">avatar</span> <span class="selector-tag">name</span> <span class="selector-tag">time</span>"</span><br><span class="line">    "<span class="selector-tag">avatar</span> <span class="selector-tag">status</span> <span class="selector-tag">status</span>"</span><br><span class="line">    "<span class="selector-tag">message</span> <span class="selector-tag">message</span> <span class="selector-tag">message</span>"</span><br><span class="line">    ;</span><br><span class="line">    <span class="selector-tag">p</span>&#123;</span><br><span class="line">        grid-area:avatar;//把上面取的名给它</span><br><span class="line">    &#125;</span><br><span class="line">     grid-template-columns:64px 1fr 1fr //定义列的宽度第一列是64其他占1份</span><br><span class="line">     row-gap:16px;//行间距</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>git查看文件状态</title>
    <url>/2020/05/26/git%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-2.png" alt="upload successful"><br>红色文件表示文件在工作区，还没到暂存区<br>绿色文件表示文件在暂存区，还没到历史区<br>看不见代表所有修改的信息都提交到历史区</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo常用命令</title>
    <url>/2020/05/31/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><img src="/images/pasted-10.png" alt="upload successful"><br><code>hexo g//本地打包</code></p>
<p><code>hexo clean//清缓存</code></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>jq平滑锚点过渡</title>
    <url>/2020/05/24/jq%E5%B9%B3%E6%BB%91%E9%94%9A%E7%82%B9%E8%BF%87%E6%B8%A1/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'.aaa'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'html, body'</span>).animate(&#123;</span><br><span class="line">        scrollTop: $($.attr(<span class="keyword">this</span>, <span class="string">'href'</span>)).offset().top</span><br><span class="line">    &#125;, <span class="number">800</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>jq</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>jq</tag>
      </tags>
  </entry>
  <entry>
    <title>React子传父数据</title>
    <url>/2020/06/21/React%E5%AD%90%E4%BC%A0%E7%88%B6%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fdom</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      data:<span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;子给父传的数据:&#123;<span class="keyword">this</span>.state.data&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/将传值方法给子组件传过去</span></span><br><span class="line"><span class="regexp">        &lt;Cdom setChildData=&#123;this.setChildData&#125; /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/构建子给父传值的方法</span></span><br><span class="line"><span class="regexp">  setChildData=(msg)=&gt;&#123;</span></span><br><span class="line"><span class="regexp">    this.setState(&#123;</span></span><br><span class="line"><span class="regexp">      data : msg</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">class Cdom extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  constructor(props) &#123;</span></span><br><span class="line"><span class="regexp">    super(props)</span></span><br><span class="line"><span class="regexp">    this.state = &#123;</span></span><br><span class="line"><span class="regexp">      msg :'hello'</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    this.zouni = this.zouni.bind(this)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  zouni()&#123;</span></span><br><span class="line"><span class="regexp">    console.log(this)</span></span><br><span class="line"><span class="regexp">    this.props.setChildData(this.state.msg)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;this.zouni&#125;&gt;走你&lt;/</span>button&gt;</span><br><span class="line">        &lt;button onClick=&#123;()=&gt;&#123;</span><br><span class="line">          <span class="keyword">this</span>.props.setChildData(<span class="string">"走你2"</span>)</span><br><span class="line">        &#125;&#125;&gt;走你<span class="number">2</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Fdom /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">"#root"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>el-table</title>
    <url>/2020/05/24/el-table/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">"items"</span>&gt;</span> //要遍历的数组</span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"_id"</span> <span class="attr">label</span>=<span class="string">"ID"</span> <span class="attr">width</span>=<span class="string">"230"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span> //prop是值</span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"title"</span> <span class="attr">label</span>=<span class="string">"标题"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">fixed</span>=<span class="string">"right"</span> <span class="attr">label</span>=<span class="string">"操作"</span> <span class="attr">width</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">    //slot-scope="scope" 当前目标的内容存到scope里</span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">size</span>=<span class="string">"small"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"$router.push(`/articles/edit/$&#123;scope.row._id&#125;`)"</span></span></span><br><span class="line"><span class="tag">      &gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"small"</span> @<span class="attr">click</span>=<span class="string">"remove(scope.row)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>element</category>
      </categories>
      <tags>
        <tag>element</tag>
      </tags>
  </entry>
  <entry>
    <title>keywords</title>
    <url>/2020/05/24/keywords/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;keywords&quot; content&#x3D;&quot;&quot;&gt;</span><br><span class="line"> &lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;&quot;&gt;</span><br><span class="line">     document</span><br><span class="line">       .querySelector(&#39;meta[name&#x3D;&quot;keywords&quot;]&#39;)</span><br><span class="line">       .setAttribute(&quot;content&quot;, &quot;key&quot;);</span><br><span class="line">     document</span><br><span class="line">       .querySelector(&#39;meta[name&#x3D;&quot;description&quot;]&#39;)</span><br><span class="line">       .setAttribute(&quot;content&quot;, &quot;des&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>git本地仓库提交到远程仓库</title>
    <url>/2020/05/28/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%8F%90%E4%BA%A4%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>1.查看本地仓库与那些仓库链接呢</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure>
<p>2.让本地仓库与远程仓库新建一个链接  //origin是随便起的链接名(可以改，不过一般都用这个)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https:&#x2F;&#x2F;github.com&#x2F;XXXX   &#x2F;&#x2F;github上的远程地址</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-6.png" alt="upload successful"></p>
<p>3.取消链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote rm origin</span><br></pre></td></tr></table></figure>

<h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>1.提交前最好先拉取  //都是在交互历史区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull origin master  &#x2F;&#x2F;master是分支</span><br></pre></td></tr></table></figure>
<p>2.将本地代码提交到github（需要输入github的用户名和密码）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-7.png" alt="upload successful"></p>
<h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone github地址 别名&#x2F;&#x2F;可以不设置默认是仓库名</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-8.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>mongo基本用法</title>
    <url>/2020/05/24/mongo%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>数据库(database)  集合(collection)  数据/文档(document)</p>
<p>查看数据库<br>语法：<code>show databases</code></p>
<p>选择数据库<br>语法: <code>use 数据库名</code></p>
<p>删除数据库<br>1.<code>use 数据库名</code>  先选择目标数据库<br>2.<code>db.dropDatabase()</code>  删除数据库</p>
<p>查看集合<br>语法 <code>show collections</code></p>
<p>创建集合<code>db.createCollection(&quot;集合名&quot;)</code></p>
<p>删除集合<code>db.集合名.drop()</code></p>
<p><strong>*****</strong>增<br>语法: db.集合名.insert(JSON数据)<br>如：<code>db.c1.insert({name:&quot;xiaoming&quot;})</code><br>查看集合具体内容<code>db.c1.find()</code></p>
<p>一次插入多条数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.c1.insert([</span><br><span class="line">    &#123;</span><br><span class="line">        name:&quot;aaa&quot;,</span><br><span class="line">        age:5</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:&quot;bbb&quot;,</span><br><span class="line">        age:6</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<p>一次插入10条(mongoDB底层是js支持部分js语法)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(var i &#x3D; 0; i &lt; 10;i++)&#123;</span><br><span class="line">    db.c1.insert(&#123;name:&quot;a&quot;+1,age:i&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>*****</strong>查<br>语法：<code>db.集合名.find({条件},{查询的列})</code>   []里的内容为可选内容<br>条件 如果不写或者{}代表查询所有数据<br>     查询age=6的   {age:6}  db.c1.find({age:6})<br>查询的列（可选）<br>     不写则查全部字段<br>     {age:1} 只显示age列<br>     {age:0} 除了age列<br>     db.c1.find({age:18},{age:1})  //查询age为18，只显示age的列<br>运算符时<br> <code>db.c1.find({键:{运算符:值}})</code><br><code>db.c1.find({age:{$in:[5,18]}})</code>获取年龄为5和18岁的数据<br> 运算符有<br> $gt  大于<br> $gte 大于等于<br> $lt  小于<br> $lte 小于等于<br> $ne  不等于<br> $in  in<br> $nin not in</p>
<p> <code>db.c1.find({键:{运算符:值}}).pretty()</code>pretty()格式化数据用的，看着方便</p>
<p> <strong>*****</strong>改<br> 语法: db.集合名.update(条件,新数据,是否新增,是否修改多条)<br> 是否新增(可选)：指条件匹配不到则插入数据true是插入这条数据，false是不插入  默认是不插入<br> 是否修改多条(可选)：将匹配到的数据都修改true是，默认false<br> 升级语法<br> 修改器<br> $inc    递增<br> $rename 重命名列<br> $set    修改列值<br> $unset  删除列<br> db.集合名.update(条件,{修改器:{键:值}})<br> 如 <code>db.c1.update({name:&quot;bbb&quot;},{$set:{name:&quot;ddd&quot;}})</code><br> 加2岁<code>db.c1.update({name:&quot;ddd&quot;},{$inc:{age:2}})</code><br> 减<code>db.c1.update({name:&quot;ddd&quot;},{$inc:{age:-2}})</code><br>综合使用<code>db.c1.update({name:&quot;aaa&quot;},{$set:{name:&quot;abc&quot;},$inc:{age:100},$rename:{who:&quot;sex&quot;},$unset:{other:true}})</code></p>
<p> <strong>*****</strong>删<br> 语法：<code>db.集合名.remove(条件,是否删除一条)</code><br> 是否删除一条true是是，默认false不</p>
<p>排序<br>语法:<code>db.集合名.find().sort(JSON)</code><br>如：<code>db.ci.find().sort({age:-1})</code><br>JSON 键是以这个排列 值是 1升序  -1降序</p>
<p>分页<br>Limit和skip<br>语法<code>：db.集合名.find().sort().skip(数字).limit(数字)</code><br>如：<code>db.ci.find().sort({age:-1}).skip(3).limit(3)</code><br>.count  统计总数量<br>skip 跳过值得数量<br>limit 限制的数量</p>
<p>聚合查询<br>语法：<code>db.集合名.aggregate([
    {管道:{表达式}}
])</code><br>如：<code>db.c2.aggregate([
    {
        $group:{
            _id:&quot;$sex&quot;,//以这个分组，null为不用分组
            rs:{$sum:&quot;$age&quot;} //具体内容
            }
        }
    ])</code></p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.c2.aggregate(</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            $group:&#123;</span><br><span class="line">                _id:&quot;$sex&quot;,</span><br><span class="line">                rs:&#123;$sum:&quot;$age&quot;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">db.c2.aggregate(</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            $group:&#123;</span><br><span class="line">                _id:&quot;$sex&quot;,rs:&#123;$sum:1&#125;</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            ,</span><br><span class="line">            &#123;</span><br><span class="line">                $sort:&#123;rs:-1&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></code></pre><p>！！！这里值是表的键名要加$<br>常用管道<br>$group  将集合中的文档分组，用于统计结果<br>$match  过滤数据，只要输出符合条件的文档<br>$sort   聚合数据进一步排序<br>$skip   跳过直到文档数<br>$limit  限制集合数据返回文档数</p>
<p>常用表达式<br>$sum  综合   $sum:1同count表示总数<br>$avg  平均<br>$max  最大值<br>$min  最小值</p>
<p>索引</p>
<p>创建索引语法:<code>db.集合名.createIndex(待创建索引的列,(可选 额外选项))</code><br>如 <code>db.c1.createIndex({name:1})</code><br>待创建索引的列 {键:1,…,键:-1}<br>1代表升序-1代表降序 {age:1}表示创建age索引并按照升序的方式存储<br>额外选项 ：设置索引的名称或者唯一索引等等</p>
<p>删除索引语法：<br>全部删除：<code>db.集合名.dropIndexes()</code><br>如 db.c1.dropIndex(“name_1”)<br>删除指定：<code>db.集合名.dropIndex(索引名)</code></p>
<p>查看索引语法：<code>db.集合名.getIndexes()</code></p>
<p>创建复合/组合索引:<code>db.集合名.creatIndex({键1:方式,键2:方式})</code></p>
<p>创建唯一索引   //就是唯一不重复<br><code>db.集合名.createIndex(待添加的索引列,{unique:列名})</code> 列名可选</p>
<p>分析索引<code>db.集合名.find(条件).explain(&quot;executionStats&quot;)</code><br>explain(“executionStats”)这个是看这次查询是用了什么方式查了多少次的具体信息</p>
<p>如：先创建索引 <code>db.c1.createIndex({age:1})</code><br>   再使用 <code>db.c1.find({age:18}).explain(&quot;executionStats&quot;)</code></p>
]]></content>
      <categories>
        <category>mongoDB</category>
      </categories>
      <tags>
        <tag>mongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongo刨根问底查法</title>
    <url>/2020/05/24/mongo%E5%88%A8%E6%A0%B9%E9%97%AE%E5%BA%95%E6%9F%A5%E6%B3%95/</url>
    <content><![CDATA[<p>//查找子级<br>见Caregory.js和index.js</p>
<p>见Caregory模型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">schema.virtual(<span class="string">"children"</span>,&#123;</span><br><span class="line">    localField:<span class="string">"_id"</span>,</span><br><span class="line">    foreignField:<span class="string">"parent"</span>,</span><br><span class="line">    justOne:<span class="literal">false</span>,</span><br><span class="line">    ref:<span class="string">"Category"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">schema.virtual(<span class="string">"newList"</span>,&#123;</span><br><span class="line">    localField:<span class="string">"_id"</span>,</span><br><span class="line">    foreignField:<span class="string">"categories"</span>,</span><br><span class="line">    justOne:<span class="literal">false</span>,</span><br><span class="line">    ref:<span class="string">"Article"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>index子路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">"/news/list"</span>,<span class="keyword">async</span> (req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> parent = <span class="keyword">await</span> Category.findOne(&#123;</span><br><span class="line">        name:<span class="string">"新闻分类"</span></span><br><span class="line">    &#125;).populate(&#123;</span><br><span class="line">        path:<span class="string">"children"</span>,</span><br><span class="line">        populate:&#123;</span><br><span class="line">            path:<span class="string">"newList"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).lean()</span><br><span class="line">    res.send(parent)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mongoDB</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>mongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongo将所有模型引入插件</title>
    <url>/2020/05/24/mongo%E5%B0%86%E6%89%80%E6%9C%89%E6%A8%A1%E5%9E%8B%E5%BC%95%E5%85%A5%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>将所有模型东西引用进来<br><code>npm i require-all</code><br>在db里<br><code>require(&quot;require-all&quot;)(__dirname + &#39;/../models&#39;)</code></p>
]]></content>
      <categories>
        <category>mongoDB</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>mongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongo的populate</title>
    <url>/2020/05/24/mongo%E7%9A%84populate/</url>
    <content><![CDATA[<p> <code>populate(&quot;parent&quot;)</code>关联集合使用parent关联谁了把谁找出来<br>复用后populate要改成这样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> queryOptions = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span>(req.Model.modelName===<span class="string">"Category"</span>)&#123;</span><br><span class="line">    queryOptions.populate = <span class="string">"parent"</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">await</span> req.Model.find().setOptions(queryOptions  ).limit(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mongoDB</category>
      </categories>
      <tags>
        <tag>mongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongo备份与还原</title>
    <url>/2020/05/24/mongo%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%98%E5%8E%9F/</url>
    <content><![CDATA[<p>备份数据<br>导出数据语法：<code>mongodump -h -prot -u -p -d -o</code><br>-h host 服务器ip地址（一般不写默认本机）<br>-prot   端口（一般不写默认27017）<br>-u user 账号<br>-p pwd  密码<br>-d database 数据库（不写则导出全部）<br>-o open  备份到指定目录下<br>备份全部数据库     要在bin目录下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongodump -u admin -p yhq990807 -o G:\mongodb-win32-x86_64\mongodb-win32-x86_64-2012plus-4.2.3\bak</span><br></pre></td></tr></table></figure>
<p>备份指定数据库     要在bin目录下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongodump -u admin -p yhq990807 -d admin -o G:\mongodb-win32-x86_64\mongodb-win32-x86_64-2012plus-4.2.3\bak2</span><br></pre></td></tr></table></figure>
<p>user是要备份的数据库的用户</p>
<p>还原/导入数据<br>备份数据目录<code>mongorestore -h -prot -u -p -d --drop</code><br>-d  不写则还原全部数据<br>–drop 先删除数据库再导入，不写则直接覆盖<br>还原全部数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongorestore -u admin -p yhq990807 --drop G:\mongodb-win32-x86_64\mongodb-win32-x86_64-2012plus-4.2.3\bak</span><br></pre></td></tr></table></figure>
<p>还原指定数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongorestore -u admin -p yhq990807 -d test4 --drop G:\mongodb-win32-x86_64\mongodb-win32-x86_64-2012plus-4.2.3\bak2\test4</span><br></pre></td></tr></table></figure>
<p>也是要有权限的用户操作</p>
]]></content>
      <categories>
        <category>mongoDB</category>
      </categories>
      <tags>
        <tag>mongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongo权限</title>
    <url>/2020/05/24/mongo%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<p><strong><em>!权限机制!</em></strong><br>步骤1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongo</span><br><span class="line">use admin</span><br></pre></td></tr></table></figure>

<p>创建账号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.createUser(&#123;</span><br><span class="line">    <span class="string">"user"</span>:<span class="string">"账号"</span>,</span><br><span class="line">    <span class="string">"pwd"</span>:<span class="string">"密码"</span>,</span><br><span class="line">    <span class="string">"roles"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            role:<span class="string">"角色"</span>,</span><br><span class="line">            db:<span class="string">"所属数据库"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    <span class="string">"user"</span>:<span class="string">"admin"</span>,</span><br><span class="line">    <span class="string">"pwd"</span>:<span class="string">"yhq990807"</span>,</span><br><span class="line">    <span class="string">"roles"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            role:<span class="string">"root"</span>,</span><br><span class="line">            db:<span class="string">"admin"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    <span class="string">"user"</span>:<span class="string">"wz"</span>,</span><br><span class="line">    <span class="string">"pwd"</span>:<span class="string">"yhq990807"</span>,</span><br><span class="line">    <span class="string">"roles"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            role:<span class="string">"readWrite"</span>,</span><br><span class="line">            db:<span class="string">"wz"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>步骤2<br>退出卸载服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod --remove  &#x2F;&#x2F;一定要管理员运行</span><br></pre></td></tr></table></figure>

<p>步骤3<br>创建要身份验证的mongoDB服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod --install --dbpath G:\mongodb-win32-x86_64\mongodb-win32-x86_64-2012plus-4.2.3\data --logpath G:\mongodb-win32-x86_64\mongodb-win32-x86_64-2012plus-4.2.3\logs\mongodb2.log --auth</span><br></pre></td></tr></table></figure>
<p> –auth表示需要身份验证</p>
<p>步骤4<br>进入服务<br>mongo后不会警报了<br>通过超级管理员身份账号登录<br>方法1：mongo 服务器IP地址:端口/数据库 -u 用户名 -p 密码<br>    如：<code>mongo 127.0.0.1:27017/admin -u admin -p yhq990807</code><br>方法2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a-先登录  b-选择数据库  c-输入db.auth(用户名,密码)</span><br><span class="line">  mongo     use admin    db.auth(&quot;admin&quot;,&quot;yhq990807&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mongoDB</category>
      </categories>
      <tags>
        <tag>mongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>vs code的配置文件 jsconfig.json</title>
    <url>/2020/07/24/jsconfig-json/</url>
    <content><![CDATA[<p>在项目根目录新建jsconfig.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">!!!!!!!!!!!!!实际用的时候不能有注释，","这东西也不要多写</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"compilerOptions"</span>:&#123;</span><br><span class="line">        <span class="attr">"baseUrl"</span>: <span class="string">"src"</span><span class="comment">//根路径的地址,应用于react导入静态文件时不用../../找了，默认地址就是src了,用的时候直接css/index.css就行了,前面自动拼接src/</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"include"</span>: [<span class="string">"src"</span>],<span class="comment">//告诉vs code 什么是这个项目的源代码，加快提示速度</span></span><br><span class="line">    <span class="attr">"exclude"</span>: [<span class="string">"node_modules"</span>,<span class="string">"**/node_modules/*"</span>]<span class="comment">//告诉vs code 什么不属于这个项目的源代码，可以排除一些文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vs code</category>
      </categories>
      <tags>
        <tag>vs code</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置http访问自动跳转到https</title>
    <url>/2020/08/06/nginx%E9%85%8D%E7%BD%AEhttp%E8%AE%BF%E9%97%AE%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC%E5%88%B0https/</url>
    <content><![CDATA[<p>一、按照如下格式修改nginx.conf 配置文件，80端口会自动转给443端口，这样就强制使用SSL证书加密了。访问http的时候会自动跳转到https上面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name www.域名.com;</span><br><span class="line">rewrite ^(.*) https:&#x2F;&#x2F;$server_name$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">listen 443;</span><br><span class="line">server_name www.域名.com;</span><br><span class="line">root &#x2F;home&#x2F;www;</span><br><span class="line">ssl on;</span><br><span class="line">ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;certs&#x2F;server.crt;</span><br><span class="line">ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;certs&#x2F;server.key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二、修改配置文件后，重启nginx。</p>
]]></content>
  </entry>
  <entry>
    <title>node用cors跨域</title>
    <url>/2020/05/24/node/</url>
    <content><![CDATA[<p><code>cnpm i express@next mongoose cors</code></p>
<p><code>app.use(require(&quot;cors&quot;)())</code>//使用跨域</p>
]]></content>
  </entry>
  <entry>
    <title>node处理上传文件</title>
    <url>/2020/05/24/node%E5%A4%84%E7%90%86%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p> //上传图片<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">"multer"</span>) <span class="comment">//引入</span></span><br><span class="line"><span class="keyword">const</span> upload = multer(&#123;</span><br><span class="line">  dest: __dirname + <span class="string">'/../../upload'</span>  <span class="comment">//要存储的路径地址</span></span><br><span class="line">&#125;)</span><br><span class="line">app.post(<span class="string">'/admin/api/upload'</span>,upload.single(<span class="string">"file"</span>),<span class="keyword">async</span> (req,res)=&gt;&#123;</span><br><span class="line">  <span class="keyword">const</span> file = req.file</span><br><span class="line">  res.send(file)  <span class="comment">//返回结果</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>需要静态文件托管，表示upload下面的文件是静态的<br>  <code>app.use(&#39;/upload&#39;,express.static(__dirname+&#39;/upload&#39;))</code></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>node常用</title>
    <url>/2020/05/24/node%E5%B8%B8%E7%94%A8/</url>
    <content><![CDATA[<p>运行<code>node ----- node index.js</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setImmediate 下一帧</span><br><span class="line">console.log(__filename)&#x2F;&#x2F;当前文件位置</span><br><span class="line">console.log(__dirname)&#x2F;&#x2F;当前文件所在目录</span><br><span class="line">console.log(process)&#x2F;&#x2F;全局变量</span><br><span class="line">console.log(process.argv)&#x2F;&#x2F;能获取执行时后面带的参数 如：node index.js xxxxx</span><br><span class="line">process.stdin.on(&quot;data&quot;,e&#x3D;&gt;&#123; &#x2F;&#x2F;持续运行</span><br><span class="line">    console.log(1)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>npm init 创建npm环境</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>nest</title>
    <url>/2020/07/31/nest/</url>
    <content><![CDATA[<h3 id="注意-：此文章是element-ts后台文章的后端部分，两篇文章有所关联"><a href="#注意-：此文章是element-ts后台文章的后端部分，两篇文章有所关联" class="headerlink" title="注意 ：此文章是element+ts后台文章的后端部分，两篇文章有所关联"></a>注意 ：此文章是element+ts后台文章的后端部分，两篇文章有所关联</h3><h3 id="安装与创建"><a href="#安装与创建" class="headerlink" title="安装与创建"></a>安装与创建</h3><p>先全局安装nest的脚手架<br><code>npm i -g @nestjs/cli</code></p>
<p>创建项目<br><code>nest new 项目名</code><br>如: <code>nest new server</code></p>
<p>进入项目=》启动项目<br><code>cd server</code><br><code>npm run start</code></p>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>之后如果想再创建一个叫admin应用，可以<br><code>nest g app 文件名</code>//创建个app叫XXX<br>如：<code>nest g app admin</code></p>
<p><img src="/images/pasted-116.png" alt="upload successful"><br>可以把这个多出来的server直接改名叫web，用于客户端接口，现在这两个文件内容是一样的</p>
<p>一旦添加子应用了，就不能用以前的方法启动了要用<br><code>nest start -w admin</code><br>这样就能启动admin这个子项目<br><code>nest start -w</code>是默认启动server<br>加上这句，允许跨域<br><img src="/images/pasted-154.png" alt="upload successful"></p>
<p>虽然admin和web是两套接口，但是有公用的部分，可以新建个db公用模块<br><code>nest g lib db</code></p>
<p><img src="/images/pasted-117.png" alt="upload successful"><br>这里问前缀是什么，默认是@app，可以改成 @libs，方便语义化</p>
<p><img src="/images/pasted-118.png" alt="upload successful"><br>现在就创建好了，主要用到db.module.ts这个模块</p>
<p>之后打开，这个文件，将db.module.ts模块导进来<br><img src="/images/pasted-119.png" alt="upload successful"></p>
<p>在imports里打上DbModule会自动将，db那个模块引进来<br><img src="/images/pasted-121.png" alt="upload successful"></p>
<p>准备链接数据库,先下载<br><code>npm i nestjs-typegoose @typegoose/typegoose --save</code><br>顺便下载<code>npm i mongoose @types/mongoose</code>会有代码提示<br>之后去db=》src=》db.module.ts中引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DbService &#125; <span class="keyword">from</span> <span class="string">'./db.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TypegooseModule &#125; <span class="keyword">from</span> <span class="string">"nestjs-typegoose"</span></span><br><span class="line">@Module(&#123;</span><br><span class="line">    imports: [</span><br><span class="line">        TypegooseModule.forRoot(<span class="string">'mongodb://localhost/qzzd'</span>,&#123;</span><br><span class="line">            useNewUrlParser:<span class="literal">true</span>,</span><br><span class="line">            useUnifiedTopology:<span class="literal">true</span>,</span><br><span class="line">            useCreateIndex:<span class="literal">true</span>,</span><br><span class="line">            useFindAndModify:<span class="literal">false</span></span><br><span class="line">        &#125;)<span class="comment">//连接数据库</span></span><br><span class="line">    ],</span><br><span class="line">    providers: [DbService],</span><br><span class="line">    exports: [DbService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DbModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-122.png" alt="upload successful"></p>
<p>在db=》src下新建个models文件夹，新建个user.model.ts</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; prop &#125; <span class="keyword">from</span> <span class="string">"@typegoose/typegoose"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    @prop()<span class="comment">//写属性，修饰符</span></span><br><span class="line">    userName:string</span><br><span class="line"></span><br><span class="line">    @ApiProperty(&#123;<span class="attr">description</span>:<span class="string">"课时"</span>&#125;)</span><br><span class="line">    @ArrayProp(&#123;<span class="attr">ref</span>:<span class="string">"Episode"</span>&#125;)<span class="comment">//数组的修饰方式，括号里是真正关联上的</span></span><br><span class="line">    episodes: Ref&lt;Episode&gt;[]<span class="comment">//ref是参考，参考Episode模型，只是用于提示的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后去db.module.ts中使用<br><img src="/images/pasted-123.png" alt="upload successful"></p>
<p>现在admin里就能直接使用它了，但是不能把所有东西都直接堆里，得新建个模块<br><code>nest g mo -p admin  users</code>因为现在有两个子项目，要告诉它是那个子项目新建，所以加-p admin指定子应用<br>再来个控制器co<code>nest g co -p admin  users</code></p>
<p>举例post接口<br><img src="/images/pasted-254.png" alt="upload successful"><br><img src="/images/pasted-255.png" alt="upload successful"><br><img src="/images/pasted-256.png" alt="upload successful"><br>当要定义某一个请求接收的类型时，又不想特意写个集合时，可以这样<br><img src="/images/pasted-257.png" alt="upload successful"><br>创建用户<br><img src="/images/pasted-258.png" alt="upload successful"></p>
<p>这里有个方便的包，可以快速生成增删改查的接口<br>之后再安装crud<br><code>npm i nestjs-mongoose-crud</code></p>
<p>去刚才创建的users.controller.ts里去注入模型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; InjectModel &#125; <span class="keyword">from</span> <span class="string">'nestjs-typegoose'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; User &#125; <span class="keyword">from</span> <span class="string">'libs/db/src/models/user.model'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Crud&#125; <span class="keyword">from</span> <span class="string">"nestjs-mongoose-crud"</span></span><br><span class="line"></span><br><span class="line">@Crud(&#123;</span><br><span class="line">    model:User<span class="comment">//基于哪个模型</span></span><br><span class="line">&#125;)</span><br><span class="line">@Controller(<span class="string">'users'</span>)<span class="comment">//路由名</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersController</span> </span>&#123;</span><br><span class="line">		<span class="comment">//将这个模型注入到model中</span></span><br><span class="line">    <span class="keyword">constructor</span>(@InjectModel(User) private readonly model)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在会报错，提示缺少@nestjs/swagger，现在进行安装(这个是写接口文档用的)<br><code>npm i @nestjs/swagger swagger-ui-express</code><br>之后去mian.ts中使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">'@nestjs/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">'./app.module'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SwaggerModule, DocumentBuilder &#125; <span class="keyword">from</span> <span class="string">'@nestjs/swagger'</span>;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = <span class="keyword">new</span> DocumentBuilder()</span><br><span class="line">    .setTitle(<span class="string">'Cats example'</span>)<span class="comment">//标题</span></span><br><span class="line">    .setDescription(<span class="string">'The cats API description'</span>)<span class="comment">//描述</span></span><br><span class="line">    .setVersion(<span class="string">'1.0'</span>)<span class="comment">//版本号</span></span><br><span class="line">    .addTag(<span class="string">'cats'</span>)<span class="comment">//标签 可以删了不要</span></span><br><span class="line">    .build();</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">document</span> = SwaggerModule.createDocument(app, options);</span><br><span class="line">  SwaggerModule.setup(<span class="string">'api'</span>, app, <span class="built_in">document</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> app.listen(<span class="number">3000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"http://localhost:3000"</span>)</span><br><span class="line">&#125;</span><br><span class="line">bootstrap();</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-124.png" alt="upload successful"><br>现在打开<a href="http://localhost:3000/api/就能看见接口文档了" target="_blank" rel="noopener">http://localhost:3000/api/就能看见接口文档了</a></p>
<p>如果想关闭如删，改的接口<br><img src="/images/pasted-253.png" alt="upload successful"></p>
<p>但是现在分类不够明确，可以添加<br><img src="/images/pasted-125.png" alt="upload successful"><br>这样api里就清楚了</p>
<p><img src="/images/pasted-126.png" alt="upload successful"></p>
<p>在模型里也可以加上这样的注释,前面是备注，example是默认值<br><img src="/images/pasted-129.png" alt="upload successful"><br><img src="/images/pasted-128.png" alt="upload successful"></p>
<p><img src="/images/pasted-130.png" alt="upload successful"><br>api里就有注释了</p>
<p>两个集合的关联<br><img src="/images/pasted-251.png" alt="upload successful"><br><img src="/images/pasted-252.png" alt="upload successful"></p>
<p>测试一下post数据，就成功了<br><img src="/images/pasted-131.png" alt="upload successful"></p>
<p>但是一般会有创建时间之类的默认值</p>
<p>去模型里class上面加上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@ModelOptions(&#123;</span><br><span class="line">    schemaOptions:&#123;</span><br><span class="line">        timestamps:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-132.png" alt="upload successful"><br>再添加一条时间就有了<br><img src="/images/pasted-133.png" alt="upload successful"></p>
<p>此时目前后端就告一段落，开始去写前端（见element+ts后台）</p>
<h3 id="二级路由-option-（作用见element-ts开发后台的文章）"><a href="#二级路由-option-（作用见element-ts开发后台的文章）" class="headerlink" title="二级路由(option)（作用见element+ts开发后台的文章）"></a>二级路由(option)（作用见element+ts开发后台的文章）</h3><p>在courses.controller.ts里加上个二级路由，用来存放option<br><img src="/images/pasted-178.png" alt="upload successful"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@Get(<span class="string">"option"</span>)</span><br><span class="line">option() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        title:<span class="string">"课程管理"</span>,</span><br><span class="line">        column: [</span><br><span class="line">            &#123; <span class="attr">prop</span>: <span class="string">"name"</span>, <span class="attr">label</span>: <span class="string">"课程名称"</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">prop</span>: <span class="string">"cover"</span>, <span class="attr">label</span>: <span class="string">"课程封面"</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加上用来排序<br><img src="/images/pasted-194.png" alt="upload successful"><br>此项用于前端搜索<br><img src="/images/pasted-198.png" alt="upload successful">、<br>图片上传的配置<br><img src="/images/pasted-203.png" alt="upload successful"><br><img src="/images/pasted-205.png" alt="upload successful"></p>
<h3 id="图片上传upload"><a href="#图片上传upload" class="headerlink" title="图片上传upload"></a>图片上传upload</h3><p>去app.controller.ts里，定义一个upload的路由<br><img src="/images/pasted-208.png" alt="upload successful"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; FileInterceptor &#125; <span class="keyword">from</span> <span class="string">"@nestjs/platform-express"</span></span><br><span class="line">  @Post(<span class="string">'upload'</span>)<span class="comment">//路由地址</span></span><br><span class="line">  @UseInterceptors(FileInterceptor(<span class="string">'file'</span>))<span class="comment">//拦截器,要取的字段名是file</span></span><br><span class="line">  <span class="keyword">async</span> upload(@UploadedFile(<span class="string">'file'</span>) file)&#123;<span class="comment">//取file的装饰器</span></span><br><span class="line">    <span class="keyword">return</span> file</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>现在前端就能拿到一些信息了，但是没有图片地址<br><img src="/images/pasted-209.png" alt="upload successful"><br>因为后端并没有存储文件这一步的操作<br>要去app.module.ts里加个模块<br><img src="/images/pasted-210.png" alt="upload successful"><br>他会自动创建upload文件夹<br>现在前端拿到的file就会多一些东西<br><img src="/images/pasted-211.png" alt="upload successful"><br>接口处根据filename给前端一个url地址<br><img src="/images/pasted-212.png" alt="upload successful"><br>这时地址已经返给前端了，但是前端打不开，是因为没有做静态文件的托管<br>在mian.ts里加<br><img src="/images/pasted-213.png" alt="upload successful"><br>现在前端就好使了<br><img src="/images/pasted-214.png" alt="upload successful"><br>去option里加个width，不然前端的图片看起来太大了<br><img src="/images/pasted-215.png" alt="upload successful"></p>
<h3 id="阿里云oss文件上传"><a href="#阿里云oss文件上传" class="headerlink" title="阿里云oss文件上传"></a>阿里云oss文件上传</h3><p>去找一个支持阿里云的包,下载<br><code>npm install --save multer-aliyun-oss</code><br><a href="https://www.npmjs.com/package/multer-aliyun-oss" target="_blank" rel="noopener">https://www.npmjs.com/package/multer-aliyun-oss</a>  npm官网<br>先把用的东西复制进来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"><span class="keyword">const</span> MAO = <span class="built_in">require</span>(<span class="string">'multer-aliyun-oss'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> upload = multer(&#123;</span><br><span class="line">    storage: MAO(&#123;</span><br><span class="line">        config: &#123;</span><br><span class="line">            region: <span class="string">'&lt;region&gt;'</span>,</span><br><span class="line">            accessKeyId: <span class="string">'&lt;accessKeyId&gt;'</span>,</span><br><span class="line">            accessKeySecret: <span class="string">'&lt;accessKeySecret&gt;'</span>,</span><br><span class="line">            bucket: <span class="string">'&lt;bucket&gt;'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-216.png" alt="upload successful"><br>之后配置具体内容<br>登录阿里云注册个oss<br><img src="/images/pasted-217.png" alt="upload successful"><br>之后创建，选红框的<br><img src="/images/pasted-218.png" alt="upload successful"><br>改代码配置<br><img src="/images/pasted-219.png" alt="upload successful"><br><img src="/images/pasted-221.png" alt="upload successful"><br>剩下两个点右上角图像<br><img src="/images/pasted-222.png" alt="upload successful"><br><img src="/images/pasted-223.png" alt="upload successful"><br>就有剩下两项了<br><img src="/images/pasted-224.png" alt="upload successful"><br>之后要添加权限<br><img src="/images/pasted-226.png" alt="upload successful"><br>给他完全的oss管理权限<br><img src="/images/pasted-227.png" alt="upload successful"><br>配置好后要重启<br><img src="/images/pasted-225.png" alt="upload successful"><br>之后直接返回file里面包含了url<br><img src="/images/pasted-229.png" alt="upload successful"><br>现在就完成了，前端拿到的也是oss的地址了<br><img src="/images/pasted-228.png" alt="upload successful"><br>之前建的本地放图片的upload文件夹也可以删了</p>
<p>如果本身是https了，加上这句，图片也会变成https<br><img src="/images/pasted-265.png" alt="upload successful"></p>
<h3 id="散列密码"><a href="#散列密码" class="headerlink" title="散列密码"></a>散列密码</h3><p>首先要用到bcrypt包<br><code>npm i bcryptjs --save</code><br>由于现在是nest基于ts开发没有js的代码提示,可以再下一个这个插件用于提示<br><code>npm i -D @types/bcryptjs</code><br>使用<br><img src="/images/pasted-259.png" alt="upload successful"><br>现在就被散列了<br><img src="/images/pasted-260.png" alt="upload successful"><br>当我们不希望密码被查出来时，加上这个，在常规查询时就不会被查出来了<br><img src="/images/pasted-261.png" alt="upload successful"></p>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>用到了passport,下载包<br><code>npm i @nestjs/passport passport passport-local passport-jwt</code><br>再下个在nest中的代码提示<br><code>npm i -D @types/passport @types/passport-jwt @types/passport-local</code></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>nest</tag>
      </tags>
  </entry>
  <entry>
    <title>node热重启</title>
    <url>/2020/05/24/node%E7%83%AD%E9%87%8D%E5%90%AF/</url>
    <content><![CDATA[<p><code>npm i -g nodemon</code></p>
<p>之后每次启动语法是 nodemon index.js</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>node生产token插件</title>
    <url>/2020/05/24/node%E7%94%9F%E4%BA%A7token%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>token插件<br><code>npm i jsonwebtoken</code><br>全局index.js里<br>       名        值<br><code>app.set(&quot;secret&quot;,&quot;666666666&quot;)</code></p>
<p>子路由里<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const jwt&#x3D; require(&quot;jsonwebtoken&quot;)</span><br><span class="line">const token &#x3D; jwt.sign(&#123;id:user._id&#125;,app.get(&quot;secret&quot;))</span><br><span class="line">res.send(&#123;token&#125;)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>node简单抛出异常插件</title>
    <url>/2020/05/24/node%E7%AE%80%E5%8D%95%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p><code>npm i http-assert</code>一个简单抛出异常的插件</p>
<p> 使用<br> 引入后<br> <code>assert(user,422,&quot;用户不存在&quot;)</code>不太好用</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>npm常用命令</title>
    <url>/2020/05/31/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><img src="/images/pasted-9.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>node转换大小写插件</title>
    <url>/2020/05/24/node%E8%BD%AC%E6%8D%A2%E5%A4%A7%E5%B0%8F%E5%86%99%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p> <code>cnpm i inflection</code>转换类名的东西比如：大小写，单复数<br><code>const modelName = require(&quot;inflection&quot;).classify(req.params.resource)</code><br><code>const Category = require(`../../models/${modelName}`)</code><br> 这个操作是把小写复数的改成大写单数的</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>png图片投影</title>
    <url>/2020/05/24/png%E5%9B%BE%E7%89%87%E6%8A%95%E5%BD%B1/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">fliter</span>: <span class="selector-tag">drop-shadow</span>(0 0 5<span class="selector-tag">px</span> <span class="selector-id">#cccccc</span>);</span><br><span class="line"><span class="selector-tag">-webkit-filter</span>: <span class="selector-tag">drop-shadow</span>(0 0 5<span class="selector-tag">px</span> <span class="selector-id">#cccccc</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>token过期</title>
    <url>/2020/08/22/token%E8%BF%87%E6%9C%9F/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 全局变量 和 设置 、配置等。。。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span> <span class="comment">// 引入axios</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> Storage <span class="keyword">from</span> <span class="string">'@/assets/js/util/storage.js'</span> <span class="comment">// storage工具类，简单的封装</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 请求拦截器 */</span></span><br><span class="line"> </span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123; <span class="comment">// 每次请求时会从localStorage中获取token</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> token = Storage.localGet(<span class="string">'token'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">    </span><br><span class="line">        token = <span class="string">'bearer'</span> + <span class="string">' '</span> + token.replace(<span class="regexp">/'|"/g</span>, <span class="string">''</span>) <span class="comment">// 把token加入到默认请求参数中</span></span><br><span class="line"> </span><br><span class="line">        config.headers.common[<span class="string">'Authorization'</span>] = token</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line"> </span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 响应拦截器 */</span></span><br><span class="line"> </span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123; <span class="comment">// ①10010 token过期（30天） ②10011 token无效</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (response.data.code === <span class="number">10010</span> || response.data.code === <span class="number">10011</span>) &#123;</span><br><span class="line"> </span><br><span class="line">    Storage.localRemove(<span class="string">'token'</span>) <span class="comment">// 删除已经失效或过期的token（不删除也可以，因为登录后覆盖）</span></span><br><span class="line"> </span><br><span class="line">    router.replace(&#123;</span><br><span class="line"> </span><br><span class="line">        path: <span class="string">'/login'</span> <span class="comment">// 到登录页重新获取token</span></span><br><span class="line"> </span><br><span class="line">    &#125;)</span><br><span class="line"> </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.data.token) &#123; <span class="comment">// 判断token是否存在，如果存在说明需要更新token</span></span><br><span class="line"> </span><br><span class="line">    Storage.localSet(<span class="string">'token'</span>, response.data.token) <span class="comment">// 覆盖原来的token(默认一天刷新一次)</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"> </span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>axios</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>swiper配置</title>
    <url>/2020/05/24/swiper%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   slidesPerColumnFill : <span class="string">'row'</span> <span class="comment">//表格swiper横着排</span></span><br><span class="line">    centeredSlides: <span class="literal">true</span> <span class="comment">//选中居中</span></span><br><span class="line">    breakpoints: &#123;</span><br><span class="line">      <span class="number">767</span>: &#123;</span><br><span class="line">        slidesPerView: <span class="number">2</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解决tab bug</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">observer:<span class="literal">true</span>,<span class="comment">//修改swiper自己或子元素时，自动初始化swiper</span></span><br><span class="line"> 	observeParents:<span class="literal">true</span>,</span><br><span class="line"> 	loopFillGroupWithBlank: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>swiper</tag>
      </tags>
  </entry>
  <entry>
    <title>ts基础</title>
    <url>/2020/05/24/ts%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>ts运行环境<br>全局安装 <code>npm install typescript -g</code><br>编译<code>tsc 01.ts</code></p>
<p>简化 类似预览ts<br><code>npm install ts-node -g</code><br>之后用 <code>ts-node 01.ts</code> 就可以不编译预览</p>
<p>创建项目<br><code>1.npm init -y //创建package.json</code><br><code>2.tsc --init</code>//生成配置文件<br><code>3.npm install typescript -D  //当前目录安装ts</code></p>
<p>监视这个ts<br>先 tsc –init<br>比如可以改成这样</p>
<p><img src="/images/pasted-90.png" alt="upload successful"><br>之后vs code左上角终端-》运行任务-》typescript-》选择要监听的ts</p>
]]></content>
      <categories>
        <category>ts</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>scss 样式穿透</title>
    <url>/2020/05/24/scss-%E6%A0%B7%E5%BC%8F%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<p>解决swiper样式修改与scoped冲突的问题</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.case</span> <span class="selector-pseudo">::v-deep</span> <span class="selector-class">.swiper-pagination-bullet</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>uni app rpx转px</title>
    <url>/2020/05/24/uni-app-rpx%E8%BD%ACpx/</url>
    <content><![CDATA[<p>rpx转px算高度<br>    <code>this.swiperHeight=res.windowHeight - uni.upx2px(80)</code></p>
]]></content>
      <categories>
        <category>uni app</category>
      </categories>
      <tags>
        <tag>uni app</tag>
      </tags>
  </entry>
  <entry>
    <title>uni app获取dom节点</title>
    <url>/2020/05/24/uni-app%E8%8E%B7%E5%8F%96dom%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onReady() &#123;</span><br><span class="line">	<span class="keyword">let</span> view = uni.createSelectorQuery().select(<span class="string">".home_data"</span>);</span><br><span class="line">	view.boundingClientRect(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(data)</span><br><span class="line">	&#125;).exec();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uni app</category>
      </categories>
      <tags>
        <tag>uni app</tag>
      </tags>
  </entry>
  <entry>
    <title>node散列密码</title>
    <url>/2020/05/24/node%E6%95%A3%E5%88%97%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p><code>npm i bcrypt</code>下载插件</p>
<p>模型里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const schema &#x3D; new mongoose.Schema(&#123;</span><br><span class="line">    name:&#123;type:String&#125;,</span><br><span class="line">    pwd:&#123;</span><br><span class="line">        type:String,</span><br><span class="line">        select:false,&#x2F;&#x2F;不会被查出来</span><br><span class="line">        &#x2F;&#x2F;怎么保存这个数据</span><br><span class="line">        set(val)&#123;</span><br><span class="line">                       			异步    值   加密程度10-12</span><br><span class="line">            return require(&quot;bcrypt&quot;).hashSync(val,10)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>  <code>const user =await adminUser.findOne({name}).select(&quot;+password&quot;)</code>查询时强制获取password</p>
<p> 校验密码<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const isValid &#x3D; require(&quot;bcrypt&quot;).compareSync(pwd, user.pwd)</span><br><span class="line">if (!isValid) &#123;</span><br><span class="line">  return res.status(422).send(&#123;</span><br><span class="line">    message: &quot;密码错误&quot;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>mongoDB</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>mongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>uni app 获取视口高</title>
    <url>/2020/05/24/uni-app-%E8%8E%B7%E5%8F%96%E8%A7%86%E5%8F%A3%E9%AB%98/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uni.getSystemInfo(&#123;</span><br><span class="line">	success: (res) &#x3D;&gt; &#123;</span><br><span class="line">		this.swiperHeight &#x3D; res.windowHeight - uni.upx2px(80) - this.getSwiperHeight()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uni app</category>
      </categories>
      <tags>
        <tag>uni app</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app接口封装</title>
    <url>/2020/06/06/uni-app%E6%8E%A5%E5%8F%A3%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"../../store/index.js"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	common: &#123;</span><br><span class="line">		baseUrl: <span class="string">'http://192.168.1.11:3000/api'</span>,</span><br><span class="line">		data: &#123;&#125;,</span><br><span class="line">		header: &#123;</span><br><span class="line">			<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">			<span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">		method: <span class="string">"GET"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	request(options = &#123;&#125;) &#123;</span><br><span class="line">		<span class="comment">// uni.showLoading(&#123;</span></span><br><span class="line">		<span class="comment">//     title: '加载中'</span></span><br><span class="line">		<span class="comment">// &#125;);</span></span><br><span class="line">		</span><br><span class="line">		options.url = <span class="keyword">this</span>.common.baseUrl + options.url;</span><br><span class="line">		options.data = options.data || <span class="keyword">this</span>.common.data;</span><br><span class="line">		options.header = options.header || <span class="keyword">this</span>.common.header;</span><br><span class="line">		options.method = options.method || <span class="keyword">this</span>.common.method;</span><br><span class="line">		<span class="comment">// 判断是否有token</span></span><br><span class="line">		<span class="keyword">if</span>(options.header.token)&#123;</span><br><span class="line">			options.header.token = store.state.user.token</span><br><span class="line">			<span class="keyword">if</span>(!options.header.token)&#123;</span><br><span class="line">				uni.showToast(&#123;</span><br><span class="line">					title:<span class="string">"请先登录"</span>,</span><br><span class="line">					icon:<span class="string">"none"</span></span><br><span class="line">				&#125;)</span><br><span class="line">				uni.navigateTo(&#123;</span><br><span class="line">					url:<span class="string">"/pages/login/login"</span></span><br><span class="line">				&#125;)</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">			uni.request(&#123;</span><br><span class="line">				...options,</span><br><span class="line">				success: <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> (result.statusCode != <span class="number">200</span>) &#123;</span><br><span class="line">						<span class="keyword">return</span> rej()</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="comment">// setTimeout(function () &#123;</span></span><br><span class="line">					<span class="comment">//     uni.hideLoading();</span></span><br><span class="line">					<span class="comment">// &#125;, 1000);</span></span><br><span class="line">					<span class="keyword">let</span> data = result.data.data</span><br><span class="line">					res(data)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uni app</category>
      </categories>
      <tags>
        <tag>uni app</tag>
      </tags>
  </entry>
  <entry>
    <title>useContext</title>
    <url>/2020/06/29/useContext/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState , createContext , useContext &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">const</span> CountContext = createContext()<span class="comment">//构建上下文组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = useContext(CountContext) <span class="comment">//传入共享组件的名、</span></span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;count&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">function Example2() &#123;</span></span><br><span class="line"><span class="regexp">    const [count, setCount] = useState(0)</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;p&gt;click &#123;count&#125;&lt;/</span>p&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; &#123; setCount(count + <span class="number">1</span>) &#125;&#125;&gt;click&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;CountContext.Provider value=&#123;count&#125;&gt;&#123;/</span>* value 里放的是要传递的数据 *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">                &lt;Child&gt;&lt;/</span>Child&gt;</span><br><span class="line">            &lt;<span class="regexp">/CountContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Example2</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>useRef获取dom</title>
    <url>/2020/07/01/useRef/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;useRef&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="comment">//用useRef获取dom</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example8</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> inputEl = useRef()</span><br><span class="line">    <span class="keyword">const</span> showInput = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(inputEl)<span class="comment">//获取input的dom元素</span></span><br><span class="line">        inputEl.current.value = <span class="string">'hellow'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;input ref=&#123;inputEl&#125; type=<span class="string">"text"</span> /&gt;</span><br><span class="line">            &lt;button onClick=&#123;showInput&#125;&gt;展示&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Example8</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>vue history 路由打包问题</title>
    <url>/2020/07/24/vue-history-%E8%B7%AF%E7%94%B1%E6%89%93%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">    mode:&quot;history&quot;,&#x2F;&#x2F;启用history模式</span><br><span class="line">    base: process.env.BASE_URL,&#x2F;&#x2F;如果不是根地址要加上这个</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>express后端搭建流程</title>
    <url>/2020/07/09/node%E5%90%8E%E7%AB%AF%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>先建个如server的文件夹，之后<code>npm init -y</code>先初始化一下项目<br>新建个index.js</p>
<p>之后去package.json里配置一下热更新<code>&quot;serve&quot;: &quot;nodemon index.js&quot;,</code><br>这样就可以像启动vue一样<code>npm run serve</code>来启动服务器了</p>
<p><img src="/images/pasted-40.png" alt="upload successful"><br>如果没有nodemon需要先全局安装一下</p>
<h3 id="写服务端接口的准备工作"><a href="#写服务端接口的准备工作" class="headerlink" title="写服务端接口的准备工作"></a>写服务端接口的准备工作</h3><p>先把常用的插件先下来下如：npm i express@next mongoose cors 等</p>
<p>之后在index.js里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"http://localhost:3000"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>之后新建个如routes的文件夹开始写路由</p>
<p><img src="/images/pasted-41.png" alt="upload successful"></p>
<p>routes/admin/index</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>)</span><br><span class="line">    <span class="keyword">const</span> router = express.Router()<span class="comment">//用到了子路由</span></span><br><span class="line">    router.post(<span class="string">"/categories"</span>,<span class="keyword">async</span> (req,res)=&gt;&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">    app.use(<span class="string">"/admin/api"</span>,router)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里接收个参数app需要在index.js里传过来<br><code>require(&quot;./routes/admin/index&quot;)(app)</code></p>
<p><img src="/images/pasted-42.png" alt="upload successful"></p>
<h3 id="开始连接mongo数据库"><a href="#开始连接mongo数据库" class="headerlink" title="开始连接mongo数据库"></a>开始连接mongo数据库</h3><p>建议新建个如plugins的文件夹,之后建个db.js的文件，用来连接数据库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)<span class="comment">//引用mongoose</span></span><br><span class="line">    <span class="comment">//连接数据库 127.0.0.1:27017 是默认地址   bsdz是数据库名</span></span><br><span class="line">    mongoose.connect(<span class="string">'mongodb://127.0.0.1:27017/bsdz'</span>,&#123;</span><br><span class="line">        useNewUrlParser : <span class="literal">true</span>,</span><br><span class="line">        useUnifiedTopology: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时服务端的文件结构是这样的</p>
<p><img src="/images/pasted-43.png" alt="upload successful"></p>
<p>之后在index.js里引用一下db.js，把app传进去（和routes一样）<br><code>require(&quot;./plugins/db&quot;)(app)</code></p>
<h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><p>新建个models的文件夹用来存放模型<br>新建个模型文件如：Category.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)<span class="comment">//引入mongo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//每一个schema就是一个文件，整个模型是一个集合</span></span><br><span class="line"><span class="keyword">const</span> schema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    <span class="comment">//开始定义需要的字段 name是key ,type是类型</span></span><br><span class="line">    name:&#123;</span><br><span class="line">        type:<span class="built_in">String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">"Category"</span>,schema)</span><br></pre></td></tr></table></figure>
<p>去index.js里去使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>)</span><br><span class="line">    <span class="keyword">const</span> router = express.Router()<span class="comment">//用到了子路由</span></span><br><span class="line">    <span class="keyword">const</span> Category = <span class="built_in">require</span>(<span class="string">"../../models/Category"</span>)<span class="comment">//引入模型</span></span><br><span class="line">    router.post(<span class="string">"/categories"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> Category.create(req.body)<span class="comment">//将传进来的内容创建到集合中</span></span><br><span class="line">        res.send(model)<span class="comment">//发送到客户端</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.use(<span class="string">"/admin/api"</span>, router)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时需要去index.js里写个处理数据的中间件,顺便把cors跨域模块也引进来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.use(require(&quot;cors&quot;)())&#x2F;&#x2F;跨域模块</span><br><span class="line">app.use(express.json())&#x2F;&#x2F;处理req.body</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-44.png" alt="upload successful"></p>
<p>前端写个axios试试好不好使</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> save() &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.axios.post(<span class="string">"categories"</span>, <span class="keyword">this</span>.model);</span><br><span class="line">  <span class="keyword">if</span> (res.data) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$router.push(<span class="string">"/categories/list"</span>);</span><br><span class="line">    <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">      type: <span class="string">"success"</span>,</span><br><span class="line">      message: <span class="string">"保存成功"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果这里报错了，有可能是mongodb设置权限了，需要给用户添加权限</p>
<p>这样新建分类的接口就写好了，<br>之后同理写个分类列表的接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">"/categories"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> items = <span class="keyword">await</span> Category.find().limit(<span class="number">10</span>)<span class="comment">//查找所有数据，限制10条</span></span><br><span class="line">    res.send(items)<span class="comment">//发送到客户端</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="在后台编辑分类"><a href="#在后台编辑分类" class="headerlink" title="在后台编辑分类"></a>在后台编辑分类</h3><p>先定义一个点击事件，点击时跳转到分类的详情页</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">size</span>=<span class="string">"small"</span></span></span><br><span class="line"><span class="tag"> @<span class="attr">click</span>=<span class="string">"$router.push(`/categories/edit/$&#123;scope.row._id&#125;`)"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-45.png" alt="upload successful"></p>
<p>之后去路由里解耦</p>
<p><img src="/images/pasted-46.png" alt="upload successful"><br>这样详情页就可以直接props:[id]拿到传过来的id了</p>
<p>拿到id后就可以请求详情页的数据了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    <span class="keyword">async</span> fetch()&#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.axios.get(<span class="string">`/categories/<span class="subst">$&#123;<span class="keyword">this</span>.id&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">this</span>.model = res.data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">created()&#123;</span><br><span class="line">    <span class="comment">//有id才会执行fetch</span></span><br><span class="line">    <span class="keyword">this</span>.id &amp;&amp; <span class="keyword">this</span>.fetch()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 但是这时候后端详情的接口还没有，就需要去后端写详情接口了</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//详情接口</span></span><br><span class="line">router.get(<span class="string">"/categories/:id"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> model = <span class="keyword">await</span> Category.findById(req.params.id)<span class="comment">//通关id找</span></span><br><span class="line">    res.send(model)<span class="comment">//发送到客户端</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<p> 后台保存时需要判断是新建还是编辑，走不同的接口<br> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">async</span> save() &#123;</span><br><span class="line">  <span class="keyword">let</span> res;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.id) &#123;</span><br><span class="line">  	<span class="comment">//如果有id就是编辑走put</span></span><br><span class="line">    res = <span class="keyword">await</span> <span class="keyword">this</span>.axios.put(<span class="string">`categories/<span class="subst">$&#123;<span class="keyword">this</span>.id&#125;</span>`</span>, <span class="keyword">this</span>.model);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//没有就算新建走post</span></span><br><span class="line">    res = <span class="keyword">await</span> <span class="keyword">this</span>.axios.post(<span class="string">"categories"</span>, <span class="keyword">this</span>.model);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (res.data) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$router.push(<span class="string">"/categories/list"</span>);</span><br><span class="line">    <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">      type: <span class="string">"success"</span>,</span><br><span class="line">      message: <span class="string">"保存成功"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p> 之后去后端定义编辑的put接口<br> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编辑接口</span></span><br><span class="line">router.put(<span class="string">"/categories/:id"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> model = <span class="keyword">await</span> Category.findByIdAndUpdate(req.params.id,req.body)<span class="comment">//通过id找之后更新,两个参数第一个是要找的id，第二个就是要更新的数据</span></span><br><span class="line">    res.send(model)<span class="comment">//发送到客户端</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="删除分类"><a href="#删除分类" class="headerlink" title="删除分类"></a>删除分类</h3><p> 先定义一个删除事件<br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">size</span>=<span class="string">"small"</span></span></span><br><span class="line"><span class="tag"> @<span class="attr">click</span>=<span class="string">"remove(scope.row)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><br>参数是这整个一行的数据scope.row</p>
<p>定义删除方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> remove(row) &#123;</span><br><span class="line"><span class="comment">//element的提示框组件</span></span><br><span class="line">  <span class="keyword">this</span>.$confirm(</span><br><span class="line">    <span class="string">`此操作将永久删除<span class="subst">$&#123;row.name&#125;</span>这个分类的数据, 是否继续?`</span>,</span><br><span class="line">    <span class="string">"注意"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      confirmButtonText: <span class="string">"确定"</span>,</span><br><span class="line">      cancelButtonText: <span class="string">"取消"</span>,</span><br><span class="line">      type: <span class="string">"warning"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ).then(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.axios.delete(<span class="string">`categories/<span class="subst">$&#123;row._id&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">this</span>.fetch();</span><br><span class="line">    <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">      type: <span class="string">"success"</span>,</span><br><span class="line">      message: <span class="string">"删除成功!"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>去后端写删除的接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除接口</span></span><br><span class="line">router.delete(<span class="string">"/categories/:id"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> model = <span class="keyword">await</span> Category.findByIdAndDelete(req.params.id)<span class="comment">//通过id找之后更新,参数是要删除的id</span></span><br><span class="line">    res.send(&#123;</span><br><span class="line">        success: <span class="literal">true</span></span><br><span class="line">    &#125;)<span class="comment">//发送到客户端</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="上级分类"><a href="#上级分类" class="headerlink" title="上级分类"></a>上级分类</h3><p> 现在，需要加一个上级分类，用来保存所有分类的对应关系<br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"上级分类"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">"model.parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">"item in parents"</span> <span class="attr">:key</span>=<span class="string">"item._id"</span> <span class="attr">:label</span>=<span class="string">"item.name"</span> <span class="attr">:value</span>=<span class="string">"item._id"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>   后端需要在模型里添加字段<br> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> schema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    <span class="comment">//上级分类</span></span><br><span class="line">    parent:&#123;</span><br><span class="line">        type:mongoose.SchemaTypes.ObjectId,<span class="comment">//因为保存的是其他集合的id，所以要这么写</span></span><br><span class="line">        ref:<span class="string">'Category'</span><span class="comment">//这里是关联哪个模型</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//开始定义需要的字段 name是key ,type是类型</span></span><br><span class="line">    name:&#123;</span><br><span class="line">        type:<span class="built_in">String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p> 这时在列表页就可以拿到上级分类的id了</p>
<p><img src="/images/pasted-47.png" alt="upload successful"><br>但是，上级分类这里显示的是id，正常来说应该显示的是分类名字，这样更直观，所以需要改列表页的接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列表接口</span></span><br><span class="line">router.get(<span class="string">"/categories"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> items = <span class="keyword">await</span> Category.find().populate(<span class="string">"parent"</span>).limit(<span class="number">10</span>)<span class="comment">//查找所有数据，限制10条   如果数据库中有关联字段，就可以用populate查出来,传进去什么字段，就会直接找对应字段id所属的集合的所有信息，而不仅仅是id了</span></span><br><span class="line">    res.send(items)<span class="comment">//发送到客户端</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-48.png" alt="upload successful"></p>
<h3 id="通用CRUD接口"><a href="#通用CRUD接口" class="headerlink" title="通用CRUD接口"></a>通用CRUD接口</h3><p>将app.use里的路由定义成动态路由<br><code>app.use(&quot;/admin/api/rest/:resource&quot;, router)</code></p>
<p><img src="/images/pasted-49.png" alt="upload successful"><br>之后可以将路由中的categories都删了<br>因为需要按照路由引入对应的模型所有这个就不能要了<br><code>const Category = require(&quot;../../models/Category&quot;)//引入模型</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = express.Router(&#123;</span><br><span class="line">    mergeParams:<span class="literal">true</span><span class="comment">//上面添加这句，表示合并参数，因为内部要用</span></span><br><span class="line">&#125;)<span class="comment">//用到了子路由</span></span><br></pre></td></tr></table></figure>
<p> 之后console一下就可以拿到动态路由的名了</p>
<p><img src="/images/pasted-50.png" alt="upload successful"></p>
<p><img src="/images/pasted-51.png" alt="upload successful"></p>
<p>但是现在名字是小写复数，模型名是大写单数<br>就需要用inflection包来进行单复数转换<br><code>npm i inflection --save</code><br>列表页接口为例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">"/"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> ModelName = <span class="built_in">require</span>(<span class="string">"inflection"</span>).classify(req.params.resource)<span class="comment">//转类名大小写，单复数</span></span><br><span class="line">      <span class="keyword">const</span> Model = <span class="built_in">require</span>(<span class="string">`../../models/<span class="subst">$&#123;ModelName&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">const</span> items = <span class="keyword">await</span> Model.find().populate(<span class="string">"parent"</span>).limit(<span class="number">10</span>)<span class="comment">//查找所有数据，限制10条   如果数据库中有关联字段，就可以用populate查出来,传进去什么字段，就会直接找对应字段id所属的集合的所有信息，而不仅仅是id了</span></span><br><span class="line">      res.send(items)<span class="comment">//发送到客户端</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>由于重复的地方太多，可以把引入模型和大小写转换放到一个中间件里执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(<span class="string">"/admin/api/rest/:resource"</span>,</span><br><span class="line">    <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> ModelName = <span class="built_in">require</span>(<span class="string">"inflection"</span>).classify(req.params.resource)<span class="comment">//转类名大小写，单复数</span></span><br><span class="line">        <span class="comment">// const Model = require(`../../models/$&#123;ModelName&#125;`)</span></span><br><span class="line">        <span class="comment">//由于这样后面的中间件是拿不到这个Model的，所以要把他添加到req中</span></span><br><span class="line">        req.Model = <span class="built_in">require</span>(<span class="string">`../../models/<span class="subst">$&#123;ModelName&#125;</span>`</span>)</span><br><span class="line">        next()</span><br><span class="line">    &#125;, router)</span><br></pre></td></tr></table></figure>
<p> 就可以将路由中的categories全删了，Category模型全换成req.model</p>
<p><img src="/images/pasted-52.png" alt="upload successful"><br>这时注意这里</p>
<p><img src="/images/pasted-53.png" alt="upload successful"><br>这个查找分类的上级，但是现在是通用的接口，现在这么做就不合适了，需要改成条件选择</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列表接口</span></span><br><span class="line">    router.get(<span class="string">"/"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> queryOptions = &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span>(req.Model.modelName === <span class="string">"Category"</span>)&#123;</span><br><span class="line">            queryOptions.populate = <span class="string">"parent"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果数据库中有关联字段，就可以用populate查出来,传进去什么字段，就会直接找对应字段id所属的集合的所有信息，而不仅仅是id了</span></span><br><span class="line">        <span class="keyword">const</span> items = <span class="keyword">await</span> req.Model.find().setOptions(queryOptions).limit(<span class="number">10</span>)<span class="comment">//查找所有数据，限制10条   </span></span><br><span class="line">        res.send(items)<span class="comment">//发送到客户端</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>


<h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><p>前端用element的upload定义个上传图像组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"缩略图"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         action里是上传的地址</span></span><br><span class="line"><span class="comment">         :on-success 是成功后做什么</span></span><br><span class="line"><span class="comment">         :before-upload 是上传前做什么</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"avatar-uploader"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:action</span>=<span class="string">"axios.defaults.baseURL + '/upload'"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:show-file-list</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-success</span>=<span class="string">"afterUpload"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 判断有没有图片，有就展示图片没有就展示icon --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">"model.smallImg"</span> <span class="attr">:src</span>=<span class="string">"model.smallImg"</span> <span class="attr">class</span>=<span class="string">"avatar"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">"el-icon-plus avatar-uploader-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先打印看看</span></span><br><span class="line">   afterUpload(res) &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(res)</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>
<p>这时会报后端找不到的错误<br>这时去后端定义接口地址<br>这里需要一个处理图片的中间件，可以用multer<br><code>npm i multer</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图片上传</span></span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">"multer"</span>)<span class="comment">//引入multer</span></span><br><span class="line"><span class="comment">//上传的中间件 dest 是目标地址</span></span><br><span class="line"><span class="keyword">const</span> upload = multer(</span><br><span class="line">    &#123;<span class="attr">dest</span>:__dirname+<span class="string">"/../../uploads"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">//upload.single("file") 单个文件上传用single,参数是form data里的名字file</span></span><br><span class="line">app.post(<span class="string">"/admin/api/upload"</span>,upload.single(<span class="string">"file"</span>) ,<span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> file = req.file</span><br><span class="line">    file.url = <span class="string">`http://localhost:3000/uploads/<span class="subst">$&#123;file.filename&#125;</span>`</span><span class="comment">//添加http的地址</span></span><br><span class="line">    res.send(file)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>现在uploads里就已经有图片了，<br>这时需要去根index里加个静态文件的托管</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(<span class="string">"/uploads"</span>,express.static(__dirname+<span class="string">"/uploads"</span>))</span><br></pre></td></tr></table></figure>
<p>去前端补全afterUpload方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">afterUpload(res) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$<span class="keyword">set</span>(this.model,'smallImg',res.url)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p> element在列表中展示图片<br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"产品名称"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"scope.row.smallImg"</span> <span class="attr">style</span>=<span class="string">"height:3rem"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="富文本"><a href="#富文本" class="headerlink" title="富文本"></a>富文本</h3><p>可以用  Vue2Editor<br><a href="https://www.npmjs.com/package/vue2-editor" target="_blank" rel="noopener">https://www.npmjs.com/package/vue2-editor</a></p>
<p>先下载<br><code>npm install vue2-editor</code></p>
<p>在script中引进来<br><code>import { VueEditor } from &quot;vue2-editor&quot;;</code></p>
<p><img src="/images/pasted-54.png" alt="upload successful"></p>
<p>注册组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">components: &#123;</span><br><span class="line">  VueEditor</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-55.png" alt="upload successful"></p>
<p>去html中使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"介绍"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vue-editor</span> <span class="attr">v-model</span>=<span class="string">"model.text"</span>&gt;</span><span class="tag">&lt;/<span class="name">vue-editor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>后端模型中定义个String接收就行了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 介绍</span></span><br><span class="line">text:&#123;</span><br><span class="line">    type:<span class="built_in">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 这样就已经可以用了<br> 但是现在有个问题，就是图片存储方式</p>
<p><img src="/images/pasted-56.png" alt="upload successful"><br>默认行为是直接把图片进行base64编码了，好处就是方便，坏处就是会造成这个接口体积过大，所以要改成之前上传图片的方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"介绍"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- useCustomImageHandler使用自定义图片处理事件  image-added是图片上传后做什么事 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vue-editor</span> <span class="attr">useCustomImageHandler</span> @<span class="attr">image-added</span>=<span class="string">"handleImageAdded"</span> <span class="attr">v-model</span>=<span class="string">"model.text"</span>&gt;</span><span class="tag">&lt;/<span class="name">vue-editor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//富文本图片上传</span></span><br><span class="line"><span class="keyword">async</span> handleImageAdded(file, Editor, cursorLocation, resetUploader) &#123;</span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData(); <span class="comment">//html自带的方法，用于提交表单数据</span></span><br><span class="line">  formData.append(<span class="string">"file"</span>, file); <span class="comment">//字段名是file</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.axios.post(<span class="string">"upload"</span>, formData);</span><br><span class="line">  Editor.insertEmbed(cursorLocation, <span class="string">"image"</span>, res.data.url);<span class="comment">//三个参数，第一个是光标位置，第二个是告诉插入一张图片，第三个是图片地址</span></span><br><span class="line">  resetUploader();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p> 现在图片就是个网络地址了</p>
<h3 id="登录权限问题"><a href="#登录权限问题" class="headerlink" title="登录权限问题"></a>登录权限问题</h3><p> 密码不应该明文保存，应该存储的是加密过的数据<br> 所以要把密码加工一下<br> 改密码的模型加个set处理方法</p>
<p> set里要进行散列密码，需要用个模块bcrypt来散列密码<br> <code>npm i bcryptjs</code>(bcrypt可以但是上传到服务器时会出问题，用bcryptjs就可以解决)<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">password:&#123;</span><br><span class="line">    type:<span class="built_in">String</span>,</span><br><span class="line">    select:<span class="literal">false</span>,<span class="comment">//查询时这个字段不会被查出来,防止二次报错时对散列过的密码进行二次散列</span></span><br><span class="line">    <span class="keyword">set</span>(value)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">"bcryptjs"</span>).hashSync(value,<span class="number">10</span>)<span class="comment">//散列的方法,两个参数第一个是要散列的密码，第二个是加密指数，越大越安全，但是越耗时一般10-12就可以了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> 现在保存后密码就被散列了</p>
<p><img src="/images/pasted-57.png" alt="upload successful"></p>
<p>之后写个登录页，能提交用户名密码就行</p>
<p>之后去后端定义一个验证登录的接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//登录验证</span></span><br><span class="line">app.post(<span class="string">"/admin/api/login"</span>,<span class="keyword">async</span> (req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;name,password&#125; = req.body</span><br><span class="line">    <span class="comment">// 根据用户名找用户 </span></span><br><span class="line">    <span class="keyword">const</span> Admin = <span class="built_in">require</span>(<span class="string">"../../models/Admin"</span>)</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> Admin.findOne(&#123;name&#125;)</span><br><span class="line">    <span class="keyword">if</span>(!user)&#123;</span><br><span class="line">        <span class="comment">// 如果没有</span></span><br><span class="line">        <span class="keyword">return</span> res.status(<span class="number">422</span>).send(&#123;</span><br><span class="line">            message:<span class="string">"用户不存在"</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 校验密码</span></span><br><span class="line">    <span class="comment">// 返回token</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p> 这里先写一半，这里用户如果不存在就会返回一个错误码,前端需要根据这个错误码在页面上做出提示</p>
<p>去axios里加个拦截器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">const</span> http = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">"http://localhost:3000/admin/api"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//后拦截器</span></span><br><span class="line">http.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res <span class="comment">//没问题就直接return</span></span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err.response.data.message) &#123;</span><br><span class="line">        <span class="comment">//console.log(err.response.data.message)报错的响应数据</span></span><br><span class="line">        Vue.prototype.$message.error(err.response.data.message)<span class="comment">//现在vue实例上有element，可以直接用$message这个弹出框</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)<span class="comment">//有问题就返回报错</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http</span><br></pre></td></tr></table></figure>
<p>现在前端捕获完错误了，可以回过头写后端验证登录的接口了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//登录验证</span></span><br><span class="line">app.post(<span class="string">"/admin/api/login"</span>,<span class="keyword">async</span> (req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;name,password&#125; = req.body</span><br><span class="line">    <span class="comment">// 根据用户名找用户 </span></span><br><span class="line">    <span class="keyword">const</span> Admin = <span class="built_in">require</span>(<span class="string">"../../models/Admin"</span>)</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> Admin.findOne(&#123;name&#125;).select(<span class="string">"+password"</span>)</span><br><span class="line">    <span class="comment">//因为之前模型中密码的select设成false里，默认是查不到的，所有加上select("+password")来强制获取密码，- 就是排除</span></span><br><span class="line">    <span class="keyword">if</span>(!user)&#123;</span><br><span class="line">        <span class="comment">// 如果没有</span></span><br><span class="line">        <span class="keyword">return</span> res.status(<span class="number">422</span>).send(&#123;</span><br><span class="line">            message:<span class="string">"用户不存在"</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 校验密码</span></span><br><span class="line">    <span class="keyword">const</span> isValid = <span class="built_in">require</span>(<span class="string">"bcryptjs"</span>).compareSync(password,user.password)<span class="comment">//用bcrypt的compareSync来验证密码，第一个参数是明文（提交上来的）,第二个是密文(数据库里存的)</span></span><br><span class="line">        <span class="keyword">if</span>(!isValid)&#123;</span><br><span class="line">        <span class="comment">//密码不对</span></span><br><span class="line">        <span class="keyword">return</span> res.status(<span class="number">422</span>).send(&#123;</span><br><span class="line">            message:<span class="string">"密码错误"</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回token</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p> 现在差返回个token，可以用jsonwebtoken插件来解决<br>   <code>npm i jsonwebtoken</code><br>   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 返回token</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">"jsonwebtoken"</span>)</span><br><span class="line"><span class="keyword">const</span> token = jwt.sign(&#123;<span class="attr">id</span>: user._id&#125;,<span class="string">"sybsdz"</span>)<span class="comment">//用来生成token,第一个参数是个对象，里面的东西是想散列的东西,第二个参数是个秘钥(自己定义，随便写   )，之后会根据自己内部的算法来生成个token</span></span><br><span class="line">res.send(&#123;token&#125;)</span><br></pre></td></tr></table></figure><br>   现在前端就可以拿到token了,接着补全登录方法</p>
<p><img src="/images/pasted-58.png" alt="upload successful"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> login() &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.model.name || !<span class="keyword">this</span>.model.password) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$message.error(<span class="string">"用户名或密码不能为空"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.axios.post(<span class="string">"login"</span>, <span class="keyword">this</span>.model);</span><br><span class="line">  localStorage.token = res.data.token; <span class="comment">//将token写入本地缓存中</span></span><br><span class="line">  <span class="keyword">this</span>.$router.push(<span class="string">"/"</span>);</span><br><span class="line">  <span class="keyword">this</span>.$message.success(<span class="string">"登录成功"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在前端有了token就得给所有请求之前加个请求头<br>axios里加个拦截器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前拦截器</span></span><br><span class="line">http.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//为所有的请求添加一个token 前面加Bearer是为了规范</span></span><br><span class="line">    config.headers.Authorization =<span class="string">"Bearer "</span> + localStorage.token</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>后端改接口，处理token,列表页为例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列表接口</span></span><br><span class="line">router.get(<span class="string">"/"</span>, <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="built_in">String</span>(req.headers.authorization||<span class="string">''</span>).split(<span class="string">" "</span>).pop()<span class="comment">//这里前端定义的请求头是大写，后端要小写 pop提取最后一个元素</span></span><br><span class="line">    <span class="keyword">if</span>(!token)&#123;</span><br><span class="line">        <span class="comment">//没有token报错</span></span><br><span class="line">        <span class="keyword">return</span> res.status(<span class="number">401</span>).send(&#123;</span><br><span class="line">            message: <span class="string">"请先登录"</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123;id&#125; = jwt.verify(token,<span class="string">"sybsdz"</span>)<span class="comment">//verify是校验，第一个参数是token，第二个是自己定义的那个秘钥，注意这时jwt的引用已经提到最上面了,这个id就是用户的id</span></span><br><span class="line">    <span class="keyword">if</span>(!id)&#123;</span><br><span class="line">        <span class="comment">//解密不出来id</span></span><br><span class="line">        <span class="keyword">return</span> res.status(<span class="number">401</span>).send(&#123;</span><br><span class="line">            message: <span class="string">"请先登录"</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    req.user = <span class="keyword">await</span> Admin.findById(id)<span class="comment">//通过id去admin表里查，万一是假的呢，注意这里Admin的引入也提前到最开始了</span></span><br><span class="line">    <span class="keyword">if</span>(!req.user)&#123;</span><br><span class="line">        <span class="comment">//没有这个用户</span></span><br><span class="line">        <span class="keyword">return</span> res.status(<span class="number">401</span>).send(&#123;</span><br><span class="line">            message: <span class="string">"请先登录"</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(req.user)</span><br><span class="line">    <span class="keyword">await</span> next()</span><br><span class="line">&#125;, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> queryOptions = &#123;&#125;</span><br><span class="line">    <span class="comment">//如果数据库中有关联字段，就可以用populate查出来,传进去什么字段，就会直接找对应字段id所属的集合的所有信息，而不仅仅是id了</span></span><br><span class="line">    <span class="keyword">if</span> (req.Model.modelName === <span class="string">"Category"</span>) &#123;</span><br><span class="line">        queryOptions.populate = <span class="string">"parent"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// queryOptions.populate = "parent"</span></span><br><span class="line">    <span class="keyword">const</span> items = <span class="keyword">await</span> req.Model.find().setOptions(queryOptions)<span class="comment">//查找所有数据，限制10条   </span></span><br><span class="line">    res.send(items)<span class="comment">//发送到客户端</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p> 前端在axios拦截器中判断，状态码是401就跳到登录页<br> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"./router"</span><span class="comment">//先把路由引进来</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//后拦截器</span></span><br><span class="line">http.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res <span class="comment">//没问题就直接return</span></span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err.response.data.message) &#123;</span><br><span class="line">        <span class="comment">//console.log(err.response.data.message)报错的响应数据</span></span><br><span class="line">        Vue.prototype.$message.error(err.response.data.message)<span class="comment">//现在vue实例上有element，可以直接用$message这个弹出框</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(err.response.status=== <span class="number">401</span> )&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">        router.push(<span class="string">"/login"</span>)<span class="comment">//跳到登录页</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)<span class="comment">//有问题就返回报错</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>现在去后端把判断token的中间件变成个模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//登录授权中间件</span></span><br><span class="line">   <span class="keyword">const</span> auth = <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">       <span class="keyword">const</span> token = <span class="built_in">String</span>(req.headers.authorization||<span class="string">''</span>).split(<span class="string">" "</span>).pop()<span class="comment">//这里前端定义的请求头是大写，后端要小写 pop提取最后一个元素</span></span><br><span class="line">       <span class="keyword">if</span>(!token)&#123;</span><br><span class="line">           <span class="comment">//没有token报错</span></span><br><span class="line">           <span class="keyword">return</span> res.status(<span class="number">401</span>).send(&#123;</span><br><span class="line">               message: <span class="string">"请先登录"</span></span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">const</span> &#123;id&#125; = jwt.verify(token,<span class="string">"sybsdz"</span>)<span class="comment">//verify是校验，第一个参数是token，第二个是自己定义的那个秘钥，注意这时jwt的引用已经提到最上面了,这个id就是用户的id</span></span><br><span class="line">       <span class="keyword">if</span>(!id)&#123;</span><br><span class="line">           <span class="comment">//解密不出来id</span></span><br><span class="line">           <span class="keyword">return</span> res.status(<span class="number">401</span>).send(&#123;</span><br><span class="line">               message: <span class="string">"请先登录"</span></span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">       req.user = <span class="keyword">await</span> Admin.findById(id)<span class="comment">//通过id去admin表里查，万一是假的呢，注意这里Admin的引入也提前到最开始了</span></span><br><span class="line">       <span class="keyword">if</span>(!req.user)&#123;</span><br><span class="line">           <span class="comment">//没有这个用户</span></span><br><span class="line">           <span class="keyword">return</span> res.status(<span class="number">401</span>).send(&#123;</span><br><span class="line">               message: <span class="string">"请先登录"</span></span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(req.user)</span><br><span class="line">       <span class="keyword">await</span> next()</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在需要的地方直接用auth</span></span><br><span class="line">   app.use(<span class="string">"/admin/api/rest/:resource"</span>,auth,</span><br><span class="line">       <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">           <span class="keyword">const</span> ModelName = <span class="built_in">require</span>(<span class="string">"inflection"</span>).classify(req.params.resource)<span class="comment">//转类名大小写，单复数</span></span><br><span class="line">           <span class="comment">// const Model = require(`../../models/$&#123;ModelName&#125;`)</span></span><br><span class="line">           <span class="comment">//由于这样后面的中间件是拿不到这个Model的，所以要把他添加到req中</span></span><br><span class="line">           req.Model = <span class="built_in">require</span>(<span class="string">`../../models/<span class="subst">$&#123;ModelName&#125;</span>`</span>)</span><br><span class="line">           next()</span><br><span class="line">       &#125;, router)</span><br></pre></td></tr></table></figure>
<p>  但是现在图片上传没有加上token<br>  去main.js定义一个全局的加header方法 一定要写在new Vue前面<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getAuthHeaders() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                Authorization: <span class="string">"Bearer "</span> + (localStorage.token || <span class="string">''</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>之后在页面上直接用就行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"avatar-uploader"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:action</span>=<span class="string">"axios.defaults.baseURL + '/upload'"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:headers</span>=<span class="string">"getAuthHeaders()"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:show-file-list</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:on-success</span>=<span class="string">"afterUpload"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="前端接口实例"><a href="#前端接口实例" class="headerlink" title="前端接口实例"></a>前端接口实例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">"express"</span>).Router()</span><br><span class="line">    <span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</span><br><span class="line">    <span class="comment">// const Article = require("../../models/Article")</span></span><br><span class="line">    <span class="keyword">const</span> Webindex = <span class="built_in">require</span>(<span class="string">"../../models/Webindex"</span>)</span><br><span class="line">    <span class="keyword">const</span> Webfooter = <span class="built_in">require</span>(<span class="string">"../../models/Webfooter"</span>)</span><br><span class="line">    <span class="keyword">const</span> Sound = <span class="built_in">require</span>(<span class="string">"../../models/Sound"</span>)</span><br><span class="line">    <span class="keyword">const</span> System = <span class="built_in">require</span>(<span class="string">"../../models/System"</span>)</span><br><span class="line">    <span class="keyword">const</span> Microphone = <span class="built_in">require</span>(<span class="string">"../../models/Microphone"</span>)</span><br><span class="line">    <span class="keyword">const</span> Other = <span class="built_in">require</span>(<span class="string">"../../models/Other"</span>)</span><br><span class="line">    <span class="keyword">const</span> Combination = <span class="built_in">require</span>(<span class="string">"../../models/Combination"</span>)</span><br><span class="line">    <span class="keyword">const</span> Amplifier = <span class="built_in">require</span>(<span class="string">"../../models/Amplifier"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Category = <span class="built_in">require</span>(<span class="string">"../../models/Category"</span>)</span><br><span class="line">    <span class="comment">// footer接口</span></span><br><span class="line">    router.get(<span class="string">"/footer"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> model = <span class="keyword">await</span> Webfooter.find()</span><br><span class="line">        <span class="keyword">let</span> footerData = model[<span class="number">0</span>]</span><br><span class="line">        res.send(footerData)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 首页接口</span></span><br><span class="line">    router.get(<span class="string">"/index"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> model = <span class="keyword">await</span> Webindex.find()</span><br><span class="line">        <span class="keyword">let</span> indexData = model[<span class="number">0</span>]</span><br><span class="line">        res.send(indexData)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 产品接口</span></span><br><span class="line">    router.get(<span class="string">"/prodect/:index"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> index = req.params.index</span><br><span class="line">        <span class="keyword">let</span> model;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// &#123;&#125;,&#123;_id:1,smallImg:1,name:1,parent["name"]:1&#125;</span></span><br><span class="line">            model = <span class="keyword">await</span> System.find(&#123;&#125;, &#123; <span class="attr">_id</span>: <span class="number">1</span>, <span class="attr">smallImg</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="number">1</span>, <span class="attr">parent</span>: <span class="number">1</span> &#125;).populate(<span class="string">"parent"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line">            model = <span class="keyword">await</span> Amplifier.find(&#123;&#125;, &#123; <span class="attr">_id</span>: <span class="number">1</span>, <span class="attr">smallImg</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="number">1</span>, <span class="attr">parent</span>: <span class="number">1</span> &#125;).populate(<span class="string">"parent"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">2</span>) &#123;</span><br><span class="line">            model = <span class="keyword">await</span> Sound.find(&#123;&#125;, &#123; <span class="attr">_id</span>: <span class="number">1</span>, <span class="attr">smallImg</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="number">1</span>, <span class="attr">parent</span>: <span class="number">1</span> &#125;).populate(<span class="string">"parent"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">3</span>) &#123;</span><br><span class="line">            model = <span class="keyword">await</span> Microphone.find(&#123;&#125;, &#123; <span class="attr">_id</span>: <span class="number">1</span>, <span class="attr">smallImg</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="number">1</span>, <span class="attr">parent</span>: <span class="number">1</span> &#125;).populate(<span class="string">"parent"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">4</span>) &#123;</span><br><span class="line">            model = <span class="keyword">await</span> Other.find(&#123;&#125;, &#123; <span class="attr">_id</span>: <span class="number">1</span>, <span class="attr">smallImg</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="number">1</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">5</span>) &#123;</span><br><span class="line">            model = <span class="keyword">await</span> Combination.find(&#123;&#125;, &#123; <span class="attr">_id</span>: <span class="number">1</span>, <span class="attr">smallImg</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="number">1</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        res.send(model)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//详情接口</span></span><br><span class="line">    router.get(<span class="string">"/:index/:id"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> index = req.params.index</span><br><span class="line">        <span class="keyword">const</span> id = req.params.id</span><br><span class="line">        <span class="keyword">let</span> model;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            model = <span class="keyword">await</span> System.findById(id)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line">            model = <span class="keyword">await</span> Amplifier.findById(id)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">2</span>) &#123;</span><br><span class="line">            model = <span class="keyword">await</span> Sound.findById(id)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">3</span>) &#123;</span><br><span class="line">            model = <span class="keyword">await</span> Microphone.findById(id)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">4</span>) &#123;</span><br><span class="line">            model = <span class="keyword">await</span> Other.findById(id)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">5</span>) &#123;</span><br><span class="line">            model = <span class="keyword">await</span> Combination.findById(id).populate([<span class="string">"system"</span>,<span class="string">"amplifier"</span>,<span class="string">"sound"</span>,<span class="string">"microphone"</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        res.send(model)</span><br><span class="line">    &#125;)</span><br><span class="line">    app.use(<span class="string">"/web/api"</span>, router)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>element</tag>
        <tag>node</tag>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>useMemo</title>
    <url>/2020/06/30/useMemo/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;useState,useMemo&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [xiaohong,setXiaoHong] = useState(<span class="string">"小红在吃饭"</span>)</span><br><span class="line">    <span class="keyword">const</span> [dahong,setDaHong] = useState(<span class="string">"大红在睡觉"</span>)</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button onClick=&#123;()=&gt;&#123;</span><br><span class="line">                setXiaoHong(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">            &#125;&#125;&gt;小红&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;()=&gt;&#123;</span></span><br><span class="line"><span class="regexp">                setDaHong(new Date().getTime()+"啦啦啦")</span></span><br><span class="line"><span class="regexp">            &#125;&#125;&gt;大红&lt;/</span>button&gt;</span><br><span class="line">            &lt;ChildrenCom name=&#123;xiaohong&#125;&gt;&#123;dahong&#125;&lt;<span class="regexp">/ChildrenCom&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ChildrenCom</span>(<span class="params">&#123;name,children&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeXiaoHong</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"xiaohong!!!!!!!!!!!!"</span>)</span><br><span class="line">        <span class="keyword">return</span> name+<span class="string">"小红他来了"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> actionXiaoHong =useMemo(<span class="function"><span class="params">()</span>=&gt;</span>changeXiaoHong(name),[name])<span class="comment">//接收两个参数第一个是方法，第二个是当什么改变时执行，跟useEffect像，这里是name改变时才再次执行此方法</span></span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;&#123;actionXiaoHong&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div&gt;&#123;children&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Example4</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>vue2.x升级成vue3</title>
    <url>/2020/07/09/vue2-x%E5%8D%87%E7%BA%A7%E6%88%90vue3/</url>
    <content><![CDATA[<p>1.首先确保cli版本在4.3以上<br>2.正常创建项目,之后    <code>vue add vue-next</code></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>useReducer+useContext小实例</title>
    <url>/2020/06/30/useReducer-useContext%E5%B0%8F%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//botton</span></span><br><span class="line"><span class="keyword">import</span> React,&#123;useContext&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;ColorContext,UPDATE_COlOR&#125; <span class="keyword">from</span> <span class="string">'./color'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;dispatch&#125; = useContext(ColorContext) <span class="comment">//在需要使用变量时引入ColorContext,获取共享状态的值</span></span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button onClick=&#123;()=&gt;&#123;dispatch(&#123;<span class="attr">type</span>:UPDATE_COlOR,<span class="attr">color</span>:<span class="string">"red"</span>&#125;)&#125;&#125;&gt;红&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;()=&gt;&#123;dispatch(&#123;type:UPDATE_COlOR,color:"yellow"&#125;)&#125;&#125;&gt;黄&lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Button</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//showArea</span></span><br><span class="line"><span class="keyword">import</span> React ,&#123;useContext&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;ColorContext&#125; <span class="keyword">from</span> <span class="string">'./color'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ShowArea</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;color&#125; = useContext(ColorContext) <span class="comment">//在需要使用变量时引入ColorContext,获取共享状态的值</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div style=&#123; &#123;<span class="attr">color</span>:color&#125; &#125;&gt;</span><br><span class="line">            颜色</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default ShowArea</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">///color</span></span><br><span class="line"><span class="keyword">import</span> React,&#123;createContext,useReducer&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ColorContext = createContext(&#123;&#125;) <span class="comment">//构建color组件的上下文</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> UPDATE_COlOR = <span class="string">'UPDATE_COlOR'</span><span class="comment">//定义常量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reducer = <span class="function">(<span class="params">state,action</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">        <span class="keyword">case</span> UPDATE_COlOR:</span><br><span class="line">            <span class="keyword">return</span> action.color</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Color = <span class="function">(<span class="params">props</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [color,dispatch] = useReducer(reducer,<span class="string">"blue"</span>) <span class="comment">//跟usestate有点像,传入两个值reducer和初始值</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;ColorContext.Provider value=&#123;&#123;color,dispatch&#125;&#125;&gt;</span><br><span class="line">            &#123;props.children&#125; &#123;<span class="comment">/* 渲染子组件 */</span>&#125;</span><br><span class="line">        &lt;<span class="regexp">/ColorContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//example6</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ShowArea <span class="keyword">from</span> <span class="string">'./showArea'</span></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">'./Button'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Color &#125; <span class="keyword">from</span> <span class="string">'./color'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example6</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;Color&gt;</span><br><span class="line">                &lt;ShowArea&gt;&lt;<span class="regexp">/ShowArea&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Button&gt;&lt;/</span>Button&gt;</span><br><span class="line">            &lt;<span class="regexp">/Color&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Example6</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-38.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中使用百度地图</title>
    <url>/2020/05/24/vue%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;api.map.baidu.com&#x2F;api?v&#x3D;2.0&amp;ak&#x3D;nwNW4rgxKCm6cGYkSIPsezRjZ0vOsZyB&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>!!!可以引完js后在</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  methods: &#123;</span><br><span class="line">    createMap() &#123;</span><br><span class="line">		<span class="comment">//生成器的代码  </span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.createMap();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>也要创建vue.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    configureWebpack: &#123;</span><br><span class="line">      externals: &#123;</span><br><span class="line">        <span class="string">"BMap"</span>: <span class="string">"BMap"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>  正常方式<br>1.html引入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;api.map.baidu.com&#x2F;api?v&#x3D;2.0&amp;ak&#x3D;nwNW4rgxKCm6cGYkSIPsezRjZ0vOsZyB&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>2.创建vue.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    configureWebpack: &#123;</span><br><span class="line">      externals: &#123;</span><br><span class="line">        <span class="string">"BMap"</span>: <span class="string">"BMap"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>3.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"height:300px"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  createMap() &#123;</span><br><span class="line">    <span class="comment">/* eslint-disable */</span></span><br><span class="line">    <span class="comment">// 创建Map实例</span></span><br><span class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"map"</span>);</span><br><span class="line">    <span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(<span class="number">123.409893</span>,<span class="number">41.802065</span>);</span><br><span class="line">  <span class="comment">//   map.centerAndZoom(point, 15);</span></span><br><span class="line">    <span class="keyword">var</span> marker = <span class="keyword">new</span> BMap.Marker(point); <span class="comment">// 创建标注</span></span><br><span class="line">    map.addOverlay(marker);</span><br><span class="line">    <span class="comment">// 初始化地图,设置中心点坐标和地图级别</span></span><br><span class="line">    map.centerAndZoom(<span class="keyword">new</span> BMap.Point(<span class="number">123.410459</span>, <span class="number">41.802078</span>), <span class="number">18</span>);</span><br><span class="line">    <span class="comment">//添加地图类型控件</span></span><br><span class="line">    map.addControl(</span><br><span class="line">      <span class="keyword">new</span> BMap.MapTypeControl(&#123;</span><br><span class="line">        mapTypes: [BMAP_NORMAL_MAP, BMAP_HYBRID_MAP]</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 设置地图显示的城市 此项是必须设置的</span></span><br><span class="line">    map.setCurrentCity(<span class="string">"沈阳"</span>);</span><br><span class="line">    <span class="comment">//开启鼠标滚轮缩放</span></span><br><span class="line">    map.enableScrollWheelZoom(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">/* eslint-enable */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">  <span class="keyword">this</span>.createMap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue使用axios</title>
    <url>/2020/05/24/vue%E4%BD%BF%E7%94%A8axios/</url>
    <content><![CDATA[<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save axios</span><br></pre></td></tr></table></figure>
<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line">Vue.prototype.axios = axios;</span><br></pre></td></tr></table></figure>
<p>//在这个里面反向代理<br>vue.config.js里  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">      proxy: &#123;</span><br><span class="line">        <span class="string">'/api'</span>: &#123;</span><br><span class="line">          target: <span class="string">'http://39.97.33.178'</span>,</span><br><span class="line">          changeOrigin: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.axios.get(<span class="string">"/api/movieOnInfoList?cityId=10"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>post</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.axios</span><br><span class="line">  .post(</span><br><span class="line">    <span class="string">"/api/message.php"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      name:name,</span><br><span class="line">      tel: tel,</span><br><span class="line">      text: text,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/json;charset=UTF-8"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>axios</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>vue使用swiper</title>
    <url>/2020/05/24/vue%E4%BD%BF%E7%94%A8swiper/</url>
    <content><![CDATA[<p>//安装swiper<br>第一步: 安装  <code>npm install swiper vue-awesome-swiper@3.1.3 --save</code></p>
<p>第二步: 在main.js文件里引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueAwesomeSwiper <span class="keyword">from</span> <span class="string">'vue-awesome-swiper'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'swiper/swiper-bundle.css'</span></span><br><span class="line">Vue.use(VueAwesomeSwiper)</span><br></pre></td></tr></table></figure>



<p>第三步;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">:options</span>=<span class="string">"swiperOption"</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">swiper-slide</span> <span class="attr">v-for</span>=<span class="string">"items in allData.bannerphoto"</span> <span class="attr">key</span>=<span class="string">"items"</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"items"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;/<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination"</span> <span class="attr">slot</span>=<span class="string">"pagination"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> (分页器)</span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>在data里定义轮播图</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">swiperOption: &#123;</span><br><span class="line">  autoplay: &#123;</span><br><span class="line">    delay: <span class="number">2500</span>,</span><br><span class="line">    disableOnInteraction: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  loop: <span class="literal">true</span>,</span><br><span class="line">  pagination: &#123;</span><br><span class="line">    el: <span class="string">".swiper-pagination"</span>,</span><br><span class="line">    clickable: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>swiper</tag>
      </tags>
  </entry>
  <entry>
    <title>element+ts开发后台</title>
    <url>/2020/07/31/lement-ts%E5%BC%80%E5%8F%91%E5%90%8E%E5%8F%B0/</url>
    <content><![CDATA[<h3 id="注意-：-此文章是nest文章的前端部分，两篇文章有所关联"><a href="#注意-：-此文章是nest文章的前端部分，两篇文章有所关联" class="headerlink" title="注意 ： 此文章是nest文章的前端部分，两篇文章有所关联"></a>注意 ： 此文章是nest文章的前端部分，两篇文章有所关联</h3><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>先<code>vue create XXXX</code>创建个空项目</p>
<p>之后<code>vue add element</code>把element添加到vue中</p>
<p>这时会有个提示</p>
<p><img src="/images/pasted-134.png" alt="upload successful"></p>
<p>就是还没提交代码是否要继续，y就行</p>
<p>之后会有选项<br><img src="/images/pasted-136.png" alt="upload successful"><br>第一个是选默认引用，第二个不覆盖scss，第三中文</p>
<p>之后下载typescript<br><code>vue add typescript</code></p>
<p><img src="/images/pasted-137.png" alt="upload successful"><br>之后选择这些，第一个是使用class-style的模式<br>去mian.ts中把element后面的.js删掉，现在是ts项目了<br><img src="/images/pasted-138.png" alt="upload successful"></p>
<p>去页面中，在script中加个lang=’ts’的前缀<br><img src="/images/pasted-139.png" alt="upload successful"></p>
<p>去app里删没用的东西，删成这样<br><img src="/images/pasted-140.png" alt="upload successful"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; Component, Vue &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>去view里新建个Main.vue的文件<br>写完vue基本结构后写elcon，就可以快速生成一个骨架<br><img src="/images/pasted-142.png" alt="upload successful"><br>如果elcon没有提示，要下这个插件<br><img src="/images/pasted-141.png" alt="upload successful"></p>
<p>先改成这样<br><img src="/images/pasted-143.png" alt="upload successful"><br>之后去路由把根路由渲染的组件换成Mian.vue</p>
<p>开始写children时发现没有提示，去看看下面routes的返回类型<br><img src="/images/pasted-144.png" alt="upload successful"><br>现在把返回类型给routes，就有提示了<br><img src="/images/pasted-145.png" alt="upload successful"><br>children补全<br><img src="/images/pasted-146.png" alt="upload successful"><br>现在路由就好使了<br><img src="/images/pasted-148.png" alt="upload successful"></p>
<p>回去Main.vue接着写，把script改造成这样<br><img src="/images/pasted-147.png" alt="upload successful"><br>之后去上面把菜单的地方用elmen快速创建<br><img src="/images/pasted-149.png" alt="upload successful"><br>改成这样<br><img src="/images/pasted-150.png" alt="upload successful"><br>menu的数据结构<br><img src="/images/pasted-151.png" alt="upload successful"></p>
<p>开始写子路由，在view中新建个课程文件夹courses,之后新建个列表页List.vue<br>之后配置路由…<br>js中定义方法<br><img src="/images/pasted-152.png" alt="upload successful"><br>正常要定义fetch方法来进行axios请求了，但是现在是ts项目，axios的安装方式不一样了<br><code>npm i axios @types/axios</code><br>去main中引用<br><img src="/images/pasted-153.png" alt="upload successful"><br>list中补全，这样就能拿到数据了<br><img src="/images/pasted-155.png" alt="upload successful"><br>但是有个问题axios一样报红<br>官网给的报错解决方法，我是不好使<br><img src="/images/pasted-156.png" alt="upload successful"></p>
<p>拿到数据后上面用elta创建表格<br><img src="/images/pasted-157.png" alt="upload successful"><br>改成这样<br><img src="/images/pasted-158.png" alt="upload successful"></p>
<p>在写编辑页面，创建后配路由</p>
<p><img src="/images/pasted-159.png" alt="upload successful"><br>props设为true可以在页面中用props拿到动态路由的id,id后面要加!告诉它会给他赋值的，不写会警告<br><img src="/images/pasted-165.png" alt="upload successful"><br>这个id就是动态路由了<br>由于创建和编辑是一个页面，要加上这个以路由区分<br><img src="/images/pasted-161.png" alt="upload successful"><br>现在需要根据有没有id判断是编辑还是创建，要写一个计算属性<br><img src="/images/pasted-162.png" alt="upload successful"><br><img src="/images/pasted-163.png" alt="upload successful"></p>
<p>现在要具体写表单项了，可以用一个插件快速生成<br><a href="https://www.yuque.com/chaojie-vjiel/vbwzgu" target="_blank" rel="noopener">https://www.yuque.com/chaojie-vjiel/vbwzgu</a> 官方文档<br><code>npm i vue-ele-form</code><br>下载后去mian里全局注册一下<br><img src="/images/pasted-164.png" alt="upload successful"><br>去页面中使用<br><img src="/images/pasted-166.png" alt="upload successful"><br><img src="/images/pasted-168.png" alt="upload successful"><br>现在回列表页加个编辑的按钮，eltac快捷命令<br><img src="/images/pasted-167.png" alt="upload successful"><br><img src="/images/pasted-169.png" alt="upload successful"><br>现在点击会跳到编辑页，就需要axios来获取当前页的数据了<br><img src="/images/pasted-170.png" alt="upload successful"><br>现在要区分创建和编辑的保存方法<br><img src="/images/pasted-171.png" alt="upload successful"></p>
<p>编辑完成后再来个删除<br><img src="/images/pasted-172.png" alt="upload successful"><br>remove方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> remove(id) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.$confirm(<span class="string">"是否确认删除？"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">  &#125;<span class="comment">//捕获点击取消时的异常</span></span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.$http.delete(<span class="string">`courses/<span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">this</span>.$message.success(<span class="string">"删除成功"</span>);</span><br><span class="line">  <span class="keyword">this</span>.fetch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再在上面加个创建课程的按钮<br><img src="/images/pasted-173.png" alt="upload successful"></p>
<h3 id="Avue改造crud"><a href="#Avue改造crud" class="headerlink" title="Avue改造crud"></a>Avue改造crud</h3><p>安装2.6.2版本图片上传有问题，2.4.0能用<br><code>npm i @smallwei/avue@2.4.0 --save</code><br><a href="https://avuejs.com/doc/crud/crud-doc" target="_blank" rel="noopener">https://avuejs.com/doc/crud/crud-doc</a> 官网<br>引入，像element一样，在plugins下面新建个Avue.js的文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> Avue <span class="keyword">from</span> <span class="string">"@smallwei/avue"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"@smallwei/avue/lib/index.css"</span></span><br><span class="line">Vue.use(Avue)</span><br></pre></td></tr></table></figure>
<p>去main里引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./plugins/Avue'</span></span><br></pre></td></tr></table></figure>
<p>这部分代码可以先注释了<br><img src="/images/pasted-174.png" alt="upload successful"><br>路由里也注释了，新建个crud的页面,配上路由<br><img src="/images/pasted-175.png" alt="upload successful"><br>使用<br><img src="/images/pasted-177.png" alt="upload successful"><br>option数据格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">  title: <span class="string">"课程管理"</span>,</span><br><span class="line">  column: [</span><br><span class="line">    &#123; <span class="attr">prop</span>: <span class="string">"name"</span>, <span class="attr">label</span>: <span class="string">"课程名称"</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">prop</span>: <span class="string">"cover"</span>, <span class="attr">label</span>: <span class="string">"课程封面"</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>3个方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> create(row, done, loading) &#123;</span><br><span class="line">  <span class="comment">//   row是数据</span></span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.$http.post(<span class="string">"courses"</span>, row);</span><br><span class="line">  <span class="keyword">this</span>.$message.success(<span class="string">"创建成功"</span>);</span><br><span class="line">  <span class="keyword">this</span>.fetch();</span><br><span class="line">  done(); <span class="comment">//要执行一下done才能代表添加完成，不然一直转圈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> update(row, index, done, loading) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(row))<span class="comment">//为了删除row里多的$index属性,不然后台会有问题</span></span><br><span class="line">  <span class="keyword">delete</span> data.$index</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.$http.put(<span class="string">`courses/<span class="subst">$&#123;row._id&#125;</span>`</span>, data);</span><br><span class="line">  <span class="keyword">this</span>.$message.success(<span class="string">"更新成功"</span>);</span><br><span class="line">  <span class="keyword">this</span>.fetch();</span><br><span class="line">  done();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> remove(row, index) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.$confirm(<span class="string">"是否确认删除？"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="comment">//捕获点击取消时的异常</span></span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.$http.delete(<span class="string">`courses/<span class="subst">$&#123;row._id&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">this</span>.$message.success(<span class="string">"删除成功"</span>);</span><br><span class="line">  <span class="keyword">this</span>.fetch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在既然表单项不是写死的了，就可以把option给后端生成，前段直接请求就行了<br>写一个请求option的方法，之后执行请求就行了<br><img src="/images/pasted-179.png" alt="upload successful"><br>由于现在是异步了，上面html加个判断，防止出错<br><img src="/images/pasted-180.png" alt="upload successful"></p>
<p>现在通读一下前端的代码，发现这个页面是可以复用的，只是请求的url变成个变量就行了，现在开始准备把这个页面变成一个通用的列表页</p>
<h3 id="改造成通用列表页"><a href="#改造成通用列表页" class="headerlink" title="改造成通用列表页"></a>改造成通用列表页</h3><p>现在去路由中把目前的crud的这个页变成个动态路由，并解耦<br><img src="/images/pasted-181.png" alt="upload successful"><br>去前端接收这个动态路由的值，再把所有的接口地址换成这种动态的值，class的名字最好也改一下<br><img src="/images/pasted-183.png" alt="upload successful"><br>现在为了清晰一下文件目录，可以把这个crud移出来，再改个语义化的名字<br><img src="/images/pasted-184.png" alt="upload successful"><br>路由里也向对应的修改<br><img src="/images/pasted-185.png" alt="upload successful"><br>现在前端就可以跳到什么页就请求什么页的数据了（后端别忘了写）</p>
<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>加上分页的配置信息<br><img src="/images/pasted-186.png" alt="upload successful"><br>给total动态赋值，在get中给服务器传值<br><img src="/images/pasted-187.png" alt="upload successful"><br>因为后端的crud库支持param传值后，根据值内容自动执行mongo语法，所有query里写这些东西<br>现在第一页就完成了<br><img src="/images/pasted-188.png" alt="upload successful"></p>
<p>现在开始点击2，3，4页进行翻页<br>这个是点击页码执行的事件<br><img src="/images/pasted-189.png" alt="upload successful"><br>这个事件的内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">async</span> changePage(&#123;pageSize,currentPage&#125;) &#123;<span class="comment">//直接解构了，就要这两个参数</span></span><br><span class="line">    <span class="keyword">this</span>.query.page = currentPage</span><br><span class="line">    <span class="keyword">this</span>.query.limit = pageSize</span><br><span class="line">    <span class="keyword">this</span>.fetch()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在翻页就好使了<br>这里的东西就可以注释了，只是测试用的<br>这里total也注释了下面会报错，可以给page个:any,就可以注释了，我后期加上了<br><img src="/images/pasted-191.png" alt="upload successful"></p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>avue官网中写了排序的属性<br><img src="/images/pasted-192.png" alt="upload successful"><br>后端加上这个属性（见nest那篇文章）<br><img src="/images/pasted-193.png" alt="upload successful"><br>现在前端就有两个箭头了<br><img src="/images/pasted-195.png" alt="upload successful"><br>现在点击箭头排序就已经好使了，但是是基于本地的数据，不是服务端的排序，所有要改成真正的排序<br>加个点击排序时的方法<br><img src="/images/pasted-196.png" alt="upload successful"><br>changeSort方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> changeSort(&#123; prop, order &#125;) &#123;</span><br><span class="line">  <span class="comment">//直接结构，要这两个值，key名和升/降序</span></span><br><span class="line">  <span class="keyword">if</span> (!order) &#123;</span><br><span class="line">    <span class="comment">//如果没有order就不排序</span></span><br><span class="line">    <span class="keyword">this</span>.query.sort = <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.query.sort = &#123;</span><br><span class="line">      <span class="comment">//动态的prop要包上[],不然就是个字符串了</span></span><br><span class="line">      [prop]: order === <span class="string">"ascending"</span> ? <span class="number">1</span> : <span class="number">-1</span>, <span class="comment">//如果是ascending就是正序，否则就倒叙</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.fetch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>去后端加个搜索字段<br><img src="/images/pasted-197.png" alt="upload successful"><br>上面加个搜索事件<br><img src="/images/pasted-199.png" alt="upload successful"><br>search事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> search(where,done)&#123;</span><br><span class="line">    <span class="keyword">this</span>.query.where = where</span><br><span class="line">    <span class="keyword">this</span>.fetch()</span><br><span class="line">    done()<span class="comment">//不然搜索框会灰</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在明确搜索就好了<br>现在开始写模糊搜索<br>在前面加上这个正则查询，就行了<br><img src="/images/pasted-200.png" alt="upload successful"><br>但是有个问题，如果我搜索个a不想模糊搜索而是精确搜索呢<br>可以去后端自己定义一个规则，这个不是avue用的，是自己用的<br><img src="/images/pasted-201.png" alt="upload successful"><br>完整方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> search(where, done) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> where) &#123;</span><br><span class="line">    <span class="keyword">const</span> field = <span class="keyword">this</span>.option.column.find(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> v.prop === k;</span><br><span class="line">    &#125;);<span class="comment">//过滤找到要搜索内容的那一项的数组内容</span></span><br><span class="line">    <span class="keyword">if</span>(field.regex)&#123;</span><br><span class="line">        <span class="comment">//判断后端加没加regex:true ,加了就模糊搜索，没加就精确搜索</span></span><br><span class="line">        where[k] = &#123; <span class="attr">$regex</span>: where[k] &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.query.where = where;</span><br><span class="line">  <span class="keyword">this</span>.fetch();</span><br><span class="line">  done(); <span class="comment">//不然搜索框会灰</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><p>avue版本腰围2.4.0,不然图片上传会有问题<br>之前图片上传的地方一直是个输入框，正常来说应该是个选择图片的框框<br>去后端加配置<br><img src="/images/pasted-202.png" alt="upload successful"><br><img src="/images/pasted-204.png" alt="upload successful"><br>这是前端就有图片框框了，但是点击上传是没反映的，<br>这里有个坑，要配置一下ajax<br><img src="/images/pasted-206.png" alt="upload successful"><br>这样前端添个图片就能发起post请求了<br>现在后端没有upload的路由所有会报404<br><img src="/images/pasted-207.png" alt="upload successful"><br>后端去加upload的路由（上传图片的前端工作就完成了，剩下全部是后端）</p>
]]></content>
      <categories>
        <category>ts</category>
      </categories>
      <tags>
        <tag>element</tag>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3.0 注册组件</title>
    <url>/2020/08/15/vue3-0-%E6%B3%A8%E5%86%8C%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>文件结构<br><img src="/images/pasted-267.png" alt="upload successful"></p>
<p>先在index.vue 中写组件的内容<br><img src="/images/pasted-268.png" alt="upload successful"></p>
<p>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> swiper <span class="keyword">from</span> <span class="string">'./swiper/index.vue'</span><span class="comment">//导入组件</span></span><br><span class="line"><span class="keyword">import</span> swiperItem <span class="keyword">from</span> <span class="string">'./swiper/item.vue'</span></span><br><span class="line"><span class="keyword">let</span> vueUI = &#123;&#125;</span><br><span class="line"><span class="comment">//install注册组件的方法，install和use是成对的</span></span><br><span class="line">vueUI.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>)</span>&#123;</span><br><span class="line">    Vue.component(swiper.name,swiper)<span class="comment">//第一个参数是组件名，第二个是组件的内容</span></span><br><span class="line">    Vue.component(swiperItem.name,swiperItem)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> vueUI</span><br></pre></td></tr></table></figure>

<p>去main.js中导入并use</p>
<p><img src="/images/pasted-269.png" alt="upload successful"></p>
]]></content>
  </entry>
  <entry>
    <title>vue合并对象</title>
    <url>/2020/05/24/vue%E5%90%88%E5%B9%B6%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>  合并对象<br>   <code>this.model = Object.assign({},this.model,res.data);</code><br>   3个值是 要改变的对象  合并对象1   合并对象2</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue使用wow和animate</title>
    <url>/2020/05/24/vue%E4%BD%BF%E7%94%A8wow%E5%92%8Canimate/</url>
    <content><![CDATA[<p>// wow<br>（1）通过npm安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install wowjs@1.1.3 --save-dev</span><br><span class="line">npm install animate.css@3.7.2 --save&#x2F;&#x2F;新的版本有些问题，这个版本目前可以用</span><br></pre></td></tr></table></figure>


<p>（2）在main.js中引入animate.css</p>
<p><code>import &#39;animate.css/animate.min.css&#39;</code></p>
<p>（3） 在App.vue里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; WOW &#125; <span class="keyword">from</span> <span class="string">"wowjs"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  watch: &#123;</span><br><span class="line">    $route(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> WOW(&#123;</span><br><span class="line">        <span class="comment">//写定时器是因为子组件还没渲染出来wow就执行完了，可能有更好的解决办法</span></span><br><span class="line">         setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">new</span> WOW(&#123;</span><br><span class="line">            live: <span class="literal">true</span>, <span class="comment">// 对异步加载的操作</span></span><br><span class="line">            offset: <span class="number">0</span>, <span class="comment">// 距底多少时触发动画</span></span><br><span class="line">            mobile: <span class="literal">false</span> <span class="comment">// 手机是否触发动画</span></span><br><span class="line">            scrollContainer: <span class="string">".layout-content"</span> <span class="comment">//放实际滚动的容器   一般不用填此项</span></span><br><span class="line">          &#125;).init();</span><br><span class="line">        &#125;,<span class="number">100</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>（4）在页面里正常用就行了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"wow zoomIn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:to</span>=<span class="string">"&#123; path: item.tolink &#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tag</span>=<span class="string">"li"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"item in nav"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"item.id"</span></span></span><br><span class="line"><span class="tag">  &gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> （5）组件里要这么用<br>在组件需要的地方引入wowjs</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"caselist"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"wow slideInUp"</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in cases"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/ecmascript-6"</span>&gt;</span><br><span class="line">  <span class="keyword">import</span> &#123;WOW&#125; <span class="keyword">from</span> <span class="string">'wowjs'</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"></span><br><span class="line">      mounted() &#123;</span><br><span class="line">        <span class="comment">// 在项目加载完成之后初始化wow</span></span><br><span class="line">        <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> wow = <span class="keyword">new</span> WOW(&#123;</span><br><span class="line">            live: <span class="literal">false</span></span><br><span class="line">          &#125;);</span><br><span class="line">          wow.init();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue媒体查询失败</title>
    <url>/2020/05/24/vue%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"user-scalable=0,width=device-width, initial-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue开发环境跨越</title>
    <url>/2020/05/24/vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E8%B7%A8%E8%B6%8A/</url>
    <content><![CDATA[<p>新建vue.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">      proxy: &#123;</span><br><span class="line">        <span class="string">'/api'</span>: &#123;</span><br><span class="line">          target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">          changeOrigin: <span class="literal">true</span>,</span><br><span class="line">          pathRewrite:&#123;</span><br><span class="line">            <span class="string">''</span>:<span class="string">''</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>js</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>vue + swiper缩略图控制</title>
    <url>/2020/07/22/vue-swiper%E7%BC%A9%E7%95%A5%E5%9B%BE%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"model.loopImg.length&gt;0"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- swiper1 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper</span> <span class="attr">:options</span>=<span class="string">"swiperOptionTop"</span> <span class="attr">class</span>=<span class="string">"gallery-top"</span> <span class="attr">ref</span>=<span class="string">"swiperTop"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper-slide</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in model.loopImg"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">:src</span>=<span class="string">"item"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- swiper2 Thumbs --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper</span> <span class="attr">:options</span>=<span class="string">"swiperOptionThumbs"</span> <span class="attr">class</span>=<span class="string">"gallery-thumbs"</span> <span class="attr">ref</span>=<span class="string">"swiperThumbs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper-slide</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in model.loopImg"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">:src</span>=<span class="string">"item"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    isInit :<span class="number">1</span>,</span><br><span class="line">    swiperOptionTop: &#123;</span><br><span class="line">      spaceBetween: <span class="number">10</span>,</span><br><span class="line">      loop: <span class="literal">true</span>,</span><br><span class="line">      loopedSlides: <span class="number">5</span>, <span class="comment">//looped slides should be the same</span></span><br><span class="line">    &#125;,</span><br><span class="line">    swiperOptionThumbs: &#123;</span><br><span class="line">      spaceBetween: <span class="number">10</span>,</span><br><span class="line">      slidesPerView: <span class="number">4</span>,</span><br><span class="line">      touchRatio: <span class="number">0.2</span>,</span><br><span class="line">      loop: <span class="literal">true</span>,</span><br><span class="line">      loopedSlides: <span class="number">5</span>, <span class="comment">//looped slides should be the same</span></span><br><span class="line">      slideToClickedSlide: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line">  updated () &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.isInit === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!!<span class="keyword">this</span>.model.loopImg) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> swiperTop = <span class="keyword">this</span>.$refs.swiperTop.swiper;</span><br><span class="line">        <span class="keyword">const</span> swiperThumbs = <span class="keyword">this</span>.$refs.swiperThumbs.swiper;</span><br><span class="line">        swiperTop.controller.control = swiperThumbs;</span><br><span class="line">        swiperThumbs.controller.control = swiperTop;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">this</span>.isInit = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>参考链接<a href="https://www.jianshu.com/p/4cf2d6105be4" target="_blank" rel="noopener">https://www.jianshu.com/p/4cf2d6105be4</a></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>swiper</tag>
      </tags>
  </entry>
  <entry>
    <title>vue打包后本地查看</title>
    <url>/2020/05/24/vue%E6%89%93%E5%8C%85%E5%90%8E%E6%9C%AC%E5%9C%B0%E6%9F%A5%E7%9C%8B/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install http-server -g</span><br></pre></td></tr></table></figure>
<p>到目录终端http-server -c-1</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue具名插槽</title>
    <url>/2020/05/24/vue%E5%85%B7%E5%90%8D%E6%8F%92%E6%A7%BD/</url>
    <content><![CDATA[<p>父</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">CardList</span> <span class="attr">title</span>=<span class="string">"新闻资讯"</span> <span class="attr">:categorise</span>=<span class="string">"newsdata"</span>&gt;</span>//传入的数据</span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">items</span>=<span class="string">"&#123;categorise&#125;"</span>&gt;</span>//从子组件获取到的处理过数据</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex mt-3 font-md color-333"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in categorise.newsList"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>[&#123;&#123;item.Catname&#125;&#125;]<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>丨<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"flex-1"</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.date&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">CardList</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">class</span>=<span class="string">"mt-2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-slide</span> <span class="attr">v-for</span>=<span class="string">"(v,i) in categorise"</span> <span class="attr">:key</span>=<span class="string">"i"</span>&gt;</span></span><br><span class="line">  //具名插槽 name是要跟外面#items对应的</span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"items"</span> <span class="attr">:categorise</span>=<span class="string">"v"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue数据改变页面不更新</title>
    <url>/2020/07/20/vue%E6%95%B0%E6%8D%AE%E6%94%B9%E5%8F%98%E9%A1%B5%E9%9D%A2%E4%B8%8D%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<p>原因主要是js的限制，用数组[索引值]的方式更新数据，或者改变数组长度时会出现问题就用以下的方法</p>
<p>给对象赋值的方法</p>
<p><code>this.$set(Object,key,value)</code></p>
<p>//Object:目标对象，key:属性名称，value：属性值</p>
<p>给数组赋值的方法</p>
<p><code>this.$set(Array,index,value)</code></p>
<p>//Array:目标数组，index:元素的索引，value：值</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue新窗空打卡链接</title>
    <url>/2020/05/24/vue%E6%96%B0%E7%AA%97%E7%A9%BA%E6%89%93%E5%8D%A1%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<p>新窗口打开外链接 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.open(url,&#39;_blank&#39;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue本地图片路径</title>
    <url>/2020/05/24/vue%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<p>需要重定向<br>imgsrc2: require(‘../assets/logo4.png’) 图片路径</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue格式化日期</title>
    <url>/2020/05/24/vue%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F/</url>
    <content><![CDATA[<p> <code>npm i dayjs</code></p>
<p>引入 <code>import dayjs from &quot;dayjs&quot;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.createdAt | Data&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">filters:&#123;</span><br><span class="line">    <span class="built_in">Date</span>(val)&#123;</span><br><span class="line">      <span class="comment">//两位数的月份，两位数的日期</span></span><br><span class="line">      <span class="keyword">return</span> dayjs(val).format(<span class="string">'MM/DD'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue滚动到某处执行</title>
    <url>/2020/05/24/vue%E6%BB%9A%E5%8A%A8%E5%88%B0%E6%9F%90%E5%A4%84%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<p>获取元素距顶的高</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;&quot; ref&#x3D;&quot;cs&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">this.$refs.cs.getBoundingClientRect().top</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">toscoll() &#123;</span><br><span class="line">    this.gao &#x3D; this.$refs.cs.getBoundingClientRect().top;</span><br><span class="line">    console.log(this.gao);</span><br><span class="line">    if(this.gao&lt;&#x3D;600)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">mounted() &#123;</span><br><span class="line">  window.addEventListener(&#39;scroll&#39;, this.toscoll)&#x2F;&#x2F;启动</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F;销毁</span><br><span class="line">  destroyed()&#123;</span><br><span class="line">   window.removeEventListener(&quot;scroll&quot;, this.toscroll);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue点击回顶部</title>
    <url>/2020/05/24/vue%E7%82%B9%E5%87%BB%E5%9B%9E%E9%A1%B6%E9%83%A8/</url>
    <content><![CDATA[<p>//同页面点击瞬间回到顶部<br> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.scrollTop = <span class="built_in">document</span>.documentElement.scrollTop = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><br>//点击路由回到顶部(瞬间)<br>main.js里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">router.afterEach((to,from,next) &#x3D;&gt; &#123;</span><br><span class="line">  window.scrollTo(0,0);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>//回到顶部(有过渡)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">goUp() &#123;</span><br><span class="line">      let nowTop &#x3D;</span><br><span class="line">        document.body.scrollTop || document.documentElement.scrollTop; &#x2F;&#x2F; 获取当前滚动条位置</span><br><span class="line">      if (nowTop &gt; 0) &#123;</span><br><span class="line">        window.requestAnimationFrame(this.goUp);</span><br><span class="line">        window.scrollTo(0, nowTop - nowTop &#x2F; 5);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue父子通信</title>
    <url>/2020/05/24/vue%E7%88%B6%E5%AD%90%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<p>//路由传参 父==&gt;子<br>父</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">  path: a + <span class="string">"/bookShow/"</span> + bookId,</span><br><span class="line">  query: &#123; <span class="attr">bookId</span>: bookId &#125;</span><br><span class="line">&#125;);</span><br><span class="line">或</span><br><span class="line">在router中</span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/heros/edit/:id'</span>,</span><br><span class="line">  name: <span class="string">'HeroEdit'</span>,</span><br><span class="line">  component: HeroEdit,</span><br><span class="line">  props:<span class="literal">true</span> <span class="comment">//这句</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.bookId = <span class="keyword">this</span>.$route.query.bookId;</span><br><span class="line">或</span><br><span class="line">props:[] <span class="comment">//直接能拿到</span></span><br></pre></td></tr></table></figure>

<p> //子 ==》 父传参<br>子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div @click&#x3D;&quot;active&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">data:activeMenu...</span><br><span class="line"> methods: &#123;</span><br><span class="line">   active() &#123;</span><br><span class="line">     this.activeMenu &#x3D; !this.activeMenu;</span><br><span class="line">     this.$emit(&quot;active&quot;, this.activeMenu);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>父</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Header @active&#x3D;&quot;active&quot; &#x2F;&gt;</span><br><span class="line"> data:activeMenu...</span><br><span class="line">  methods: &#123;</span><br><span class="line">    active(data) &#123;</span><br><span class="line">      this.activeMenu &#x3D; data;</span><br><span class="line">      console.log(this.activeMenu);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue省事模拟数据的方法</title>
    <url>/2020/05/24/vue%E7%9C%81%E4%BA%8B%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<pre><code>newsdata:[
  {
    name:&quot;热门&quot;,
    newsList:new Array(5).fill({}).map(()=&gt;({
        Catname:&quot;公告&quot;,
        title:&quot;未成年人防沉迷新规接入公告&quot;,
        date:&quot;09/21&quot;
    }))
  }
],</code></pre>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue省略页数</title>
    <url>/2020/05/24/vue%E7%9C%81%E7%95%A5%E9%A1%B5%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v-if&#x3D;&quot;pageActive-2&lt;&#x3D;index&amp;&amp;index&lt;&#x3D;(pageActive+2&lt;5?5:pageActive+2)&quot;</span><br></pre></td></tr></table></figure>
<p>5页例子<br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"pageActive&gt;2"</span> <span class="attr">class</span>=<span class="string">"sl"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"toPage(index)"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">"&#123;active:index===pageActive&#125;"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"(item,index) in ye"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-if</span>=<span class="string">"pageActive-2&lt;=index&amp;&amp;index&lt;=(pageActive+2&lt;5?5:pageActive+2)"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"ye"</span></span></span><br><span class="line"><span class="tag">    &gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"pageActive&lt;ye-3"</span> <span class="attr">class</span>=<span class="string">"sl"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue详情页不缓存(keep-alive)</title>
    <url>/2020/05/24/vue%E8%AF%A6%E6%83%85%E9%A1%B5%E4%B8%8D%E7%BC%93%E5%AD%98-keep-alive/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">"$route.meta.keepAlive"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">"!$route.meta.keepAlive"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue路由懒加载</title>
    <url>/2020/05/24/vue%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import Home from '../views/Home.vue'</span></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/Home.vue'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue返回上一页</title>
    <url>/2020/05/24/vue%E8%BF%94%E5%9B%9E%E4%B8%8A%E4%B8%80%E9%A1%B5/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.go(<span class="number">-1</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue里props写法</title>
    <url>/2020/05/24/vue%E9%87%8Cprops%E5%86%99%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">	dataList:Array,</span><br><span class="line">	itemWidth:&#123;</span><br><span class="line">		type:String,</span><br><span class="line">		default:&quot;375rpx&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue阻止默认表单提交与简单正则</title>
    <url>/2020/05/24/vue%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E4%B8%8E%E7%AE%80%E5%8D%95%E6%AD%A3%E5%B8%B8/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form v-on:submit.prevent&#x3D;&quot;tj&quot;&gt; 阻止提交页面刷新 并执行 tj()方法 form里写</span><br></pre></td></tr></table></figure>
<p> @submit.native.prevent=”save”<br> 提交    原生    阻止<br>//获取dom元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"您的电话"</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span> <span class="attr">id</span> <span class="attr">ref</span>=<span class="string">"tel"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"tj"</span> <span class="attr">value</span>=<span class="string">"提交留言"</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tj() &#123;</span><br><span class="line">  <span class="keyword">var</span> tel = <span class="keyword">this</span>.$refs.tel.value;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="keyword">this</span>.$refs.name.value;</span><br><span class="line">  <span class="keyword">var</span> text = <span class="keyword">this</span>.$refs.text.value;</span><br><span class="line">  <span class="keyword">if</span> (name == <span class="string">""</span>) &#123;</span><br><span class="line">    alert(<span class="string">"姓名不能为空"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tel == <span class="string">""</span>) &#123;</span><br><span class="line">    alert(<span class="string">"手机号不能为空"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (text == <span class="string">""</span>) &#123;</span><br><span class="line">    alert(<span class="string">"留言内容不能为空"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="regexp">/^1[3456789]\d&#123;9&#125;$/</span>.test(tel)) &#123;</span><br><span class="line">    alert(<span class="string">"手机号格式不正确"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(name,tel,text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue打包前改路径</title>
    <url>/2020/05/24/vue%E6%89%93%E5%8C%85%E5%89%8D%E6%94%B9%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<p>打包前<br>开发环境变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> http = axios.create(&#123;</span><br><span class="line">    <span class="comment">// baseURL: "http://localhost:3000/admin/api"</span></span><br><span class="line">    baseURL: process.env.VUE_APP_API_URL || <span class="string">"/admin/api"</span></span><br><span class="line">    <span class="comment">//      process.env.VUE_APP是固定的</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>建个.env.development文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">VUE_APP_API_URL = http:<span class="comment">//localhost:3000/admin/api</span></span><br></pre></td></tr></table></figure>


<p>vue.config.js里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    outputDir : __dirname +<span class="string">"/../server/admin"</span>,<span class="comment">//编译到的目录</span></span><br><span class="line">    <span class="comment">//判断是否是生产环境是的话加/admin前缀</span></span><br><span class="line">    publicPath:process.env.NODE_ENV === <span class="string">"production"</span></span><br><span class="line">    ? <span class="string">"/admin/"</span></span><br><span class="line">    : <span class="string">'/'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack初体验</title>
    <url>/2020/06/12/webpack%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install webpack webpack-cli -g &#x2F;&#x2F;安装webpack和cli</span><br></pre></td></tr></table></figure>

<h2 id="新建文件夹"><a href="#新建文件夹" class="headerlink" title="新建文件夹"></a>新建文件夹</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init -y  &#x2F;&#x2F;可以初始化一个package.json</span><br></pre></td></tr></table></figure>
<h2 id="之后在此文件夹安装webpack"><a href="#之后在此文件夹安装webpack" class="headerlink" title="之后在此文件夹安装webpack"></a>之后在此文件夹安装webpack</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install webpack webpack-cli --save-dev  &#x2F;&#x2F;保存到开发模式</span><br></pre></td></tr></table></figure>

<h2 id="安装好后就能在配置里看见了"><a href="#安装好后就能在配置里看见了" class="headerlink" title="安装好后就能在配置里看见了"></a>安装好后就能在配置里看见了</h2><p><img src="/images/pasted-15.png" alt="upload successful"></p>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>1.先随便写点东西<br>2.开发模式下的打包(有注释和换行)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack .&#x2F;src&#x2F;index.js -o .&#x2F;dist&#x2F;bundle.js --mode&#x3D;development</span><br></pre></td></tr></table></figure>
<p><code>./src/index.js是入口文件</code><br><code>-o ./dist/bundle.js是指定输出的文件路径</code><br><code>--mode=development表示开发模式</code><br>3.生产模式下打包(压缩代码)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack .&#x2F;src&#x2F;index.js -o .&#x2F;dist&#x2F;bundle_s.js --mode&#x3D;production</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack热更新</title>
    <url>/2020/06/14/webpack%E7%83%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h2 id="全局安装-webpack-dev-server"><a href="#全局安装-webpack-dev-server" class="headerlink" title="全局安装 webpack-dev-server"></a>全局安装 webpack-dev-server</h2><p><code>cnpm i webpack-dev-server -g</code></p>
<h2 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 热更新</span></span><br><span class="line">devServer:&#123;</span><br><span class="line">    <span class="comment">//设置项目构建的路径</span></span><br><span class="line">    contentBase:path.resolve(__dirname,<span class="string">"dist"</span>),</span><br><span class="line">    <span class="comment">//启动gzip压缩，让浏览器可以更快的打开</span></span><br><span class="line">    compress:<span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//能够看见实时更新的端口号</span></span><br><span class="line">    port:<span class="number">3000</span>,</span><br><span class="line">    <span class="comment">//是否自动打开浏览器</span></span><br><span class="line">    open:<span class="literal">true</span>   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-23.png" alt="upload successful"></p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><code>webpack-dev-server</code></p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>修改vue路由默认区分方式</title>
    <url>/2020/05/24/%E4%BF%AE%E6%94%B9vue%E8%B7%AF%E7%94%B1%E9%BB%98%E8%AE%A4%E5%8C%BA%E5%88%86%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>   用路由的地址区分，默认是组件<br>   <code>&lt;router-view :key=&quot;$route.path&quot;&gt;&lt;/router-view&gt;</code></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue安装与创建</title>
    <url>/2020/05/24/vue%E6%8C%89%E7%85%A7%E4%B8%8E%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<p>安装vue cli3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g @vue&#x2F;cli</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue create 名字    --创建文件</span><br></pre></td></tr></table></figure>
<p>第二个之后选 1.babel  4.router  5.vuex  6.css<br>      save this 选no</p>
<p>1、vue create 搭建新项目</p>
<p>vue create <Project Name> //文件名 不支持驼峰（含大写字母）<br>具体操作如下：</p>
<p>首先，会提示你选择一个preset（预设）：</p>
<p>① 除最后两个，其他选项都是你此前保存的预设配置</p>
<p>如果没有配置保存过，则只有以下两个选项：</p>
<p>② default（babel，eslint）：</p>
<p>默认设置（直接enter）非常适合快速创建一个新项目的原型，没有带任何辅助功能的 npm包</p>
<p>③ Manually select features：</p>
<p>手动配置（按方向键 ↓）是我们所需要的面向生产的项目，提供可选功能的 npm 包</p>
<p>手动配置，根据你需要用方向键选择（按 “空格键”选择/取消选择，A键全选/取消全选）对应功能</p>
<p>简介：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line">&gt;( ) Babel                           &#x2F;&#x2F;转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。                      </span><br><span class="line"> ( ) TypeScript&#x2F;&#x2F; TypeScript是一个JavaScript（后缀.js）的超集（后缀.ts）包含并扩展了 JavaScript 的语法，需要被编译输出为 JavaScript在浏览器运行，目前较少人再用</span><br><span class="line"> ( ) Progressive Web App (PWA) Support&#x2F;&#x2F; 渐进式Web应用程序</span><br><span class="line"> ( ) Router                           &#x2F;&#x2F; vue-router（vue路由）</span><br><span class="line"> ( ) Vuex                             &#x2F;&#x2F; vuex（vue的状态管理模式）</span><br><span class="line"> ( ) CSS Pre-processors               &#x2F;&#x2F; CSS 预处理器（如：less、sass）</span><br><span class="line"> ( ) Linter &#x2F; Formatter               &#x2F;&#x2F; 代码风格检查和格式化（如：ESlint）</span><br><span class="line"> ( ) Unit Testing                     &#x2F;&#x2F; 单元测试（unit tests）</span><br><span class="line"> ( ) E2E Testing                      &#x2F;&#x2F; e2e（end to end） 测试</span><br></pre></td></tr></table></figure>
<p>选择完后直接enter，然后会提示你选择对应功能的具体工具包，选择自己擅长或者使用广泛的（方便遇到问题时百度），简介如下：</p>
<p>①是否使用history router：</p>
<p><img src="/images/pasted-26.png" alt="upload successful"><br>Vue-Router 利用了浏览器自身的hash 模式和 history 模式的特性来实现前端路由（通过调用浏览器提供的接口）</p>
<p>hash： 浏览器url址栏 中的 # 符号（如这个 URL：<a href="http://www.abc.com/#/hello，hash" target="_blank" rel="noopener">http://www.abc.com/#/hello，hash</a> 的值为“ #/hello”），hash 不被包括在 HTTP 请求中（对后端完全没有影响），因此改变 hash 不会重新加载页面</p>
<p>history：利用了 HTML5 History Interface 中新增的 pushState( ) 和 replaceState( ) 方法（需要特定浏览器支持）。单页客户端应用，history mode 需要后台配置支持（详细参见：<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html）" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/essentials/history-mode.html）</a></p>
<p>② css预处理器</p>
<p>主要为css解决浏览器兼容、简化CSS代码 等问题（*<u style="box-sizing: inherit;"> Sass诞生于2007年，最早也是最成熟的一款CSS预处理器语言。</u>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Router, Vuex, CSS Pre-processors, Linter, Unit</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default):</span><br><span class="line">&gt; SCSS&#x2F;SASS  &#x2F;&#x2F;Sass安装需要Ruby环境，是在服务端处理的，SCSS 是 Sass3新语法（完全兼容 CSS3且继承Sass功能）</span><br><span class="line">  LESS       &#x2F;&#x2F;Less最终会通过编译处理输出css到浏览器，Less 既可以在客户端上运行，也可在服务端运行 (借助 Node.js)</span><br><span class="line">  Stylus     &#x2F;&#x2F;Stylus主要用来给Node项目进行CSS预处理支持，Stylus功能上更为强壮，和js联系更加紧密，可创建健壮的、动态的的CSS。</span><br><span class="line">③ ESLint：</span><br></pre></td></tr></table></figure>
<p>提供一个插件化的javascript代码检测工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? Pick a linter &#x2F; formatter config: (Use arrow keys)</span><br><span class="line">&gt; ESLint with error prevention only</span><br><span class="line">  ESLint + Airbnb config</span><br><span class="line">  ESLint + Standard config</span><br><span class="line">  ESLint + Prettier         &#x2F;&#x2F;使用较多</span><br></pre></td></tr></table></figure>
<p>④ 何时检测：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line">&gt;( ) Lint on save                    &#x2F;&#x2F; 保存就检测</span><br><span class="line"> ( ) Lint and fix on commit          &#x2F;&#x2F; fix和commit时候检查</span><br></pre></td></tr></table></figure>
<p>⑤ 单元测试 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? Pick a unit testing solution: (Use arrow keys)</span><br><span class="line">&gt; Mocha + Chai  &#x2F;&#x2F;mocha灵活,只提供简单的测试结构，如果需要其他功能需要添加其他库&#x2F;插件完成。必须在全局环境中安装</span><br><span class="line">  Jest          &#x2F;&#x2F;安装配置简单，容易上手。内置Istanbul，可以查看到测试覆盖率，相较于Mocha:配置简洁、测试代码简洁、易于和babel集成、内置丰富的expect</span><br></pre></td></tr></table></figure>
<p>⑥ 如何存放配置 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? (Use arrow keys)</span><br><span class="line">&gt; In dedicated config files &#x2F;&#x2F; 独立文件放置</span><br><span class="line">  In package.json &#x2F;&#x2F; 放package.json里</span><br></pre></td></tr></table></figure>
<p>⑦ 是否保存本次配置（之后可以直接使用）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? Save this as a preset for future projects? (Y&#x2F;n) &#x2F;&#x2F; y:记录本次配置，然后需要你起个名; n：不记录本次配置</span><br></pre></td></tr></table></figure>
<p>链接：<a href="https://www.jianshu.com/p/72c3da7b013c" target="_blank" rel="noopener">https://www.jianshu.com/p/72c3da7b013c</a></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>倒计时</title>
    <url>/2020/05/24/%E5%80%92%E8%AE%A1%E6%97%B6/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>倒计时已结束<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"span_dt_dt"</span> <span class="attr">style</span>=<span class="string">'border:1px solid black;background-color:#FFFFFF'</span> &gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;SCRIPT language=javascript&gt;</span><br><span class="line">&lt;!--</span><br><span class="line"><span class="comment">//document.write("");</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_time</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">window</span>.setTimeout(<span class="string">"show_time()"</span>, <span class="number">1000</span>);</span><br><span class="line">BirthDay=<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"00-00-0000"</span>);<span class="comment">//改成你的计时日期</span></span><br><span class="line">today=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">timeold=(BirthDay.getTime()-today.getTime());</span><br><span class="line">sectimeold=timeold/<span class="number">1000</span></span><br><span class="line">secondsold=<span class="built_in">Math</span>.floor(sectimeold);</span><br><span class="line">msPerDay=<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span></span><br><span class="line">e_daysold=timeold/msPerDay</span><br><span class="line">daysold=<span class="built_in">Math</span>.floor(e_daysold);</span><br><span class="line">e_hrsold=(e_daysold-daysold)*<span class="number">24</span>;</span><br><span class="line">hrsold=<span class="built_in">Math</span>.floor(e_hrsold);</span><br><span class="line">e_minsold=(e_hrsold-hrsold)*<span class="number">60</span>;</span><br><span class="line">minsold=<span class="built_in">Math</span>.floor((e_hrsold-hrsold)*<span class="number">60</span>);</span><br><span class="line">seconds=<span class="built_in">Math</span>.floor((e_minsold-minsold)*<span class="number">60</span>);</span><br><span class="line">span_dt_dt.innerHTML=daysold+<span class="string">"天"</span>+hrsold+<span class="string">"小时"</span>+minsold+<span class="string">"分"</span>+seconds+<span class="string">"秒"</span> ;</span><br><span class="line">&#125;</span><br><span class="line">show_time();</span><br><span class="line"><span class="comment">//--&gt;</span></span><br><span class="line">&lt;<span class="regexp">/SCRIPT&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>兼容前缀</title>
    <url>/2020/05/24/%E5%85%BC%E5%AE%B9%E5%89%8D%E7%BC%80/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-</span>     兼容      <span class="selector-tag">Safari</span>  <span class="selector-tag">Chrome</span></span><br><span class="line"><span class="selector-tag">-moz-</span>        兼容       <span class="selector-tag">Firefox</span></span><br><span class="line"><span class="selector-tag">-ms-</span>          兼容       <span class="selector-tag">IE</span></span><br><span class="line"><span class="selector-tag">-0-</span>             兼容       <span class="selector-tag">Opera</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>去掉number后面的箭头</title>
    <url>/2020/05/24/%E5%8E%BB%E6%8E%89number%E5%90%8E%E9%9D%A2%E7%9A%84%E7%AE%AD%E5%A4%B4/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-outer-spin-button</span>,</span><br><span class="line">  <span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-inner-spin-button</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">"number"</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">-moz-appearance</span>: textfield;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack配置文件打包</title>
    <url>/2020/06/14/webpack%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<h2 id="新建webpack-config-js"><a href="#新建webpack-config-js" class="headerlink" title="新建webpack.config.js"></a>新建webpack.config.js</h2><h2 id="写配置信息"><a href="#写配置信息" class="headerlink" title="写配置信息"></a>写配置信息</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)<span class="comment">//导入path</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//入口文件</span></span><br><span class="line">    entry:<span class="string">'./src/index.js'</span>,</span><br><span class="line">    <span class="comment">//出口文件</span></span><br><span class="line">    output:&#123;</span><br><span class="line">        <span class="comment">//输出的文件名</span></span><br><span class="line">        filename:<span class="string">"bundle.js"</span>,</span><br><span class="line">        <span class="comment">//输出的路径  绝对路径  这句意思就是当前目录下的dist文件夹</span></span><br><span class="line">        path:path.resolve(__dirname,<span class="string">"dist"</span>)<span class="comment">//获取当前目录</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//模式  开发development/生产production</span></span><br><span class="line">    mode:<span class="string">"development"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="打包-直接webpack即可"><a href="#打包-直接webpack即可" class="headerlink" title="打包 - 直接webpack即可"></a>打包 - 直接webpack即可</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>创建本地git仓库完成版本控制</title>
    <url>/2020/05/26/%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0git%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h3 id="初始"><a href="#初始" class="headerlink" title="初始"></a>初始</h3><p>创建本地git仓库，初始化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git init &#x2F;&#x2F;会生成一个隐藏文件夹git</span><br></pre></td></tr></table></figure>
<h3 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h3><p>可以在文件夹中新建几个文件之后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status&#x2F;&#x2F;查看文件状态</span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-59.png" alt="upload successful"><br>红框是未追踪的文件<br>git提示用add提交到暂存区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add xxx  &#x2F;&#x2F;将xxx提交到暂存区</span><br><span class="line">$ git add . 或者 -A   &#x2F;&#x2F;将所有最新修改的文件都提交到暂存区</span><br><span class="line">$ git restore XXX &#x2F;&#x2F;将XXX文件撤回修改</span><br><span class="line">$ git diff &#x2F;&#x2F;查看修改后不同的地方</span><br><span class="line">$ git restore --staged XXX &#x2F;&#x2F;将提交到暂存区的文件撤回（和add反着来）</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-60.png" alt="upload successful"><br>现在将index.css提了上去<br>绿色就代表已追踪到的修改后的文件了，但是还没提交到历史区<br>这时先把index.css修改一下之后再看状态</p>
<p><img src="/images/pasted-61.png" alt="upload successful"><br>它红色提示了modified,index.css已经被修改了<br>他上边提示了用add来提交这次修改，或者restore来撤回这次修改</p>
<p>提交之后再看下状态，就没问题了，之后就可以准备提交到历史区了<br><img src="/images/pasted-62.png" alt="upload successful"></p>
<p>restore撤销修改<br><img src="/images/pasted-69.png" alt="upload successful"><br>可以用diff查看修改后的区别<br><img src="/images/pasted-71.png" alt="upload successful"><br>把这次提交到暂存区的文件取消<br><img src="/images/pasted-75.png" alt="upload successful"></p>
<h3 id="历史区"><a href="#历史区" class="headerlink" title="历史区"></a>历史区</h3><p>把暂存区内容提交到历史区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m&#39;这里写描述信息&#39;</span><br><span class="line">$ git log  &#x2F;&#x2F;查看历史版本信息</span><br><span class="line">$ git reflog &#x2F;&#x2F;查看历史版本信息(包含回滚的信息)</span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-63.png" alt="upload successful"><br>现在把文件都提上去了，再看看git的状态</p>
<p><img src="/images/pasted-64.png" alt="upload successful"><br>就提示说目前没有任何修改了（工作区和暂存区一样没有区别）<br>刚才我又随便提交到了历史区一遍<br>现在用log看看版本信息<br><img src="/images/pasted-65.png" alt="upload successful"><br>git reflog的样子<br><img src="/images/pasted-66.png" alt="upload successful"><br>将历史区的文件回滚到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard xxxxxxxxxxxxxxxx   &#x2F;&#x2F;xxx是要回退的版本号前7位就行</span><br><span class="line">$ git reset --hard HEAD^ &#x2F;&#x2F;回退到上个版本,几个^就是回退几个版本^^^就是3个</span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-67.png" alt="upload successful"><br>这样就回退到上个版本了，本地的文件也直接替换了</p>
<p><img src="/images/pasted-68.png" alt="upload successful"><br>回滚到某一版本号</p>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>当我们需要删除暂存区或分支上的文件, 同时工作区也不需要这个文件了, 可以使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm 文件名</span><br><span class="line">git commit -m &#39;delete somefile&#39;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>现在删除index.html<br><img src="/images/pasted-76.png" alt="upload successful"><br>他提示说index.html已经被删了<br>之后用rm删除<br><img src="/images/pasted-77.png" alt="upload successful"><br>如果只是想把index.html拿回来就只能版本回退了</p>
<p>当我们需要删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制, 可以使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm --cached 文件名</span><br><span class="line">git commit -m &#39;delete remote somefile&#39;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>取消代码检查</title>
    <url>/2020/06/21/%E5%8F%96%E6%B6%88%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* eslint-disable *&#x2F;  &#x2F;&#x2F;整个下面块不检查</span><br><span class="line">&#x2F;&#x2F; eslint-disable-next-line  下一行不检查</span><br><span class="line">import React, &#123;Component&#125; from &#39;react&#39;;  &#x2F;&#x2F; eslint-disable-line   本行不检查</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序一键拨号</title>
    <url>/2020/08/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%80%E9%94%AE%E6%8B%A8%E5%8F%B7/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"default"</span> <span class="attr">bindtap</span>=<span class="string">"calling"</span>&gt;</span>拨打电话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">calling: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">    wx.makePhoneCall(&#123;</span><br><span class="line"> </span><br><span class="line">        phoneNumber: <span class="string">'***************'</span>,</span><br><span class="line"> </span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"拨打电话成功！"</span>)</span><br><span class="line"> </span><br><span class="line">        &#125;,</span><br><span class="line"> </span><br><span class="line">        fail: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"拨打电话失败！"</span>)</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;)</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序上拉刷新，下拉加载</title>
    <url>/2020/06/07/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8A%E6%8B%89%E5%88%B7%E6%96%B0%EF%BC%8C%E4%B8%8B%E6%8B%89%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="下拉加载"><a href="#下拉加载" class="headerlink" title="下拉加载"></a>下拉加载</h2><p>onReachBottom（生命周期）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onReachBottom()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="上拉刷新"><a href="#上拉刷新" class="headerlink" title="上拉刷新"></a>上拉刷新</h2><p>1.在要开启上拉刷新的页面的.json文件里开启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;enablePullDownRefresh&quot;: true,&#x2F;&#x2F;开启上拉功能</span><br><span class="line"> &quot;backgroundTextStyle&quot;: &quot;dark&quot;&#x2F;&#x2F;loading样式</span><br></pre></td></tr></table></figure>
<p>2.用上拉的生命周期onPullDownRefresh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onPullDownRefresh()&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;提前关闭微信下拉的loading，在必要位置使用</span><br><span class="line">wx.stopPullDownRefresh()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序不授权获取头像</title>
    <url>/2020/06/14/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8D%E6%8E%88%E6%9D%83%E8%8E%B7%E5%8F%96%E5%A4%B4%E5%83%8F/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;open-data type&#x3D;&quot;userAvatarUrl&quot;&gt;&lt;&#x2F;open-data&gt;  </span><br><span class="line">&lt;open-data type&#x3D;&quot;userNickName&quot; lang&#x3D;&quot;zh_CN&quot;&gt;&lt;&#x2F;open-data&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-24.png" alt="upload successful"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">open-type</span>=<span class="string">'getUserInfo'</span> <span class="attr">lang</span>=<span class="string">"zh_CN"</span> <span class="attr">bindgetuserinfo</span>=<span class="string">"onGotUserInfo"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onGotUserInfo: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"nickname="</span> + e.detail.userInfo.nickName);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>可以在点击按钮时触发获取用户信息的方法同时再执行onGotUserInfo</p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>vue后台富文本</title>
    <url>/2020/05/24/vue%E5%90%8E%E5%8F%B0%E5%AF%8C%E6%96%87%E6%9C%AC/</url>
    <content><![CDATA[<p><code>npm install --save vue2-editor</code><br>之后引入<br><code>import { VueEditor } from &#39;vue2-editor&#39;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">components:&#123;</span><br><span class="line">    VueEditor</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"详情"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">vue-editor</span> <span class="attr">v-model</span>=<span class="string">"model.body"</span>&gt;</span><span class="tag">&lt;/<span class="name">vue-editor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>自己上传图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">vue-editor</span> <span class="attr">useCustomImageHandler</span> @<span class="attr">image-added</span>=<span class="string">"handleImageAdded"</span> <span class="attr">v-model</span>=<span class="string">"model.body"</span>&gt;</span><span class="tag">&lt;/<span class="name">vue-editor</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="keyword">async</span> handleImageAdded(file, Editor, cursorLocation, resetUploader) &#123;</span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">    formData.append(<span class="string">"file"</span>, file);</span><br><span class="line">            <span class="comment">//字段名,可以随便改，el好像是file</span></span><br><span class="line">    <span class="keyword">const</span> res =<span class="keyword">await</span> <span class="keyword">this</span>.$http.post(<span class="string">"/upload"</span>,formData)</span><br><span class="line">    Editor.insertEmbed(cursorLocation, <span class="string">"image"</span>, res.data.url);</span><br><span class="line">    resetUploader();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序动画</title>
    <url>/2020/05/24/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"usermotto"</span> <span class="attr">animation</span>=<span class="string">"&#123;&#123;an&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>  <span class="attr">class</span>=<span class="string">"user-motto &#123;&#123;gaoliang?'active':''&#125;&#125;"</span>&gt;</span>&#123;&#123;motto&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-name</span>=<span class="string">"5"</span> <span class="attr">bindtap</span>=<span class="string">"al"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">al(el)&#123;</span><br><span class="line">  <span class="keyword">var</span> animation = wx.createAnimation(&#123;</span><br><span class="line">    duration: <span class="number">4000</span>,</span><br><span class="line">    timingFunction: <span class="string">'ease'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  animation.opacity(<span class="number">0.2</span>).translate(<span class="number">100</span>, <span class="number">-100</span>).step()</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    name: el.currentTarget.dataset.name,</span><br><span class="line">    gaoliang:<span class="literal">true</span>,</span><br><span class="line">    an: animation.export()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序全局样式</title>
    <url>/2020/05/31/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E5%B1%80%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<p>app.wxss里定义全局颜色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">page</span>&#123;</span><br><span class="line">  <span class="attribute">--themeColor</span>:<span class="number">#eb4450</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>index.wxss里使用颜色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">view</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--themeColor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序子组件向父传参</title>
    <url>/2020/06/06/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%90%E7%BB%84%E4%BB%B6%E5%90%91%E7%88%B6%E4%BC%A0%E5%8F%82/</url>
    <content><![CDATA[<h2 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h2><p>1.先写个点击事件changeTab传的参是index</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;tabs&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"id"</span> <span class="attr">class</span>=<span class="string">"title-item  &#123;&#123;item.active?'active':''&#125;&#125;"</span> <span class="attr">bindtap</span>=<span class="string">"changeTab"</span> <span class="attr">data-index</span>=<span class="string">"&#123;&#123;index&#125;&#125;"</span>&gt;</span></span><br><span class="line">&#123;&#123;item.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.自定义事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    changeTab(e)&#123;</span><br><span class="line">        <span class="comment">//获取索引</span></span><br><span class="line">      <span class="keyword">let</span> index = e.currentTarget.dataset.index</span><br><span class="line">        <span class="comment">//触发父组件中的自定义事件  事件名,｛key:value｝</span></span><br><span class="line">        <span class="keyword">this</span>.triggerEvent(<span class="string">"tabActive"</span>,&#123;<span class="attr">index</span>:index&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h2><p>1.监听自定义事件,bind+自定义事件名，触发后执行onTabActive方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Tabs</span> <span class="attr">tabs</span>=<span class="string">"&#123;&#123;tabs&#125;&#125;"</span> <span class="attr">bindtabActive</span>=<span class="string">"onTabActive"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onTabActive(e)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序添加高亮</title>
    <url>/2020/05/24/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E9%AB%98%E4%BA%AE/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">bindtap</span>=<span class="string">"al"</span> <span class="attr">class</span>=<span class="string">"user-motto &#123;&#123;gaoliang?'active':''&#125;&#125;"</span>&gt;</span>&#123;&#123;motto&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">al()&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      gaoliang:<span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序点击事件</title>
    <url>/2020/05/24/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[ <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;text data-name&#x3D;&quot;5&quot; bindtap&#x3D;&quot;al&quot; class&#x3D;&quot;user-motto&quot;&gt;&#123;&#123;motto&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">&lt;text&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;text&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  al(el)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(el.currentTarget.dataset.name)</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    name: el.currentTarget.dataset.name</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序点击图片放大预览</title>
    <url>/2020/06/07/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%82%B9%E5%87%BB%E5%9B%BE%E7%89%87%E6%94%BE%E5%A4%A7%E9%A2%84%E8%A7%88/</url>
    <content><![CDATA[<p>1.写个点击事件<br>previewImage是原生小程序原生api</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bingImage(e)&#123;</span><br><span class="line">  &#x2F;&#x2F;显示哪张图片</span><br><span class="line">  let img &#x3D; e.currentTarget.dataset.img</span><br><span class="line">  &#x2F;&#x2F;所有的图片列表</span><br><span class="line">  let images &#x3D; this.Goods.pics.map(v&#x3D;&gt;v.pics_mid)</span><br><span class="line">  wx.previewImage(&#123;</span><br><span class="line">    current: img,   &#x2F;&#x2F;显示哪张图片</span><br><span class="line">    urls: images    &#x2F;&#x2F;所有的图片列表</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序组件使用</title>
    <url>/2020/05/31/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>1.先右键创建个组件<br><img src="/images/pasted-11.png" alt="upload successful"></p>
<p>2.在要使用的页面index.json中引入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;usingComponents&quot;: &#123;</span><br><span class="line">    &quot;SearchInput&quot;:&quot;..&#x2F;..&#x2F;components&#x2F;searchInput&#x2F;searchInput&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;navigationBarTitleText&quot;: &quot;首页&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-12.png" alt="upload successful"><br>3.在index.wxml中使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SearchInput &#x2F;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序缓存</title>
    <url>/2020/06/03/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<p><img src="/images/pasted-14.png" alt="upload successful"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onLoad: function (options) &#123;</span><br><span class="line">  &#x2F;&#x2F;获取本地存储的数据</span><br><span class="line">  const Cates &#x3D; wx.getStorageSync(&#39;cates&#39;)</span><br><span class="line">  if (!Cates) &#123;</span><br><span class="line">    &#x2F;&#x2F;如果没有就进行请求</span><br><span class="line">    this.getCategory()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    &#x2F;&#x2F;有旧数据</span><br><span class="line">    &#x2F;&#x2F;先判断过期没  10s</span><br><span class="line">    if (Date.now() - Cates.time &gt; 1000 * 10) &#123;</span><br><span class="line">      &#x2F;&#x2F;过期就重新发送请求</span><br><span class="line">      this.getCategory()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      this.Cates &#x3D; Cates.data</span><br><span class="line">      &#x2F;&#x2F;左侧数据</span><br><span class="line">      let leftMenuList &#x3D; this.Cates.map(v &#x3D;&gt; v.cat_name)</span><br><span class="line">      let rightContent &#x3D; this.Cates[0].children</span><br><span class="line">      &#x2F;&#x2F;右侧数据</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        leftMenuList: leftMenuList,</span><br><span class="line">        rightContent: rightContent</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cates:[],</span><br><span class="line">getCategory() &#123;</span><br><span class="line">   request(&#123;</span><br><span class="line">     url: &#39;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;api&#x2F;public&#x2F;v1&#x2F;categories&#39;</span><br><span class="line">   &#125;).then((res) &#x3D;&gt; &#123;</span><br><span class="line">     this.Cates &#x3D; res.data.message</span><br><span class="line">     &#x2F;&#x2F;把接口数据写入缓存</span><br><span class="line">     wx.setStorageSync(&#39;cates&#39;, &#123;time:Date.now(),data:this.Cates&#125;)</span><br><span class="line">        &#x2F;&#x2F;左侧数据</span><br><span class="line">       let leftMenuList &#x3D; this.Cates.map(v &#x3D;&gt; v.cat_name)</span><br><span class="line">       let rightContent &#x3D; this.Cates[0].children</span><br><span class="line">       &#x2F;&#x2F;右侧数据</span><br><span class="line">       this.setData(&#123;</span><br><span class="line">         leftMenuList: leftMenuList,</span><br><span class="line">         rightContent: rightContent</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序自定义循环名</title>
    <url>/2020/05/31/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BE%AA%E7%8E%AF%E5%90%8D/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view class&#x3D;&quot;floor-group&quot; wx:for&#x3D;&quot;&#123;&#123;floorList&#125;&#125;&quot; wx:key&#x3D;&quot;index1&quot; wx:for-item&#x3D;&quot;item1&quot; wx:for-index&#x3D;&quot;index1&quot;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>css滤镜(filter)</title>
    <url>/2020/05/24/%E5%9B%BE%E7%89%87%E5%8F%98%E7%81%B0-%E6%BB%A4%E9%95%9C/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-filter</span>: <span class="selector-tag">grayscale</span>(100%);    </span><br><span class="line"><span class="selector-tag">-moz-filter</span>: <span class="selector-tag">grayscale</span>(100%);</span><br><span class="line"><span class="selector-tag">-ms-filter</span>: <span class="selector-tag">grayscale</span>(100%);</span><br><span class="line"><span class="selector-tag">-o-filter</span>: <span class="selector-tag">grayscale</span>(100%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">grayscale</span>(100%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">gray</span>;</span><br><span class="line"><span class="selector-tag">opacity</span><span class="selector-pseudo">:0.7</span>;</span><br></pre></td></tr></table></figure>

<p>Filter    描述<br>none    默认值，没有效果。<br>blur(px)    给图像设置高斯模糊。”radius”一值设定高斯函数的标准差，或者是屏幕上以多少像素融在一起， 所以值越大越模糊；</p>
<p>如果没有设定值，则默认是0；这个参数可设置css长度值，但不接受百分比值。<br>brightness(%)    给图片应用一种线性乘法，使其看起来更亮或更暗。如果值是0%，图像会全黑。值是100%，则图像无变化。其他的值对应线性乘数效果。值超过100%也是可以的，图像会比原来更亮。如果没有设定值，默认是1。<br>contrast(%)    调整图像的对比度。值是0%的话，图像会全黑。值是100%，图像不变。值可以超过100%，意味着会运用更低的对比。若没有设置值，默认是1。<br>drop-shadow(h-shadow v-shadow blur spread color)<br>给图像设置一个阴影效果。阴影是合成在图像下面，可以有模糊度的，可以以特定颜色画出的遮罩图的偏移版本。 函数接受<shadow>(在CSS3背景中定义)类型的值，除了”inset”关键字是不允许的。该函数与已有的box-shadow box-shadow属性很相似；不同之处在于，通过滤镜，一些浏览器为了更好的性能会提供硬件加速。<shadow>参数如下：</p>
<p><offset-x> <offset-y> (必须)<br>这是设置阴影偏移量的两个 <length>值. <offset-x> 设定水平方向距离. 负值会使阴影出现在元素左边. <offset-y>设定垂直距离.负值会使阴影出现在元素上方。查看<length>可能的单位.<br>如果两个值都是0, 则阴影出现在元素正后面 (如果设置了 <blur-radius> and/or <spread-radius>，会有模糊效果).<br><blur-radius> (可选)<br>这是第三个code&gt;<length>值. 值越大，越模糊，则阴影会变得更大更淡.不允许负值 若未设定，默认是0 (则阴影的边界很锐利).<br><spread-radius> (可选)<br>这是第四个 <length>值. 正值会使阴影扩张和变大，负值会是阴影缩小.若未设定，默认是0 (阴影会与元素一样大小).<br>注意: Webkit, 以及一些其他浏览器 不支持第四个长度，如果加了也不会渲染。</p>
<p><color> (可选)<br>查看 <color>该值可能的关键字和标记。若未设定，颜色值基于浏览器。在Gecko (Firefox), Presto (Opera)和Trident (Internet Explorer)中， 会应用colorcolor属性的值。另外, 如果颜色值省略，WebKit中阴影是透明的。<br>grayscale(%)<br>将图像转换为灰度图像。值定义转换的比例。值为100%则完全转为灰度图像，值为0%图像无变化。值在0%到100%之间，则是效果的线性乘子。若未设置，值默认是0；</p>
<p>hue-rotate(deg)<br>给图像应用色相旋转。”angle”一值设定图像会被调整的色环角度值。值为0deg，则图像无变化。若值未设置，默认值是0deg。该值虽然没有最大值，超过360deg的值相当于又绕一圈。</p>
<p>invert(%)<br>反转输入图像。值定义转换的比例。100%的价值是完全反转。值为0%则图像无变化。值在0%和100%之间，则是效果的线性乘子。 若值未设置，值默认是0。</p>
<p>opacity(%)<br>转化图像的透明程度。值定义转换的比例。值为0%则是完全透明，值为100%则图像无变化。值在0%和100%之间，则是效果的线性乘子，也相当于图像样本乘以数量。 若值未设置，值默认是1。该函数与已有的opacity属性很相似，不同之处在于通过filter，一些浏览器为了提升性能会提供硬件加速。</p>
<p>saturate(%)<br>转换图像饱和度。值定义转换的比例。值为0%则是完全不饱和，值为100%则图像无变化。其他值，则是效果的线性乘子。超过100%的值是允许的，则有更高的饱和度。 若值未设置，值默认是1。</p>
<p>sepia(%)<br>将图像转换为深褐色。值定义转换的比例。值为100%则完全是深褐色的，值为0%图像无变化。值在0%到100%之间，则是效果的线性乘子。若未设置，值默认是0；</p>
<p>url()<br>URL函数接受一个XML文件，该文件设置了 一个SVG滤镜，且可以包含一个锚点来指定一个具体的滤镜元素。</p>
<p>例如：</p>
<p>filter: url(svg-url#element-id)<br>initial<br>设置属性为默认值，可参阅： CSS initial 关键字</p>
<p>inherit    从父元素继承该属性，可参阅：CSS inherit 关键字</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>引入字体</title>
    <url>/2020/05/23/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'pingfang'</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(../font/PINGFANG.TTF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"pingfang"</span><span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
  </entry>
  <entry>
    <title>手机rem</title>
    <url>/2020/05/24/%E6%89%8B%E6%9C%BArem/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span>  e=n.document,</span><br><span class="line">         t=e.documentElement,</span><br><span class="line">         i=<span class="number">720</span>,</span><br><span class="line">         d=i/<span class="number">100</span>,</span><br><span class="line">         o=<span class="string">"orientationchange"</span><span class="keyword">in</span> n?<span class="string">"orientationchange"</span>:<span class="string">"resize"</span>,</span><br><span class="line">         a=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="keyword">var</span> n=t.clientWidth||<span class="number">320</span>;n&gt;<span class="number">720</span>&amp;&amp;(n=<span class="number">720</span>);</span><br><span class="line">             t.style.fontSize=n/d+<span class="string">"px"</span></span><br><span class="line">         &#125;;</span><br><span class="line">         e.addEventListener&amp;&amp;(n.addEventListener(o,a,!<span class="number">1</span>),e.addEventListener(<span class="string">"DOMContentLoaded"</span>,a,!<span class="number">1</span>))</span><br><span class="line">&#125;(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure>

<p>华盖rem</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">d,c</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e=d.documentElement,</span><br><span class="line">        b=<span class="string">"resize"</span>,</span><br><span class="line">        a=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> f = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">            <span class="keyword">if</span>(!f)&#123;<span class="keyword">return</span>&#125;</span><br><span class="line">            e.style.fontSize= (f/<span class="number">1440</span>*<span class="number">100</span>).toFixed(<span class="number">0</span>)+<span class="string">"px"</span></span><br><span class="line">            e.style.overflowX=<span class="string">"hidden"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span>(!d.addEventListener)&#123;<span class="keyword">return</span>&#125;</span><br><span class="line">        c.addEventListener(b,a,<span class="literal">false</span>);</span><br><span class="line">        d.addEventListener(<span class="string">"DOMContentLoaded"</span>,a,<span class="literal">false</span>);</span><br><span class="line">        a()</span><br><span class="line">    &#125;)(<span class="built_in">document</span>,<span class="built_in">window</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>手机视频播放</title>
    <url>/2020/05/24/%E6%89%8B%E6%9C%BA%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">loop</span>=<span class="string">"loop"</span> <span class="attr">autoplay</span>=<span class="string">"autoplay"</span> <span class="attr">muted</span> <span class="attr">x5-playsinline</span>=<span class="string">""</span> <span class="attr">playsinline</span>=<span class="string">""</span> <span class="attr">x-webkit-airplay</span>=<span class="string">"allow"</span> <span class="attr">style</span>=<span class="string">"object-fit:fill"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>手机禁止放大</title>
    <url>/2020/05/24/%E6%89%8B%E6%9C%BA%E7%A6%81%E6%AD%A2%E6%94%BE%E5%A4%A7/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,height=device-height,inital-scale=1.0,maximum-scale=1.0,user-scalable=no;"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>手机视频不全屏</title>
    <url>/2020/05/24/%E6%89%8B%E6%9C%BA%E8%A7%86%E9%A2%91%E4%B8%8D%E5%85%A8%E5%B1%8F/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">poster</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">controls</span> <span class="attr">playsinline</span>=<span class="string">"true"</span> <span class="attr">webkit-playsinline</span>=<span class="string">"true"</span>  <span class="attr">x5-playsinline</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>改input样式</title>
    <url>/2020/05/24/%E6%94%B9input%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">"radio"</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">clip</span>: <span class="built_in">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">"radio"</span>]</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: .<span class="number">4em</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../images/<span class="number">5</span>.png) no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">"radio"</span>]</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">18px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">18px</span>;</span><br><span class="line">        <span class="attribute">margin-right</span>: .<span class="number">4em</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">url</span>(../images/<span class="number">4</span>.png) no-repeat;</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序封装接口</title>
    <url>/2020/05/31/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B0%81%E8%A3%85%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>新建个js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多次请求时关闭loading</span></span><br><span class="line"><span class="keyword">let</span> ajaxNum = <span class="number">0</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> request = <span class="function">(<span class="params">params</span>)=&gt;</span>&#123;</span><br><span class="line">    ajaxNum++</span><br><span class="line">    <span class="comment">//定义公共url</span></span><br><span class="line">    <span class="keyword">const</span> baseURL = <span class="string">"https://api-hmugo-web.itheima.net/api/public/v1"</span></span><br><span class="line">     wx.showLoading(&#123;</span><br><span class="line">      title: <span class="string">'加载中'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">            ...params,</span><br><span class="line">            url:baseURL+params.url,</span><br><span class="line">            success:<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;,</span><br><span class="line">            fail:<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;,</span><br><span class="line">            complete:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                ajaxNum--</span><br><span class="line">                <span class="keyword">if</span>(ajaxNum==<span class="number">0</span>)&#123;</span><br><span class="line">                    wx.hideLoading()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在要用到的页面的js上面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  request</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"../../request/index.js"</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-13.png" alt="upload successful"></p>
<p>使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getFloorList() &#123;</span><br><span class="line">  request(&#123;</span><br><span class="line">    url: <span class="string">'xxxxxxxxxxx'</span></span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      floorList: res.data.message</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.getFloorList()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>文字双齐</title>
    <url>/2020/05/24/%E6%96%87%E5%AD%97%E5%8F%8C%E9%BD%90/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">justify</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>滚动时导航改变</title>
    <url>/2020/05/24/%E6%BB%9A%E5%8A%A8%E6%97%B6%E5%AF%BC%E8%88%AA%E6%94%B9%E5%8F%98/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> scrollTop =$(<span class="keyword">this</span>).scrollTop();<span class="comment">//滚动高度</span></span><br><span class="line">        <span class="keyword">if</span>(scrollTop &gt; <span class="number">10</span>)&#123;</span><br><span class="line">            $(<span class="string">"#top1"</span>).addClass(<span class="string">"dh2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(scrollTop &lt; <span class="number">10</span>)&#123;</span><br><span class="line">            $(<span class="string">"#top1"</span>).removeClass(<span class="string">"dh2"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>jq</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>jq</tag>
      </tags>
  </entry>
  <entry>
    <title>当前时间</title>
    <url>/2020/07/06/%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="literal">null</span>;</span><br><span class="line">    t = setTimeout(time, <span class="number">1000</span>); <span class="comment">//開始运行</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">time</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      clearTimeout(t); <span class="comment">//清除定时器</span></span><br><span class="line">      dt = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">      <span class="keyword">var</span> y = dt.getFullYear();</span><br><span class="line">      <span class="keyword">var</span> mt = dt.getMonth() + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">var</span> day = dt.getDate();</span><br><span class="line">      <span class="keyword">var</span> h = dt.getHours(); <span class="comment">//获取时</span></span><br><span class="line">      <span class="keyword">var</span> m = dt.getMinutes(); <span class="comment">//获取分</span></span><br><span class="line">      <span class="keyword">var</span> s = dt.getSeconds(); <span class="comment">//获取秒</span></span><br><span class="line">      <span class="built_in">document</span>.querySelector(<span class="string">".showTime"</span>).innerHTML =</span><br><span class="line">        <span class="string">"当前时间："</span> +</span><br><span class="line">        y +</span><br><span class="line">        <span class="string">"年"</span> +</span><br><span class="line">        mt +</span><br><span class="line">        <span class="string">"月"</span> +</span><br><span class="line">        day +</span><br><span class="line">        <span class="string">"-"</span> +</span><br><span class="line">        h +</span><br><span class="line">        <span class="string">"时"</span> +</span><br><span class="line">        m +</span><br><span class="line">        <span class="string">"分"</span> +</span><br><span class="line">        s +</span><br><span class="line">        <span class="string">"秒"</span>;</span><br><span class="line">      t = setTimeout(time, <span class="number">1000</span>); <span class="comment">//设定定时器，循环运行</span></span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>点击视频播放</title>
    <url>/2020/05/24/%E7%82%B9%E5%87%BB%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> video1=<span class="built_in">document</span>.getElementById(<span class="string">"cideoPlay1"</span>);</span><br><span class="line"></span><br><span class="line">video1.οnclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(video1.paused)&#123;</span><br><span class="line">        video1.play();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        video1.pause();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>用js引入css</title>
    <url>/2020/05/24/%E7%94%A8js%E5%BC%95%E5%85%A5css/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;link rel='stylesheet' href='css/style.css'&gt;"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>百度地图秘钥</title>
    <url>/2020/05/24/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%A7%98%E9%92%A5/</url>
    <content><![CDATA[<p>nwNW4rgxKCm6cGYkSIPsezRjZ0vOsZyB</p>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
  </entry>
  <entry>
    <title>缓存封装</title>
    <url>/2020/08/22/%E7%BC%93%E5%AD%98%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Storage = &#123;</span><br><span class="line">    <span class="comment">// ==================sessionsTorage设置缓存================</span></span><br><span class="line">    <span class="comment">// 设置缓存</span></span><br><span class="line">    sessionSet: <span class="function"><span class="keyword">function</span> (<span class="params">name, data</span>) </span>&#123;</span><br><span class="line">        sessionStorage.removeItem(name)</span><br><span class="line">        sessionStorage.setItem(name, <span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取缓存</span></span><br><span class="line">    sessionGet: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(sessionStorage.getItem(name))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 清除缓存</span></span><br><span class="line">    sessionRemove: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">        sessionStorage.removeItem(name)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ==================localStorage设置缓存==================</span></span><br><span class="line">    <span class="comment">// 设置缓存</span></span><br><span class="line">    localSet: <span class="function"><span class="keyword">function</span> (<span class="params">name, data</span>) </span>&#123;</span><br><span class="line">        localStorage.removeItem(name)</span><br><span class="line">        localStorage.setItem(name, <span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取缓存</span></span><br><span class="line">    localGet: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(localStorage.getItem(name))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 清除缓存</span></span><br><span class="line">    localRemove: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">        localStorage.removeItem(name)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Storage</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>给vue动态赋值</title>
    <url>/2020/05/24/%E7%BB%99vue%E5%8A%A8%E6%80%81%E8%B5%8B%E5%80%BC/</url>
    <content><![CDATA[<p>告诉vue动态赋值了 要给那个对象赋值<br>  <code>this.$set(this.model,&#39;icon&#39;,res.url)</code><br>    3个参数是   要赋值的对象  key  value</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>监听路由改变</title>
    <url>/2020/05/24/%E7%9B%91%E5%90%AC%E8%B7%AF%E7%94%B1%E6%94%B9%E5%8F%98/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    <span class="comment">// 如果路由有变化，会再次执行该方法</span></span><br><span class="line">    <span class="string">'$route'</span>: <span class="string">'fetchData'</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>背景图片视差滚动</title>
    <url>/2020/05/24/%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.youshi_img</span>&#123;</span><br><span class="line">	<span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>让div可以自由编辑</title>
    <url>/2020/05/24/%E8%AE%A9div%E5%8F%AF%E4%BB%A5%E8%87%AA%E7%94%B1%E7%BC%96%E8%BE%91/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">contenteditable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>让整体网站配色变成黑白</title>
    <url>/2020/05/24/%E8%AE%A9%E6%95%B4%E4%BD%93%E7%BD%91%E7%AB%99%E9%85%8D%E8%89%B2%E5%8F%98%E6%88%90%E9%BB%91%E7%99%BD/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: gray;</span><br><span class="line">  <span class="attribute">-webkit-filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack 配置 loader</title>
    <url>/2020/06/14/webpack-%E9%85%8D%E7%BD%AE-loader/</url>
    <content><![CDATA[<h2 id="举例-先在index-js-里引入个css文件"><a href="#举例-先在index-js-里引入个css文件" class="headerlink" title="举例 先在index.js 里引入个css文件"></a>举例 先在index.js 里引入个css文件</h2><p><img src="/images/pasted-16.png" alt="upload successful"></p>
<h2 id="配置webpack"><a href="#配置webpack" class="headerlink" title="配置webpack"></a>配置webpack</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)<span class="comment">//导入path</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//入口文件</span></span><br><span class="line">    entry:<span class="string">'./src/index.js'</span>,</span><br><span class="line">    <span class="comment">//出口文件</span></span><br><span class="line">    output:&#123;</span><br><span class="line">        <span class="comment">//输出的文件名</span></span><br><span class="line">        filename:<span class="string">"bundle.js"</span>,</span><br><span class="line">        <span class="comment">//输出的路径  绝对路径  这句意思就是当前目录下的dist文件夹</span></span><br><span class="line">        path:path.resolve(__dirname,<span class="string">"dist"</span>)<span class="comment">//获取当前目录</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//模式  开发development/生产production</span></span><br><span class="line">    mode:<span class="string">"development"</span>,</span><br><span class="line">    <span class="comment">// loader配置</span></span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        <span class="comment">//对某个格式的文件进行转换处理</span></span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.css$/</span>, <span class="comment">//配置后缀名为css的文件（需要正则）</span></span><br><span class="line">                <span class="comment">//告知怎么处理，use数组中的loader有顺序要求，是从下到上的顺序</span></span><br><span class="line">                use:[</span><br><span class="line">                    <span class="comment">//将js的样式内容插入到style标签里面</span></span><br><span class="line">                    <span class="string">"style-loader"</span>,</span><br><span class="line">                    <span class="comment">// 将css文件转换为js</span></span><br><span class="line">                    <span class="string">"css-loader"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>!! 这时直接编译会报错</p>
<p><img src="/images/pasted-17.png" alt="upload successful"><br>提示没有所需要的依赖</p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p><code>cnpm install style-loader css-loader --save-dev</code></p>
<p>之后打包就没问题了</p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>vue生产环境编译</title>
    <url>/2020/07/23/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h3 id="修改全局变量-区分生产和开发环境"><a href="#修改全局变量-区分生产和开发环境" class="headerlink" title="修改全局变量 区分生产和开发环境"></a>修改全局变量 区分生产和开发环境</h3><p>最普通的打包<code>npm run build</code><br>这样虽然可以但是一些生产环境用的变量如：<a href="http://localhost:3000这种也被打包了，">http://localhost:3000这种也被打包了，</a><br>这样线上访问一定会出错的，所有要配置这种变量<br>改axios</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = axios.create(&#123;</span><br><span class="line">    <span class="comment">// baseURL: "http://localhost:3000/admin/api"</span></span><br><span class="line">    <span class="comment">// process.env 表示环境变量 VUE_APP_API_URL是真正的接口地址，必须以 VUE_APP 开头</span></span><br><span class="line">    baseURL: process.env.VUE_APP_API_URL || <span class="string">"/admin/api"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>之后在admin下新建个.env.development文件,内容就是之前定义的变量和真正的地址</p>
<p><img src="/images/pasted-89.png" alt="upload successful"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VUE_APP_API_URL &#x3D; http:&#x2F;&#x2F;localhost:3000&#x2F;admin&#x2F;api</span><br></pre></td></tr></table></figure>
<p>这样本地开发时请求的就是3000接口，打包后请求的就是域名的接口</p>
<p><img src="/images/pasted-78.png" alt="upload successful"></p>
<h3 id="把打包后的文件放到服务端"><a href="#把打包后的文件放到服务端" class="headerlink" title="把打包后的文件放到服务端"></a>把打包后的文件放到服务端</h3><p>之后把打包后的dist复制到server里，改名成admin</p>
<p><img src="/images/pasted-86.png" alt="upload successful"></p>
<p>给server的index.js写个文件托管这个admin</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.use(&quot;&#x2F;admin&quot;,express.static(__dirname+&quot;&#x2F;admin&quot;))</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-85.png" alt="upload successful"></p>
<p>这时访问<a href="http://localhost:3000/admin/是打不开的，因为所有的静态资源如css,js等访问的都是根地址，现在前面加了个admin，路径就不对了，所有要在打包时路径前面就加上admin" target="_blank" rel="noopener">http://localhost:3000/admin/是打不开的，因为所有的静态资源如css,js等访问的都是根地址，现在前面加了个admin，路径就不对了，所有要在打包时路径前面就加上admin</a></p>
<p>去admin里新建个vue.config.js</p>
<p><img src="/images/pasted-87.png" alt="upload successful"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    outputDir : __dirname +<span class="string">"/../server/admin"</span>,<span class="comment">//打包后的文件放到哪个文件夹下，默认就是那个dist</span></span><br><span class="line">    publicPath:process.env.NODE_ENV === <span class="string">"production"</span></span><br><span class="line">    ? <span class="string">"/admin/"</span></span><br><span class="line">    : <span class="string">'/'</span></span><br><span class="line">    <span class="comment">// 这个是生成的静态文件路径，就是打包后走第一个，不然走第二个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>限制文字显示几行</title>
    <url>/2020/05/24/%E9%99%90%E5%88%B6%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA%E5%87%A0%E8%A1%8C/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span>;</span><br><span class="line"><span class="selector-tag">-webkit-line-clamp</span>: 2;</span><br><span class="line"><span class="selector-tag">-webkit-box-orient</span>: <span class="selector-tag">vertical</span>;</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>object-fit改变元素内容怎么缩放</title>
    <url>/2020/05/24/%E8%AE%A9%E7%BD%91%E7%AB%99%E6%95%B4%E4%BD%93%E5%8F%98%E6%88%90%E9%BB%91%E7%99%BD/</url>
    <content><![CDATA[<p>object-fit</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fill</span> &#123; <span class="attribute">object-fit</span>: fill; &#125;</span><br><span class="line"><span class="selector-class">.contain</span> &#123; <span class="attribute">object-fit</span>: contain; &#125;</span><br><span class="line"><span class="selector-class">.cover</span> &#123; <span class="attribute">object-fit</span>: cover; &#125;</span><br><span class="line"><span class="selector-class">.none</span> &#123; <span class="attribute">object-fit</span>: none; &#125;</span><br><span class="line"><span class="selector-class">.scale-down</span> &#123; <span class="attribute">object-fit</span>: scale-down; &#125;</span><br></pre></td></tr></table></figure>
<p>每个属性值的具体含义如下：<br>fill: 中文释义“填充”。默认值。替换内容拉伸填满整个content box, 不保证保持原有的比例。<br>contain: 中文释义“包含”。保持原有尺寸比例。保证替换内容尺寸一定可以在容器里面放得下。因此，此参数可能会在容器内留下空白。<br>cover: 中文释义“覆盖”。保持原有尺寸比例。保证替换内容尺寸一定大于容器尺寸，宽度和高度至少有一个和容器一致。因此，此参数可能会让替换内容（如图片）部分区域不可见。<br>none: 中文释义“无”。保持原有尺寸比例。同时保持替换内容原始尺寸大小。<br>scale-down: 中文释义“降低”。就好像依次设置了none或contain, 最终呈现的是尺寸比较小的那个。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>雪碧图定位工具网站</title>
    <url>/2020/05/24/%E9%9B%AA%E7%A2%A7%E5%9B%BE%E5%AE%9A%E4%BD%8D%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p><a href="http://www.spritecow.com" target="_blank" rel="noopener">www.spritecow.com</a></p>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>方便的网址</tag>
      </tags>
  </entry>
  <entry>
    <title>防抖</title>
    <url>/2020/06/14/%E9%98%B2%E6%8A%96/</url>
    <content><![CDATA[<p><img src="/images/pasted-25.png" alt="upload successful"></p>
]]></content>
  </entry>
  <entry>
    <title>默认以开发者模式打开谷歌</title>
    <url>/2020/05/24/%E9%BB%98%E8%AE%A4%E4%BB%A5%E5%BC%80%E5%8F%91%E8%80%85%E6%A8%A1%E5%BC%8F%E6%89%93%E5%BC%80%E8%B0%B7%E6%AD%8C/</url>
    <content><![CDATA[<p>右键谷歌浏览器，属性里填上<br>-incognito</p>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>打包图片资源文件</title>
    <url>/2020/06/14/%E6%89%93%E5%8C%85%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//匹配图片文件</span></span><br><span class="line">    test:<span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">    <span class="comment">//配置路径解析</span></span><br><span class="line">    loader:<span class="string">"url-loader"</span>,</span><br><span class="line">    <span class="comment">//内容处理 比如:</span></span><br><span class="line">    options:&#123;</span><br><span class="line">        limit:<span class="number">8</span>*<span class="number">1024</span>,<span class="comment">//图片小于8k,进行base64位的处理（优点减少请求次数，缺点体积会更大）</span></span><br><span class="line">        esModule:<span class="literal">false</span>, <span class="comment">//es6模块化可能会跟loader有冲突，就先关闭掉es6模块化解析</span></span><br><span class="line">        name:<span class="string">'[hash:10].[ext]'</span> <span class="comment">//起名：hash的前10位,[ext]图片的扩展名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 处理html</span></span><br><span class="line">&#123;</span><br><span class="line">    test:<span class="regexp">/\.html$/</span>,</span><br><span class="line">    loader:<span class="string">'html-loader'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 之后要安装loader<br> <code>cnpm install url-loader html-loader --save-dev</code><br> 因为用到文件要按file-loader<br> <code>cnpm i file-loader --save-dev</code></p>
<p><img src="/images/pasted-22.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义hooks</title>
    <url>/2020/07/01/%E8%87%AA%E5%AE%9A%E4%B9%89hooks/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React ,&#123; useState , useEffect , useCallback &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="comment">//监听窗口缩放实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义hooks函数,必须use开头</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useWindowSize</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//用useState记录大小，和改变大小的方法</span></span><br><span class="line">    <span class="keyword">const</span> [size,setSize] = useState(&#123;</span><br><span class="line">        width:<span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">        height:<span class="built_in">document</span>.documentElement.clientHeight,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//定义尺寸改变后执行的方法 useCallback缓存方法，利于优化</span></span><br><span class="line">    <span class="keyword">const</span> onResize = useCallback(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        setSize(&#123;</span><br><span class="line">            width:<span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">            height:<span class="built_in">document</span>.documentElement.clientHeight,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,[])</span><br><span class="line">    <span class="comment">//初始化方法</span></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,onResize)</span><br><span class="line">        <span class="comment">//离开时销毁</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">window</span>.removeEventListener(<span class="string">"resize"</span>,onResize)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"溜了溜了"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,[])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> size</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example6</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> size = useWindowSize()</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;&#123;size.width&#125;*&#123;size.height&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Example6</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>配置plugin插件完成html模板打包</title>
    <url>/2020/06/14/%E9%85%8D%E7%BD%AEplugin%E6%8F%92%E4%BB%B6%E5%AE%8C%E6%88%90html%E6%A8%A1%E6%9D%BF%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<h2 id="引入plugin"><a href="#引入plugin" class="headerlink" title="引入plugin"></a>引入plugin</h2><p><img src="/images/pasted-18.png" alt="upload successful"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>)<span class="comment">//导入plugin</span></span><br></pre></td></tr></table></figure>
<p>需要下载依赖<br><code>cnpm i html-webpack-plugin --save-dev</code></p>
<h2 id="写plugin"><a href="#写plugin" class="headerlink" title="写plugin"></a>写plugin</h2><p><img src="/images/pasted-19.png" alt="upload successful"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins:[</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        <span class="comment">//将index.html和index.js进行整合</span></span><br><span class="line">        template:<span class="string">"./src/index.html"</span> <span class="comment">//要整合的html的路径</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p> 如果报错检查package.json里有没有webpack,没有就<code>npm i webpack --save-dev</code></p>
<p><img src="/images/pasted-20.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex 例子</title>
    <url>/2020/08/23/Vuex-%E4%BE%8B%E5%AD%90/</url>
    <content><![CDATA[<p>引入vuex</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">"vuex"</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cart <span class="keyword">from</span> <span class="string">"./modules/cart.js"</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">"./modules/path.js"</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">"./modules/user.js"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">	modules:&#123;</span><br><span class="line">		cart,</span><br><span class="line">		path,</span><br><span class="line">		user</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-270.png" alt="upload successful"><br>vuex</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	state: &#123;</span><br><span class="line">		list: [],</span><br><span class="line">		selectedList: []</span><br><span class="line">	&#125;,</span><br><span class="line">	getters: &#123;</span><br><span class="line">		all(state) &#123;</span><br><span class="line">			<span class="keyword">return</span> state.list.length === state.selectedList.length</span><br><span class="line">		&#125;,</span><br><span class="line">		totalCount(state) &#123;</span><br><span class="line">			<span class="keyword">let</span> total = &#123;</span><br><span class="line">				price: <span class="number">0</span>,</span><br><span class="line">				num: <span class="number">0</span></span><br><span class="line">			&#125;</span><br><span class="line">			state.list.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (state.selectedList.indexOf(v.id) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">					total.price += v.pprice * v.num</span><br><span class="line">					total.num = state.selectedList.length</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">			<span class="keyword">return</span> total</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	mutations: &#123;</span><br><span class="line">		addShopCart(state,goods)&#123;</span><br><span class="line">			state.list.push(goods)</span><br><span class="line">		&#125;,</span><br><span class="line">		cAll(state) &#123;</span><br><span class="line">			state.selectedList = state.list.map(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">				v.checked = <span class="literal">true</span></span><br><span class="line">				<span class="keyword">return</span> v.id</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;,</span><br><span class="line">		uAll(state) &#123;</span><br><span class="line">			state.selectedList = []</span><br><span class="line">			state.list.map(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">				v.checked = <span class="literal">false</span></span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;,</span><br><span class="line">		checkedAdd(state, index) &#123;</span><br><span class="line">			<span class="keyword">let</span> id = state.list[index].id</span><br><span class="line">			<span class="keyword">let</span> i = state.selectedList.indexOf(id);</span><br><span class="line">			<span class="keyword">if</span> (i &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">				state.list[index].checked = <span class="literal">false</span></span><br><span class="line">				state.selectedList.splice(i, <span class="number">1</span>)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				state.list[index].checked = <span class="literal">true</span></span><br><span class="line">				state.selectedList.push(id)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		dalGood(state) &#123;</span><br><span class="line">			state.list = state.list.filter(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> state.selectedList.indexOf(v.id) === <span class="number">-1</span></span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	actions: &#123;</span><br><span class="line">		checkedAll(&#123;</span><br><span class="line">			getters,</span><br><span class="line">			commit</span><br><span class="line">		&#125;) &#123;</span><br><span class="line">			getters.all ? commit(<span class="string">"uAll"</span>) : commit(<span class="string">"cAll"</span>)</span><br><span class="line">		&#125;,</span><br><span class="line">		delGoods(&#123;commit&#125;) &#123;</span><br><span class="line">			commit(<span class="string">"dalGood"</span>);</span><br><span class="line">			commit(<span class="string">'uAll'</span>)</span><br><span class="line">			uni.showToast(&#123;</span><br><span class="line">				title:<span class="string">"删除成功"</span>,</span><br><span class="line">				icon:<span class="string">"none"</span></span><br><span class="line">				</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"shop_cart"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"list.length&gt;0"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">uniNavBar</span> <span class="attr">title</span>=<span class="string">"购物车"</span> <span class="attr">:right-text</span>=<span class="string">"isNavBar?'完成':'编辑'"</span> <span class="attr">fixed</span>=<span class="string">"true"</span> <span class="attr">status-bar</span>=<span class="string">"true"</span> @<span class="attr">clickRight</span>=<span class="string">"isNavBar=!isNavBar"</span>&gt;</span><span class="tag">&lt;/<span class="name">uniNavBar</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"shop_list"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"shop_item"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in list"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio"</span> @<span class="attr">tap</span>=<span class="string">"checkedAdd(index)"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">radio</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">:checked</span>=<span class="string">"item.checked"</span> <span class="attr">color</span>=<span class="string">"#ff3333"</span>&gt;</span><span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"shop_img"</span> <span class="attr">:src</span>=<span class="string">"item.imgUrl"</span> <span class="attr">mode</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"shop_text"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"shop_name"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"shop_color f-color"</span>&gt;</span>&#123;&#123;item.color&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"shop_price"</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span>￥&#123;&#123;item.pprice&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"!isNavBar"</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span>*&#123;&#123;item.num&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"isNavBar"</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">unf</span> @<span class="attr">change</span>=<span class="string">"changeNum($event,index)"</span> <span class="attr">:value</span>=<span class="string">"item.num"</span> <span class="attr">min</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">unf</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"shop_foot"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio foot_radio"</span> @<span class="attr">tap</span>=<span class="string">"checkedAll"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">radio</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">:checked</span>=<span class="string">"all"</span> /&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"!isNavBar"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"foot_total"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"foot_price"</span>&gt;</span>合计:<span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"f-active-color"</span>&gt;</span>￥&#123;&#123;totalCount.price&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"foot_num"</span> @<span class="attr">tap</span>=<span class="string">"goConfirmOrder"</span>&gt;</span>结算（&#123;&#123;totalCount.num&#125;&#125;）<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"foot_total"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"foot_price"</span> <span class="attr">style</span>=<span class="string">"background: #000000;color: #fff;"</span>&gt;</span>移入收藏夹<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"foot_num"</span> @<span class="attr">tap</span>=<span class="string">"delGoods"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">uniNavBar</span> <span class="attr">title</span>=<span class="string">"购物车"</span> <span class="attr">status-bar</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">uniNavBar</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"null"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">text</span>&gt;</span>购物车是空的<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Tabbar</span> <span class="attr">cureentPage</span>=<span class="string">"shopcart"</span>&gt;</span><span class="tag">&lt;/<span class="name">Tabbar</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="meta"><span class="meta-keyword">import</span> &#123;</span></span></span><br><span class="line">		mapState,</span><br><span class="line">		mapActions,</span><br><span class="line">		mapGetters,</span><br><span class="line">		mapMutations</span><br><span class="line"><span class="javascript">	&#125; <span class="keyword">from</span> <span class="string">"vuex"</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">import</span> uniNavBar <span class="keyword">from</span> <span class="string">"../../components/uni/uni-nav-bar/uni-nav-bar.vue"</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">import</span> unf <span class="keyword">from</span> <span class="string">"../../components/uni/uni-number-box/uni-number-box.vue"</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">import</span> Tabbar <span class="keyword">from</span> <span class="string">"@/components/common/Tabbar.vue"</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">		data() &#123;</span><br><span class="line"><span class="actionscript">			<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">				isNavBar: <span class="literal">false</span>,</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		computed: &#123;</span><br><span class="line">			...mapState(&#123;</span><br><span class="line"><span class="javascript">				list: <span class="function"><span class="params">state</span> =&gt;</span> state.cart.list</span></span><br><span class="line">			&#125;),</span><br><span class="line"><span class="actionscript">			...mapGetters([<span class="string">'all'</span>, <span class="string">'totalCount'</span>])</span></span><br><span class="line">		&#125;,</span><br><span class="line">		components: &#123;</span><br><span class="line">			uniNavBar,</span><br><span class="line">			unf,</span><br><span class="line">			Tabbar</span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line"><span class="actionscript">			...mapActions([<span class="string">'checkedAll'</span>,<span class="string">'delGoods'</span>]),</span></span><br><span class="line"><span class="actionscript">			...mapMutations([<span class="string">'checkedAdd'</span>]),</span></span><br><span class="line">			changeNum(value,index)&#123;</span><br><span class="line"><span class="actionscript">				<span class="keyword">this</span>.list[index].num = value</span></span><br><span class="line">			&#125;,</span><br><span class="line">			goConfirmOrder()&#123;</span><br><span class="line">				uni.navigateTo(&#123;</span><br><span class="line"><span class="actionscript">					url:<span class="string">'../confirm-order/confirm-order'</span></span></span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
